[
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "heapq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "heapq",
        "description": "heapq",
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "permutations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "permutations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "permutations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "permutations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "combinations",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "bisect_left",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_right",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_left",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_right",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_left",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_right",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_left",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_right",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_left",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_right",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_left",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "bisect_right",
        "importPath": "bisect",
        "description": "bisect",
        "isExtraImport": true,
        "detail": "bisect",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Baekjoon.1009",
        "description": "Baekjoon.1009",
        "peekOfCode": "t = int(input())\nfor _ in range(t):\n    a, b = map(int, input().split())\n    answer = 1\n    for _ in range(b):\n        answer = (answer * a) % 10\n    if answer == 0:\n        print(10)\n    else:\n        print(answer)",
        "detail": "Baekjoon.1009",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Baekjoon.1010",
        "description": "Baekjoon.1010",
        "peekOfCode": "t = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    numerator = 1\n    for i in range(m, max(m - n, n), -1):\n        numerator *= i\n    denominator = 1\n    for i in range(min(m - n, n), 0, -1):\n        denominator *= i\n    answer = numerator // denominator",
        "detail": "Baekjoon.1010",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Baekjoon.10798",
        "description": "Baekjoon.10798",
        "peekOfCode": "data = deque()\nfor _ in range(5):\n    data.append(\"\".join(input().split()))\nanswer = \"\"\nwhile data:\n    s = data.popleft()\n    if len(s) > 0:\n        answer += s[0]\n        data.append(s[1:])\nprint(answer)",
        "detail": "Baekjoon.10798",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Baekjoon.10798",
        "description": "Baekjoon.10798",
        "peekOfCode": "answer = \"\"\nwhile data:\n    s = data.popleft()\n    if len(s) > 0:\n        answer += s[0]\n        data.append(s[1:])\nprint(answer)",
        "detail": "Baekjoon.10798",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Baekjoon.10807",
        "description": "Baekjoon.10807",
        "peekOfCode": "n = int(input())\nnums = list(map(int, input().split()))\nv = int(input())\nprint(nums.count(v))",
        "detail": "Baekjoon.10807",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "Baekjoon.10807",
        "description": "Baekjoon.10807",
        "peekOfCode": "nums = list(map(int, input().split()))\nv = int(input())\nprint(nums.count(v))",
        "detail": "Baekjoon.10807",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "Baekjoon.10807",
        "description": "Baekjoon.10807",
        "peekOfCode": "v = int(input())\nprint(nums.count(v))",
        "detail": "Baekjoon.10807",
        "documentation": {}
    },
    {
        "label": "n,m",
        "kind": 5,
        "importPath": "Baekjoon.10810",
        "description": "Baekjoon.10810",
        "peekOfCode": "n,m = map(int, input().split())\nballs = [0] * n\nfor _ in range(m):\n    i,j,k = map(int,input().split())\n    for idx in range(i-1,j):\n        balls[idx] = k\nfor b in balls:\n    print(b, end=\" \")",
        "detail": "Baekjoon.10810",
        "documentation": {}
    },
    {
        "label": "balls",
        "kind": 5,
        "importPath": "Baekjoon.10810",
        "description": "Baekjoon.10810",
        "peekOfCode": "balls = [0] * n\nfor _ in range(m):\n    i,j,k = map(int,input().split())\n    for idx in range(i-1,j):\n        balls[idx] = k\nfor b in balls:\n    print(b, end=\" \")",
        "detail": "Baekjoon.10810",
        "documentation": {}
    },
    {
        "label": "balls",
        "kind": 5,
        "importPath": "Baekjoon.10811",
        "description": "Baekjoon.10811",
        "peekOfCode": "balls = [i for i in range(1,n+1)]\nfor _ in range(m):\n    i, j = map(int,input().split())\n    balls = balls[:i-1]+list(reversed(balls[i-1:j]))+balls[j:]\nfor i in range(n):\n    print(balls[i], end=\" \")",
        "detail": "Baekjoon.10811",
        "documentation": {}
    },
    {
        "label": "balls",
        "kind": 5,
        "importPath": "Baekjoon.10813",
        "description": "Baekjoon.10813",
        "peekOfCode": "balls = [i for i in range(1,n+1)]\nfor _ in range(m):\n    i, j = map(int,input().split())\n    balls[i-1], balls[j-1] = balls[j-1], balls[i-1]\nfor i in range(n):\n    print(balls[i], end=\" \")",
        "detail": "Baekjoon.10813",
        "documentation": {}
    },
    {
        "label": "chess",
        "kind": 5,
        "importPath": "Baekjoon.1100",
        "description": "Baekjoon.1100",
        "peekOfCode": "chess = []\nfor _ in range(8):\n    chess.append(input())\nanswer = 0\nfor i in range(8):\n    for j in range(8):\n        if (i + j) % 2 == 0 and chess[i][j] == \"F\":\n            answer += 1\nprint(answer)",
        "detail": "Baekjoon.1100",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Baekjoon.1100",
        "description": "Baekjoon.1100",
        "peekOfCode": "answer = 0\nfor i in range(8):\n    for j in range(8):\n        if (i + j) % 2 == 0 and chess[i][j] == \"F\":\n            answer += 1\nprint(answer)",
        "detail": "Baekjoon.1100",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Baekjoon.11674",
        "description": "Baekjoon.11674",
        "peekOfCode": "s = input()\nx = 0\ny = 0\nfor i in range(len(s)):\n    x = 2 * x\n    y = 2 * y\n    if s[i] == \"0\":\n        pass\n    if s[i] == \"1\":\n        x += 1",
        "detail": "Baekjoon.11674",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Baekjoon.11674",
        "description": "Baekjoon.11674",
        "peekOfCode": "x = 0\ny = 0\nfor i in range(len(s)):\n    x = 2 * x\n    y = 2 * y\n    if s[i] == \"0\":\n        pass\n    if s[i] == \"1\":\n        x += 1\n    if s[i] == \"2\":",
        "detail": "Baekjoon.11674",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Baekjoon.11674",
        "description": "Baekjoon.11674",
        "peekOfCode": "y = 0\nfor i in range(len(s)):\n    x = 2 * x\n    y = 2 * y\n    if s[i] == \"0\":\n        pass\n    if s[i] == \"1\":\n        x += 1\n    if s[i] == \"2\":\n        y += 1",
        "detail": "Baekjoon.11674",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Baekjoon.1357",
        "description": "Baekjoon.1357",
        "peekOfCode": "x = int(x[::-1])\ny = int(y[::-1])\nanswer = int(str(x + y)[::-1])\nprint(answer)",
        "detail": "Baekjoon.1357",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Baekjoon.1357",
        "description": "Baekjoon.1357",
        "peekOfCode": "y = int(y[::-1])\nanswer = int(str(x + y)[::-1])\nprint(answer)",
        "detail": "Baekjoon.1357",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Baekjoon.1357",
        "description": "Baekjoon.1357",
        "peekOfCode": "answer = int(str(x + y)[::-1])\nprint(answer)",
        "detail": "Baekjoon.1357",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Baekjoon.18108",
        "description": "Baekjoon.18108",
        "peekOfCode": "y = int(input())\nprint(y-(2541-1998))",
        "detail": "Baekjoon.18108",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Baekjoon.1920",
        "description": "Baekjoon.1920",
        "peekOfCode": "n = int(input())\na = list(map(int, input().split()))\nm = int(input())\nchecks = list(map(int, input().split()))\na.sort()\nfor check in checks:\n    if check in a:\n        print(1)\n    else:\n        print(0)",
        "detail": "Baekjoon.1920",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Baekjoon.1920",
        "description": "Baekjoon.1920",
        "peekOfCode": "a = list(map(int, input().split()))\nm = int(input())\nchecks = list(map(int, input().split()))\na.sort()\nfor check in checks:\n    if check in a:\n        print(1)\n    else:\n        print(0)",
        "detail": "Baekjoon.1920",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "Baekjoon.1920",
        "description": "Baekjoon.1920",
        "peekOfCode": "m = int(input())\nchecks = list(map(int, input().split()))\na.sort()\nfor check in checks:\n    if check in a:\n        print(1)\n    else:\n        print(0)",
        "detail": "Baekjoon.1920",
        "documentation": {}
    },
    {
        "label": "checks",
        "kind": 5,
        "importPath": "Baekjoon.1920",
        "description": "Baekjoon.1920",
        "peekOfCode": "checks = list(map(int, input().split()))\na.sort()\nfor check in checks:\n    if check in a:\n        print(1)\n    else:\n        print(0)",
        "detail": "Baekjoon.1920",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Baekjoon.19532",
        "description": "Baekjoon.19532",
        "peekOfCode": "x = (c * e - b * f) / (a * e - b * d)\ny = (a * f - c * d) / (a * e - b * d)\nprint(int(x), int(y))",
        "detail": "Baekjoon.19532",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Baekjoon.19532",
        "description": "Baekjoon.19532",
        "peekOfCode": "y = (a * f - c * d) / (a * e - b * d)\nprint(int(x), int(y))",
        "detail": "Baekjoon.19532",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Baekjoon.2110",
        "description": "Baekjoon.2110",
        "peekOfCode": "data = []\nfor _ in range(n):\n    data.append(int(input()))\ndata.sort()",
        "detail": "Baekjoon.2110",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Baekjoon.2178",
        "description": "Baekjoon.2178",
        "peekOfCode": "graph = []\nfor _ in range(n):\n    graph.append(list(map(int, input())))\nq = deque()\nq.append((0, 0))\ndx = [1, 0, -1, 0]\ndy = [0, 1, 0, -1]\nanswer = 0\nwhile q:\n    x, y = q.popleft()",
        "detail": "Baekjoon.2178",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "Baekjoon.2178",
        "description": "Baekjoon.2178",
        "peekOfCode": "q = deque()\nq.append((0, 0))\ndx = [1, 0, -1, 0]\ndy = [0, 1, 0, -1]\nanswer = 0\nwhile q:\n    x, y = q.popleft()\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]",
        "detail": "Baekjoon.2178",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Baekjoon.2178",
        "description": "Baekjoon.2178",
        "peekOfCode": "dx = [1, 0, -1, 0]\ndy = [0, 1, 0, -1]\nanswer = 0\nwhile q:\n    x, y = q.popleft()\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < m and graph[nx][ny] == 1:\n            graph[nx][ny] = graph[x][y] + 1",
        "detail": "Baekjoon.2178",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Baekjoon.2178",
        "description": "Baekjoon.2178",
        "peekOfCode": "dy = [0, 1, 0, -1]\nanswer = 0\nwhile q:\n    x, y = q.popleft()\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < m and graph[nx][ny] == 1:\n            graph[nx][ny] = graph[x][y] + 1\n            q.append((nx, ny))",
        "detail": "Baekjoon.2178",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Baekjoon.2178",
        "description": "Baekjoon.2178",
        "peekOfCode": "answer = 0\nwhile q:\n    x, y = q.popleft()\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < m and graph[nx][ny] == 1:\n            graph[nx][ny] = graph[x][y] + 1\n            q.append((nx, ny))\nprint(graph[n - 1][m - 1])",
        "detail": "Baekjoon.2178",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Baekjoon.23913",
        "description": "Baekjoon.23913",
        "peekOfCode": "t = int(input())\nfor case in range(t):\n    n = int(input())\n    array = list(map(int, sys.stdin.readline().split()))\n    answer = 2\n    count = 2\n    for i in range(2, len(array)):\n        if array[i - 2] - array[i - 1] == array[i - 1] - array[i]:\n            count += 1\n        else:",
        "detail": "Baekjoon.23913",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Baekjoon.2480",
        "description": "Baekjoon.2480",
        "peekOfCode": "result = 0\nif a == b == c:\n    result = 10000 + 1000*a\nelif a != b and a!= c and b!=c:\n    result = 100*max(a,b,c)\nelse:\n    if a == b:\n        same = a\n    elif b == c:\n        same = b",
        "detail": "Baekjoon.2480",
        "documentation": {}
    },
    {
        "label": "scores",
        "kind": 5,
        "importPath": "Baekjoon.25206",
        "description": "Baekjoon.25206",
        "peekOfCode": "scores = []\ntotal = []\ngrades = {\n    \"A+\": 4.5,\n    \"A0\": 4.0,\n    \"B+\": 3.5,\n    \"B0\": 3.0,\n    \"C+\": 2.5,\n    \"C0\": 2.0,\n    \"D+\": 1.5,",
        "detail": "Baekjoon.25206",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "Baekjoon.25206",
        "description": "Baekjoon.25206",
        "peekOfCode": "total = []\ngrades = {\n    \"A+\": 4.5,\n    \"A0\": 4.0,\n    \"B+\": 3.5,\n    \"B0\": 3.0,\n    \"C+\": 2.5,\n    \"C0\": 2.0,\n    \"D+\": 1.5,\n    \"D0\": 1.0,",
        "detail": "Baekjoon.25206",
        "documentation": {}
    },
    {
        "label": "grades",
        "kind": 5,
        "importPath": "Baekjoon.25206",
        "description": "Baekjoon.25206",
        "peekOfCode": "grades = {\n    \"A+\": 4.5,\n    \"A0\": 4.0,\n    \"B+\": 3.5,\n    \"B0\": 3.0,\n    \"C+\": 2.5,\n    \"C0\": 2.0,\n    \"D+\": 1.5,\n    \"D0\": 1.0,\n    \"F\": 0.0,",
        "detail": "Baekjoon.25206",
        "documentation": {}
    },
    {
        "label": "a,b",
        "kind": 5,
        "importPath": "Baekjoon.2525",
        "description": "Baekjoon.2525",
        "peekOfCode": "a,b = map(int, input().split())\nc = int(input())\nhour = a\nminute = b+c\nif minute >= 60:\n    hour += minute // 60\n    minute = minute % 60\nif hour > 23:\n    hour -= 24\nprint(hour,minute)",
        "detail": "Baekjoon.2525",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "Baekjoon.2525",
        "description": "Baekjoon.2525",
        "peekOfCode": "c = int(input())\nhour = a\nminute = b+c\nif minute >= 60:\n    hour += minute // 60\n    minute = minute % 60\nif hour > 23:\n    hour -= 24\nprint(hour,minute)",
        "detail": "Baekjoon.2525",
        "documentation": {}
    },
    {
        "label": "hour",
        "kind": 5,
        "importPath": "Baekjoon.2525",
        "description": "Baekjoon.2525",
        "peekOfCode": "hour = a\nminute = b+c\nif minute >= 60:\n    hour += minute // 60\n    minute = minute % 60\nif hour > 23:\n    hour -= 24\nprint(hour,minute)",
        "detail": "Baekjoon.2525",
        "documentation": {}
    },
    {
        "label": "minute",
        "kind": 5,
        "importPath": "Baekjoon.2525",
        "description": "Baekjoon.2525",
        "peekOfCode": "minute = b+c\nif minute >= 60:\n    hour += minute // 60\n    minute = minute % 60\nif hour > 23:\n    hour -= 24\nprint(hour,minute)",
        "detail": "Baekjoon.2525",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Baekjoon.25304",
        "description": "Baekjoon.25304",
        "peekOfCode": "x = int(input())\nn = int(input())\ntotal = 0\nfor _ in range(n):\n    a,b = map(int, input().split())\n    total += a*b\nif total == x:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "detail": "Baekjoon.25304",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Baekjoon.25304",
        "description": "Baekjoon.25304",
        "peekOfCode": "n = int(input())\ntotal = 0\nfor _ in range(n):\n    a,b = map(int, input().split())\n    total += a*b\nif total == x:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "detail": "Baekjoon.25304",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "Baekjoon.25304",
        "description": "Baekjoon.25304",
        "peekOfCode": "total = 0\nfor _ in range(n):\n    a,b = map(int, input().split())\n    total += a*b\nif total == x:\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "detail": "Baekjoon.25304",
        "documentation": {}
    },
    {
        "label": "canvas",
        "kind": 5,
        "importPath": "Baekjoon.2563",
        "description": "Baekjoon.2563",
        "peekOfCode": "canvas = [[0] * 100 for _ in range(100)]\nn = int(input())\nfor _ in range(n):\n    x, y = map(int, input().split())\n    for i in range(x, x + 10):\n        for j in range(y, y + 10):\n            canvas[i][j] = 1\nresult = sum(sum(row) for row in canvas)\nprint(result)",
        "detail": "Baekjoon.2563",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Baekjoon.2563",
        "description": "Baekjoon.2563",
        "peekOfCode": "n = int(input())\nfor _ in range(n):\n    x, y = map(int, input().split())\n    for i in range(x, x + 10):\n        for j in range(y, y + 10):\n            canvas[i][j] = 1\nresult = sum(sum(row) for row in canvas)\nprint(result)",
        "detail": "Baekjoon.2563",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Baekjoon.2563",
        "description": "Baekjoon.2563",
        "peekOfCode": "result = sum(sum(row) for row in canvas)\nprint(result)",
        "detail": "Baekjoon.2563",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "Baekjoon.2566",
        "description": "Baekjoon.2566",
        "peekOfCode": "q = []\nfor i in range(9):\n    row = list(map(int, input().split()))\n    max_val = max(row)\n    max_idx = row.index(max_val)\n    if len(q) < 1:\n        heapq.heappush(q, (max_val, max_idx, i))\n    else:\n        prev_max, prev_col, prev_row = heapq.heappop(q)\n        if prev_max < max_val:",
        "detail": "Baekjoon.2566",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Baekjoon.2738",
        "description": "Baekjoon.2738",
        "peekOfCode": "a = []\nb = []\nfor i in range(n):\n    row = list(map(int, input().split()))\n    a.append(row)\nfor i in range(n):\n    row = list(map(int, input().split()))\n    b.append(row)\nfor i in range(n):\n    for j in range(m):",
        "detail": "Baekjoon.2738",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Baekjoon.2738",
        "description": "Baekjoon.2738",
        "peekOfCode": "b = []\nfor i in range(n):\n    row = list(map(int, input().split()))\n    a.append(row)\nfor i in range(n):\n    row = list(map(int, input().split()))\n    b.append(row)\nfor i in range(n):\n    for j in range(m):\n        print(a[i][j] + b[i][j], end=\" \")",
        "detail": "Baekjoon.2738",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Baekjoon.27592",
        "description": "Baekjoon.27592",
        "peekOfCode": "a = list(map(int, sys.stdin.readline().split()))\nb = list(map(int, sys.stdin.readline().split()))\nanswer = 0\nweight = 0\nfor i in range(n):\n    weight += b[i]\n    if weight < a[i]:\n        answer = -1\n        break\nif answer != -1:",
        "detail": "Baekjoon.27592",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Baekjoon.27592",
        "description": "Baekjoon.27592",
        "peekOfCode": "b = list(map(int, sys.stdin.readline().split()))\nanswer = 0\nweight = 0\nfor i in range(n):\n    weight += b[i]\n    if weight < a[i]:\n        answer = -1\n        break\nif answer != -1:\n    answer = (weight - a[n - 1]) // x",
        "detail": "Baekjoon.27592",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Baekjoon.27592",
        "description": "Baekjoon.27592",
        "peekOfCode": "answer = 0\nweight = 0\nfor i in range(n):\n    weight += b[i]\n    if weight < a[i]:\n        answer = -1\n        break\nif answer != -1:\n    answer = (weight - a[n - 1]) // x\nprint(answer)",
        "detail": "Baekjoon.27592",
        "documentation": {}
    },
    {
        "label": "weight",
        "kind": 5,
        "importPath": "Baekjoon.27592",
        "description": "Baekjoon.27592",
        "peekOfCode": "weight = 0\nfor i in range(n):\n    weight += b[i]\n    if weight < a[i]:\n        answer = -1\n        break\nif answer != -1:\n    answer = (weight - a[n - 1]) // x\nprint(answer)",
        "detail": "Baekjoon.27592",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Baekjoon.27866",
        "description": "Baekjoon.27866",
        "peekOfCode": "s = input()\ni = int(input())\nprint(s[i-1])",
        "detail": "Baekjoon.27866",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "Baekjoon.27866",
        "description": "Baekjoon.27866",
        "peekOfCode": "i = int(input())\nprint(s[i-1])",
        "detail": "Baekjoon.27866",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Baekjoon.2903",
        "description": "Baekjoon.2903",
        "peekOfCode": "n = int(input())\nprint((2**n + 1) ** 2)",
        "detail": "Baekjoon.2903",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Baekjoon.3003",
        "description": "Baekjoon.3003",
        "peekOfCode": "data = list(map(int, input().split()))\nchess = [1, 1, 2, 2, 2, 8]\nfor i in range(len(data)):\n    print(chess[i] - data[i], end=\" \")",
        "detail": "Baekjoon.3003",
        "documentation": {}
    },
    {
        "label": "chess",
        "kind": 5,
        "importPath": "Baekjoon.3003",
        "description": "Baekjoon.3003",
        "peekOfCode": "chess = [1, 1, 2, 2, 2, 8]\nfor i in range(len(data)):\n    print(chess[i] - data[i], end=\" \")",
        "detail": "Baekjoon.3003",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Baekjoon.32172",
        "description": "Baekjoon.32172",
        "peekOfCode": "n = int(input())\narray = []\narray.append(0)\nfor i in range(1, n + 1):\n    a = array[i - 1] - i\n    if a < 0 or a in array:\n        array.append(array[i - 1] + i)\n    else:\n        array.append(a)\nprint(array[n])",
        "detail": "Baekjoon.32172",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Baekjoon.32172",
        "description": "Baekjoon.32172",
        "peekOfCode": "array = []\narray.append(0)\nfor i in range(1, n + 1):\n    a = array[i - 1] - i\n    if a < 0 or a in array:\n        array.append(array[i - 1] + i)\n    else:\n        array.append(a)\nprint(array[n])",
        "detail": "Baekjoon.32172",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Baekjoon.32384",
        "description": "Baekjoon.32384",
        "peekOfCode": "n = int(input())\nfor _ in range(n):\n    print(\"LoveisKoreaUniversity\", end=\" \")",
        "detail": "Baekjoon.32384",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Baekjoon.5052",
        "description": "Baekjoon.5052",
        "peekOfCode": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    phone_numbers = [sys.stdin.readline().rstrip() for _ in range(n)]\n    phone_numbers.sort()\n    flag = False\n    for i in range(1, n):\n        if phone_numbers[i].startswith(phone_numbers[0]):\n            flag = True\n            break",
        "detail": "Baekjoon.5052",
        "documentation": {}
    },
    {
        "label": "student",
        "kind": 5,
        "importPath": "Baekjoon.5597",
        "description": "Baekjoon.5597",
        "peekOfCode": "student = []\nfor _ in range(28):\n    student.append(int(input()))\nfor i in range(1, 31):\n    if not i in student:\n        print(i)",
        "detail": "Baekjoon.5597",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Baekjoon.6603",
        "description": "Baekjoon.6603",
        "peekOfCode": "data = []\nwhile True:\n    var = list(map(int, input().split()))\n    if var[0] == 0:\n        break\n    k = var[0]\n    s = var[1:]\n    for candidate in list(combinations(s, 6)):\n        for c in candidate:\n            print(c, end=\" \")",
        "detail": "Baekjoon.6603",
        "documentation": {}
    },
    {
        "label": "possible",
        "kind": 2,
        "importPath": "Baekjoon.9663",
        "description": "Baekjoon.9663",
        "peekOfCode": "def possible(chess, x, y):\n    pass",
        "detail": "Baekjoon.9663",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Baekjoon.9663",
        "description": "Baekjoon.9663",
        "peekOfCode": "n = int(input())\nchess = [[0] * n for _ in range(n)]\ndx = [-1, 0, 1, 0, -1, 1, -1, 1]\ndy = [0, -1, 0, 1, -1, 1, 1, -1]\ndef possible(chess, x, y):\n    pass",
        "detail": "Baekjoon.9663",
        "documentation": {}
    },
    {
        "label": "chess",
        "kind": 5,
        "importPath": "Baekjoon.9663",
        "description": "Baekjoon.9663",
        "peekOfCode": "chess = [[0] * n for _ in range(n)]\ndx = [-1, 0, 1, 0, -1, 1, -1, 1]\ndy = [0, -1, 0, 1, -1, 1, 1, -1]\ndef possible(chess, x, y):\n    pass",
        "detail": "Baekjoon.9663",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Baekjoon.9663",
        "description": "Baekjoon.9663",
        "peekOfCode": "dx = [-1, 0, 1, 0, -1, 1, -1, 1]\ndy = [0, -1, 0, 1, -1, 1, 1, -1]\ndef possible(chess, x, y):\n    pass",
        "detail": "Baekjoon.9663",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Baekjoon.9663",
        "description": "Baekjoon.9663",
        "peekOfCode": "dy = [0, -1, 0, 1, -1, 1, 1, -1]\ndef possible(chess, x, y):\n    pass",
        "detail": "Baekjoon.9663",
        "documentation": {}
    },
    {
        "label": "recurrent",
        "kind": 2,
        "importPath": "Baekjoon.9882",
        "description": "Baekjoon.9882",
        "peekOfCode": "def recurrent(sum_val, idx, count, team, min_skill, max_skill):\n    global answer\n    if team == 4:\n        answer = min(answer, max_skill - min_skill)\n        return\n    if count == 3:\n        new_min = min(sum_val, min_skill)\n        new_max = max(sum_val, max_skill)\n        recurrent(0, 0, 0, team + 1, new_min, new_max)\n        return",
        "detail": "Baekjoon.9882",
        "documentation": {}
    },
    {
        "label": "cows",
        "kind": 5,
        "importPath": "Baekjoon.9882",
        "description": "Baekjoon.9882",
        "peekOfCode": "cows = []\nfor _ in range(12):\n    cows.append(int(input()))\ncows.sort()\nanswer = float(\"inf\")\nvisited = [False] * 12\ndef recurrent(sum_val, idx, count, team, min_skill, max_skill):\n    global answer\n    if team == 4:\n        answer = min(answer, max_skill - min_skill)",
        "detail": "Baekjoon.9882",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Baekjoon.9882",
        "description": "Baekjoon.9882",
        "peekOfCode": "answer = float(\"inf\")\nvisited = [False] * 12\ndef recurrent(sum_val, idx, count, team, min_skill, max_skill):\n    global answer\n    if team == 4:\n        answer = min(answer, max_skill - min_skill)\n        return\n    if count == 3:\n        new_min = min(sum_val, min_skill)\n        new_max = max(sum_val, max_skill)",
        "detail": "Baekjoon.9882",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "Baekjoon.9882",
        "description": "Baekjoon.9882",
        "peekOfCode": "visited = [False] * 12\ndef recurrent(sum_val, idx, count, team, min_skill, max_skill):\n    global answer\n    if team == 4:\n        answer = min(answer, max_skill - min_skill)\n        return\n    if count == 3:\n        new_min = min(sum_val, min_skill)\n        new_max = max(sum_val, max_skill)\n        recurrent(0, 0, 0, team + 1, new_min, new_max)",
        "detail": "Baekjoon.9882",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 03. 그리디.01-1",
        "description": "Coding_test.Chapter 03. 그리디.01-1",
        "peekOfCode": "n = 1260\ncount = 0\nwhile n > 0:\n    if n >= 500:\n        count += 1\n        n -= 500\n    elif n >= 100:\n        count += 1\n        n -= 100\n    elif n >= 50:",
        "detail": "Coding_test.Chapter 03. 그리디.01-1",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 03. 그리디.01-1",
        "description": "Coding_test.Chapter 03. 그리디.01-1",
        "peekOfCode": "count = 0\nwhile n > 0:\n    if n >= 500:\n        count += 1\n        n -= 500\n    elif n >= 100:\n        count += 1\n        n -= 100\n    elif n >= 50:\n        count += 1",
        "detail": "Coding_test.Chapter 03. 그리디.01-1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 03. 그리디.01-answer",
        "description": "Coding_test.Chapter 03. 그리디.01-answer",
        "peekOfCode": "n = 1260\ncount = 0\ncoin_types = [500,100,50,10]\nfor coin in coin_types:\n    count += n // coin\n    n %= coin\nprint(count)",
        "detail": "Coding_test.Chapter 03. 그리디.01-answer",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 03. 그리디.01-answer",
        "description": "Coding_test.Chapter 03. 그리디.01-answer",
        "peekOfCode": "count = 0\ncoin_types = [500,100,50,10]\nfor coin in coin_types:\n    count += n // coin\n    n %= coin\nprint(count)",
        "detail": "Coding_test.Chapter 03. 그리디.01-answer",
        "documentation": {}
    },
    {
        "label": "coin_types",
        "kind": 5,
        "importPath": "Coding_test.Chapter 03. 그리디.01-answer",
        "description": "Coding_test.Chapter 03. 그리디.01-answer",
        "peekOfCode": "coin_types = [500,100,50,10]\nfor coin in coin_types:\n    count += n // coin\n    n %= coin\nprint(count)",
        "detail": "Coding_test.Chapter 03. 그리디.01-answer",
        "documentation": {}
    },
    {
        "label": "n,m,k",
        "kind": 5,
        "importPath": "Coding_test.Chapter 03. 그리디.02-answer",
        "description": "Coding_test.Chapter 03. 그리디.02-answer",
        "peekOfCode": "n,m,k = map(int, input().split())\ndata = list(map(int, input().split()))\ndata.sort()\nfirst = data[-1]\nsecond = data[-2]\ncount = m // (k+1) * k + m % (k+1)\nresult = count * first + (m - count) * second\nprint(result)",
        "detail": "Coding_test.Chapter 03. 그리디.02-answer",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 03. 그리디.02-answer",
        "description": "Coding_test.Chapter 03. 그리디.02-answer",
        "peekOfCode": "data = list(map(int, input().split()))\ndata.sort()\nfirst = data[-1]\nsecond = data[-2]\ncount = m // (k+1) * k + m % (k+1)\nresult = count * first + (m - count) * second\nprint(result)",
        "detail": "Coding_test.Chapter 03. 그리디.02-answer",
        "documentation": {}
    },
    {
        "label": "first",
        "kind": 5,
        "importPath": "Coding_test.Chapter 03. 그리디.02-answer",
        "description": "Coding_test.Chapter 03. 그리디.02-answer",
        "peekOfCode": "first = data[-1]\nsecond = data[-2]\ncount = m // (k+1) * k + m % (k+1)\nresult = count * first + (m - count) * second\nprint(result)",
        "detail": "Coding_test.Chapter 03. 그리디.02-answer",
        "documentation": {}
    },
    {
        "label": "second",
        "kind": 5,
        "importPath": "Coding_test.Chapter 03. 그리디.02-answer",
        "description": "Coding_test.Chapter 03. 그리디.02-answer",
        "peekOfCode": "second = data[-2]\ncount = m // (k+1) * k + m % (k+1)\nresult = count * first + (m - count) * second\nprint(result)",
        "detail": "Coding_test.Chapter 03. 그리디.02-answer",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 03. 그리디.02-answer",
        "description": "Coding_test.Chapter 03. 그리디.02-answer",
        "peekOfCode": "count = m // (k+1) * k + m % (k+1)\nresult = count * first + (m - count) * second\nprint(result)",
        "detail": "Coding_test.Chapter 03. 그리디.02-answer",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 03. 그리디.02-answer",
        "description": "Coding_test.Chapter 03. 그리디.02-answer",
        "peekOfCode": "result = count * first + (m - count) * second\nprint(result)",
        "detail": "Coding_test.Chapter 03. 그리디.02-answer",
        "documentation": {}
    },
    {
        "label": "cards",
        "kind": 5,
        "importPath": "Coding_test.Chapter 03. 그리디.03-1",
        "description": "Coding_test.Chapter 03. 그리디.03-1",
        "peekOfCode": "cards = []\nfor _ in range(n):\n    data = list(map(int, input().split()))\n    cards.append(min(data))\nprint(max(cards))",
        "detail": "Coding_test.Chapter 03. 그리디.03-1",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 03. 그리디.04-1",
        "description": "Coding_test.Chapter 03. 그리디.04-1",
        "peekOfCode": "count = int(math.log(n)/math.log(k))\nresult = count + (n - k **count)\nprint(result)",
        "detail": "Coding_test.Chapter 03. 그리디.04-1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 03. 그리디.04-1",
        "description": "Coding_test.Chapter 03. 그리디.04-1",
        "peekOfCode": "result = count + (n - k **count)\nprint(result)",
        "detail": "Coding_test.Chapter 03. 그리디.04-1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.01-1-1",
        "description": "Coding_test.Chapter 04. 구현.01-1-1",
        "peekOfCode": "n = int(input())\ndirections = list(input().split())\nx,y = 1,1\nfor direction in directions:\n    if direction == 'L' and x > 1:\n        x -= 1\n    elif direction == 'R' and x <= n:\n        x += 1\n    elif direction == 'U' and y > 1:\n        y -= 1",
        "detail": "Coding_test.Chapter 04. 구현.01-1-1",
        "documentation": {}
    },
    {
        "label": "directions",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.01-1-1",
        "description": "Coding_test.Chapter 04. 구현.01-1-1",
        "peekOfCode": "directions = list(input().split())\nx,y = 1,1\nfor direction in directions:\n    if direction == 'L' and x > 1:\n        x -= 1\n    elif direction == 'R' and x <= n:\n        x += 1\n    elif direction == 'U' and y > 1:\n        y -= 1\n    elif direction == 'D' and y <= n:",
        "detail": "Coding_test.Chapter 04. 구현.01-1-1",
        "documentation": {}
    },
    {
        "label": "x,y",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.01-1-1",
        "description": "Coding_test.Chapter 04. 구현.01-1-1",
        "peekOfCode": "x,y = 1,1\nfor direction in directions:\n    if direction == 'L' and x > 1:\n        x -= 1\n    elif direction == 'R' and x <= n:\n        x += 1\n    elif direction == 'U' and y > 1:\n        y -= 1\n    elif direction == 'D' and y <= n:\n        y += 1",
        "detail": "Coding_test.Chapter 04. 구현.01-1-1",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.01-2-1",
        "description": "Coding_test.Chapter 04. 구현.01-2-1",
        "peekOfCode": "h = int(input())\ncount = 0\nfor i in range(h+1):\n    for j in range(60):\n        for k in range(60):\n            if '3' in str(i)+str(j)+str(k):\n                count += 1 \nprint(count)",
        "detail": "Coding_test.Chapter 04. 구현.01-2-1",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.01-2-1",
        "description": "Coding_test.Chapter 04. 구현.01-2-1",
        "peekOfCode": "count = 0\nfor i in range(h+1):\n    for j in range(60):\n        for k in range(60):\n            if '3' in str(i)+str(j)+str(k):\n                count += 1 \nprint(count)",
        "detail": "Coding_test.Chapter 04. 구현.01-2-1",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.02-answer",
        "description": "Coding_test.Chapter 04. 구현.02-answer",
        "peekOfCode": "start = input()\nrow = int(start[1])\ncol = int(ord(start[0])) - int(ord('a')) + 1\nsteps = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\ncount = 0\nfor step in steps:\n    next_row = row + step[0]\n    next_col = col + step[1]\n    if 1<=next_row<=8 and 1<=next_col<=8:\n        count += 1",
        "detail": "Coding_test.Chapter 04. 구현.02-answer",
        "documentation": {}
    },
    {
        "label": "row",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.02-answer",
        "description": "Coding_test.Chapter 04. 구현.02-answer",
        "peekOfCode": "row = int(start[1])\ncol = int(ord(start[0])) - int(ord('a')) + 1\nsteps = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\ncount = 0\nfor step in steps:\n    next_row = row + step[0]\n    next_col = col + step[1]\n    if 1<=next_row<=8 and 1<=next_col<=8:\n        count += 1\nprint(count)",
        "detail": "Coding_test.Chapter 04. 구현.02-answer",
        "documentation": {}
    },
    {
        "label": "col",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.02-answer",
        "description": "Coding_test.Chapter 04. 구현.02-answer",
        "peekOfCode": "col = int(ord(start[0])) - int(ord('a')) + 1\nsteps = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\ncount = 0\nfor step in steps:\n    next_row = row + step[0]\n    next_col = col + step[1]\n    if 1<=next_row<=8 and 1<=next_col<=8:\n        count += 1\nprint(count)",
        "detail": "Coding_test.Chapter 04. 구현.02-answer",
        "documentation": {}
    },
    {
        "label": "steps",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.02-answer",
        "description": "Coding_test.Chapter 04. 구현.02-answer",
        "peekOfCode": "steps = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\ncount = 0\nfor step in steps:\n    next_row = row + step[0]\n    next_col = col + step[1]\n    if 1<=next_row<=8 and 1<=next_col<=8:\n        count += 1\nprint(count)",
        "detail": "Coding_test.Chapter 04. 구현.02-answer",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.02-answer",
        "description": "Coding_test.Chapter 04. 구현.02-answer",
        "peekOfCode": "count = 0\nfor step in steps:\n    next_row = row + step[0]\n    next_col = col + step[1]\n    if 1<=next_row<=8 and 1<=next_col<=8:\n        count += 1\nprint(count)",
        "detail": "Coding_test.Chapter 04. 구현.02-answer",
        "documentation": {}
    },
    {
        "label": "turn_left",
        "kind": 2,
        "importPath": "Coding_test.Chapter 04. 구현.03-answer",
        "description": "Coding_test.Chapter 04. 구현.03-answer",
        "peekOfCode": "def turn_left():\n    global direction\n    direction -= 1\n    if direction == -1:\n        direction = 3\ncount = 1\nturn_time = 0\nwhile True:\n    turn_left()\n    nx = x + dx[direction]",
        "detail": "Coding_test.Chapter 04. 구현.03-answer",
        "documentation": {}
    },
    {
        "label": "n,m",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.03-answer",
        "description": "Coding_test.Chapter 04. 구현.03-answer",
        "peekOfCode": "n,m = map(int, input().split())\nx,y,direction = map(int, input().split())\nd = [[0] * m for _ in range(n)] # visited?\nd[x][y] = 1\narray = []\nfor _ in range(n):\n    array.append(list(map(int, input().split())))\ndx = [-1, 0, 1, 0]\ndy = [0, -1, 0, 1]\ndef turn_left():",
        "detail": "Coding_test.Chapter 04. 구현.03-answer",
        "documentation": {}
    },
    {
        "label": "x,y,direction",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.03-answer",
        "description": "Coding_test.Chapter 04. 구현.03-answer",
        "peekOfCode": "x,y,direction = map(int, input().split())\nd = [[0] * m for _ in range(n)] # visited?\nd[x][y] = 1\narray = []\nfor _ in range(n):\n    array.append(list(map(int, input().split())))\ndx = [-1, 0, 1, 0]\ndy = [0, -1, 0, 1]\ndef turn_left():\n    global direction",
        "detail": "Coding_test.Chapter 04. 구현.03-answer",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.03-answer",
        "description": "Coding_test.Chapter 04. 구현.03-answer",
        "peekOfCode": "d = [[0] * m for _ in range(n)] # visited?\nd[x][y] = 1\narray = []\nfor _ in range(n):\n    array.append(list(map(int, input().split())))\ndx = [-1, 0, 1, 0]\ndy = [0, -1, 0, 1]\ndef turn_left():\n    global direction\n    direction -= 1",
        "detail": "Coding_test.Chapter 04. 구현.03-answer",
        "documentation": {}
    },
    {
        "label": "d[x][y]",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.03-answer",
        "description": "Coding_test.Chapter 04. 구현.03-answer",
        "peekOfCode": "d[x][y] = 1\narray = []\nfor _ in range(n):\n    array.append(list(map(int, input().split())))\ndx = [-1, 0, 1, 0]\ndy = [0, -1, 0, 1]\ndef turn_left():\n    global direction\n    direction -= 1\n    if direction == -1:",
        "detail": "Coding_test.Chapter 04. 구현.03-answer",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.03-answer",
        "description": "Coding_test.Chapter 04. 구현.03-answer",
        "peekOfCode": "array = []\nfor _ in range(n):\n    array.append(list(map(int, input().split())))\ndx = [-1, 0, 1, 0]\ndy = [0, -1, 0, 1]\ndef turn_left():\n    global direction\n    direction -= 1\n    if direction == -1:\n        direction = 3",
        "detail": "Coding_test.Chapter 04. 구현.03-answer",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.03-answer",
        "description": "Coding_test.Chapter 04. 구현.03-answer",
        "peekOfCode": "dx = [-1, 0, 1, 0]\ndy = [0, -1, 0, 1]\ndef turn_left():\n    global direction\n    direction -= 1\n    if direction == -1:\n        direction = 3\ncount = 1\nturn_time = 0\nwhile True:",
        "detail": "Coding_test.Chapter 04. 구현.03-answer",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.03-answer",
        "description": "Coding_test.Chapter 04. 구현.03-answer",
        "peekOfCode": "dy = [0, -1, 0, 1]\ndef turn_left():\n    global direction\n    direction -= 1\n    if direction == -1:\n        direction = 3\ncount = 1\nturn_time = 0\nwhile True:\n    turn_left()",
        "detail": "Coding_test.Chapter 04. 구현.03-answer",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.03-answer",
        "description": "Coding_test.Chapter 04. 구현.03-answer",
        "peekOfCode": "count = 1\nturn_time = 0\nwhile True:\n    turn_left()\n    nx = x + dx[direction]\n    ny = y + dy[direction]\n    if d[nx][ny] == 0 and array[nx][ny] == 0:\n        d[nx][ny] = 1\n        x = nx\n        y = ny",
        "detail": "Coding_test.Chapter 04. 구현.03-answer",
        "documentation": {}
    },
    {
        "label": "turn_time",
        "kind": 5,
        "importPath": "Coding_test.Chapter 04. 구현.03-answer",
        "description": "Coding_test.Chapter 04. 구현.03-answer",
        "peekOfCode": "turn_time = 0\nwhile True:\n    turn_left()\n    nx = x + dx[direction]\n    ny = y + dy[direction]\n    if d[nx][ny] == 0 and array[nx][ny] == 0:\n        d[nx][ny] = 1\n        x = nx\n        y = ny\n        count += 1",
        "detail": "Coding_test.Chapter 04. 구현.03-answer",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "Coding_test.Chapter 05. DFS-BFS.08-1",
        "description": "Coding_test.Chapter 05. DFS-BFS.08-1",
        "peekOfCode": "def dfs(graph, v, visited):\n    visited[v] = True\n    print(v, end=\" \")\n    for i in graph[v]:\n        if not visited[i]:\n            dfs(graph, i, visited)\ngraph = [[], [2, 3, 8], [1, 7], [1, 4, 5], [3, 5], [3, 4], [7], [2, 6, 8], [1, 7]]\nvisited = [False] * 9\ndfs(graph, 1, visited)",
        "detail": "Coding_test.Chapter 05. DFS-BFS.08-1",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Coding_test.Chapter 05. DFS-BFS.08-1",
        "description": "Coding_test.Chapter 05. DFS-BFS.08-1",
        "peekOfCode": "graph = [[], [2, 3, 8], [1, 7], [1, 4, 5], [3, 5], [3, 4], [7], [2, 6, 8], [1, 7]]\nvisited = [False] * 9\ndfs(graph, 1, visited)",
        "detail": "Coding_test.Chapter 05. DFS-BFS.08-1",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "Coding_test.Chapter 05. DFS-BFS.08-1",
        "description": "Coding_test.Chapter 05. DFS-BFS.08-1",
        "peekOfCode": "visited = [False] * 9\ndfs(graph, 1, visited)",
        "detail": "Coding_test.Chapter 05. DFS-BFS.08-1",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "Coding_test.Chapter 05. DFS-BFS.09-1",
        "description": "Coding_test.Chapter 05. DFS-BFS.09-1",
        "peekOfCode": "def bfs(graph, start, visited):\n    queue = deque([start])\n    visited[start] = True\n    while queue:\n        v = queue.popleft()\n        print(v, end=\" \")\n        for i in graph[v]:\n            if not visited[i]:\n                queue.append(i)\n                visited[i] = True",
        "detail": "Coding_test.Chapter 05. DFS-BFS.09-1",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Coding_test.Chapter 05. DFS-BFS.09-1",
        "description": "Coding_test.Chapter 05. DFS-BFS.09-1",
        "peekOfCode": "graph = [[], [2, 3, 8], [1, 7], [1, 4, 5], [3, 5], [3, 4], [7], [2, 6, 8], [1, 7]]\nvisited = [False] * 9\nbfs(graph, 1, visited)",
        "detail": "Coding_test.Chapter 05. DFS-BFS.09-1",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "Coding_test.Chapter 05. DFS-BFS.09-1",
        "description": "Coding_test.Chapter 05. DFS-BFS.09-1",
        "peekOfCode": "visited = [False] * 9\nbfs(graph, 1, visited)",
        "detail": "Coding_test.Chapter 05. DFS-BFS.09-1",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "Coding_test.Chapter 05. DFS-BFS.10-1",
        "description": "Coding_test.Chapter 05. DFS-BFS.10-1",
        "peekOfCode": "def dfs(x, y):\n    if x <= -1 or x >= n or y <= -1 or y >= m:\n        return False\n    if graph[x][y] == 0:\n        graph[x][y] = 1\n        dfs(x - 1, y)\n        dfs(x + 1, y)\n        dfs(x, y - 1)\n        dfs(x, y + 1)\n        return True",
        "detail": "Coding_test.Chapter 05. DFS-BFS.10-1",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Coding_test.Chapter 05. DFS-BFS.10-1",
        "description": "Coding_test.Chapter 05. DFS-BFS.10-1",
        "peekOfCode": "graph = []\nfor i in range(n):\n    graph.append(list(map(int, input().split())))\ndef dfs(x, y):\n    if x <= -1 or x >= n or y <= -1 or y >= m:\n        return False\n    if graph[x][y] == 0:\n        graph[x][y] = 1\n        dfs(x - 1, y)\n        dfs(x + 1, y)",
        "detail": "Coding_test.Chapter 05. DFS-BFS.10-1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 05. DFS-BFS.10-1",
        "description": "Coding_test.Chapter 05. DFS-BFS.10-1",
        "peekOfCode": "result = 0\nfor i in range(n):\n    for j in range(m):\n        if dfs(i, j) == True:\n            result += 1\nprint(result)",
        "detail": "Coding_test.Chapter 05. DFS-BFS.10-1",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "Coding_test.Chapter 05. DFS-BFS.11-1",
        "description": "Coding_test.Chapter 05. DFS-BFS.11-1",
        "peekOfCode": "def bfs(x, y):\n    queue = deque()\n    queue.append((x, y))\n    while queue:\n        x, y = queue.popleft()\n        for i in range(4):\n            nx = x + dx[i]\n            ny = y + dy[i]\n            if nx < 0 or ny < 0 or nx >= n or ny >= m:\n                continue",
        "detail": "Coding_test.Chapter 05. DFS-BFS.11-1",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Coding_test.Chapter 05. DFS-BFS.11-1",
        "description": "Coding_test.Chapter 05. DFS-BFS.11-1",
        "peekOfCode": "graph = []\nfor i in range(n):\n    graph.append(list(map(int, input().split())))\ndx = [-1, 1, 0, 0]\ndy = [0, 0, -1, 1]\ndef bfs(x, y):\n    queue = deque()\n    queue.append((x, y))\n    while queue:\n        x, y = queue.popleft()",
        "detail": "Coding_test.Chapter 05. DFS-BFS.11-1",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 05. DFS-BFS.11-1",
        "description": "Coding_test.Chapter 05. DFS-BFS.11-1",
        "peekOfCode": "dx = [-1, 1, 0, 0]\ndy = [0, 0, -1, 1]\ndef bfs(x, y):\n    queue = deque()\n    queue.append((x, y))\n    while queue:\n        x, y = queue.popleft()\n        for i in range(4):\n            nx = x + dx[i]\n            ny = y + dy[i]",
        "detail": "Coding_test.Chapter 05. DFS-BFS.11-1",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 05. DFS-BFS.11-1",
        "description": "Coding_test.Chapter 05. DFS-BFS.11-1",
        "peekOfCode": "dy = [0, 0, -1, 1]\ndef bfs(x, y):\n    queue = deque()\n    queue.append((x, y))\n    while queue:\n        x, y = queue.popleft()\n        for i in range(4):\n            nx = x + dx[i]\n            ny = y + dy[i]\n            if nx < 0 or ny < 0 or nx >= n or ny >= m:",
        "detail": "Coding_test.Chapter 05. DFS-BFS.11-1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 06. 정렬.02-1",
        "description": "Coding_test.Chapter 06. 정렬.02-1",
        "peekOfCode": "n = int(input())\narray = []\nfor _ in range(n):\n    array.append(int(input()))\narray.sort(reverse=True)\nfor i in array:\n    print(i, end=' ')",
        "detail": "Coding_test.Chapter 06. 정렬.02-1",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 06. 정렬.02-1",
        "description": "Coding_test.Chapter 06. 정렬.02-1",
        "peekOfCode": "array = []\nfor _ in range(n):\n    array.append(int(input()))\narray.sort(reverse=True)\nfor i in array:\n    print(i, end=' ')",
        "detail": "Coding_test.Chapter 06. 정렬.02-1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 06. 정렬.03-1",
        "description": "Coding_test.Chapter 06. 정렬.03-1",
        "peekOfCode": "n = int(input())\narray = []\nfor _ in range(n):\n    name, score = input().split()\n    array.append((name, int(score)))\narray = sorted(array, key=lambda x:x[1])\nfor i in range(n):\n    print(array[i][0], end=' ')",
        "detail": "Coding_test.Chapter 06. 정렬.03-1",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 06. 정렬.03-1",
        "description": "Coding_test.Chapter 06. 정렬.03-1",
        "peekOfCode": "array = []\nfor _ in range(n):\n    name, score = input().split()\n    array.append((name, int(score)))\narray = sorted(array, key=lambda x:x[1])\nfor i in range(n):\n    print(array[i][0], end=' ')",
        "detail": "Coding_test.Chapter 06. 정렬.03-1",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 06. 정렬.03-1",
        "description": "Coding_test.Chapter 06. 정렬.03-1",
        "peekOfCode": "array = sorted(array, key=lambda x:x[1])\nfor i in range(n):\n    print(array[i][0], end=' ')",
        "detail": "Coding_test.Chapter 06. 정렬.03-1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Coding_test.Chapter 06. 정렬.04-1",
        "description": "Coding_test.Chapter 06. 정렬.04-1",
        "peekOfCode": "a = list(map(int, input().split()))\nb = list(map(int, input().split()))\na.sort()\nb.sort(reverse=True)\nanswer = sum(b[:k])+sum(a[k:])\nprint(answer)",
        "detail": "Coding_test.Chapter 06. 정렬.04-1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Coding_test.Chapter 06. 정렬.04-1",
        "description": "Coding_test.Chapter 06. 정렬.04-1",
        "peekOfCode": "b = list(map(int, input().split()))\na.sort()\nb.sort(reverse=True)\nanswer = sum(b[:k])+sum(a[k:])\nprint(answer)",
        "detail": "Coding_test.Chapter 06. 정렬.04-1",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 06. 정렬.04-1",
        "description": "Coding_test.Chapter 06. 정렬.04-1",
        "peekOfCode": "answer = sum(b[:k])+sum(a[k:])\nprint(answer)",
        "detail": "Coding_test.Chapter 06. 정렬.04-1",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-1",
        "description": "Coding_test.Chapter 11. 그리디(完).01-1",
        "peekOfCode": "N = int(input())\nX = input()\nX = [int(n) for n in X.split(\" \")]\nX = sorted(X, reverse=True)\nanswer = 0\nidx = 0\nwhile idx < len(X):\n    answer += 1\n    idx += X[idx]\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-1",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-1",
        "description": "Coding_test.Chapter 11. 그리디(完).01-1",
        "peekOfCode": "X = input()\nX = [int(n) for n in X.split(\" \")]\nX = sorted(X, reverse=True)\nanswer = 0\nidx = 0\nwhile idx < len(X):\n    answer += 1\n    idx += X[idx]\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-1",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-1",
        "description": "Coding_test.Chapter 11. 그리디(完).01-1",
        "peekOfCode": "X = [int(n) for n in X.split(\" \")]\nX = sorted(X, reverse=True)\nanswer = 0\nidx = 0\nwhile idx < len(X):\n    answer += 1\n    idx += X[idx]\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-1",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-1",
        "description": "Coding_test.Chapter 11. 그리디(完).01-1",
        "peekOfCode": "X = sorted(X, reverse=True)\nanswer = 0\nidx = 0\nwhile idx < len(X):\n    answer += 1\n    idx += X[idx]\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-1",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-1",
        "description": "Coding_test.Chapter 11. 그리디(完).01-1",
        "peekOfCode": "answer = 0\nidx = 0\nwhile idx < len(X):\n    answer += 1\n    idx += X[idx]\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-1",
        "documentation": {}
    },
    {
        "label": "idx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-1",
        "description": "Coding_test.Chapter 11. 그리디(完).01-1",
        "peekOfCode": "idx = 0\nwhile idx < len(X):\n    answer += 1\n    idx += X[idx]\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-2",
        "description": "Coding_test.Chapter 11. 그리디(完).01-2",
        "peekOfCode": "n = int(input())\ndata = list(map(int, input().split()))\ndata.sort(reverse=True)\ncount = 0\nidx = 0\nwhile idx < n:\n    gongpodo = data[idx]\n    idx += gongpodo\n    count += 1\nprint(count)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-2",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-2",
        "description": "Coding_test.Chapter 11. 그리디(完).01-2",
        "peekOfCode": "data = list(map(int, input().split()))\ndata.sort(reverse=True)\ncount = 0\nidx = 0\nwhile idx < n:\n    gongpodo = data[idx]\n    idx += gongpodo\n    count += 1\nprint(count)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-2",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-2",
        "description": "Coding_test.Chapter 11. 그리디(完).01-2",
        "peekOfCode": "count = 0\nidx = 0\nwhile idx < n:\n    gongpodo = data[idx]\n    idx += gongpodo\n    count += 1\nprint(count)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-2",
        "documentation": {}
    },
    {
        "label": "idx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-2",
        "description": "Coding_test.Chapter 11. 그리디(完).01-2",
        "peekOfCode": "idx = 0\nwhile idx < n:\n    gongpodo = data[idx]\n    idx += gongpodo\n    count += 1\nprint(count)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-3-best",
        "description": "Coding_test.Chapter 11. 그리디(完).01-3-best",
        "peekOfCode": "n = int(input())\narray = list(map(int, input().split()))\narray.sort(reverse=True)\nidx = 0\ncount = 0\nwhile idx < n:\n    count += 1\n    idx += array[idx]\nprint(count)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-3-best",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-3-best",
        "description": "Coding_test.Chapter 11. 그리디(完).01-3-best",
        "peekOfCode": "array = list(map(int, input().split()))\narray.sort(reverse=True)\nidx = 0\ncount = 0\nwhile idx < n:\n    count += 1\n    idx += array[idx]\nprint(count)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-3-best",
        "documentation": {}
    },
    {
        "label": "idx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-3-best",
        "description": "Coding_test.Chapter 11. 그리디(完).01-3-best",
        "peekOfCode": "idx = 0\ncount = 0\nwhile idx < n:\n    count += 1\n    idx += array[idx]\nprint(count)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-3-best",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-3-best",
        "description": "Coding_test.Chapter 11. 그리디(完).01-3-best",
        "peekOfCode": "count = 0\nwhile idx < n:\n    count += 1\n    idx += array[idx]\nprint(count)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-3-best",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-4",
        "description": "Coding_test.Chapter 11. 그리디(完).01-4",
        "peekOfCode": "n = int(input())\ndata = list(map(int, input().split()))\ndata.sort(reverse=True)\ncount = 0\nidx = 0\nwhile idx < len(data):\n    idx += data[idx]\n    count += 1\nprint(count)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-4",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-4",
        "description": "Coding_test.Chapter 11. 그리디(完).01-4",
        "peekOfCode": "data = list(map(int, input().split()))\ndata.sort(reverse=True)\ncount = 0\nidx = 0\nwhile idx < len(data):\n    idx += data[idx]\n    count += 1\nprint(count)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-4",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-4",
        "description": "Coding_test.Chapter 11. 그리디(完).01-4",
        "peekOfCode": "count = 0\nidx = 0\nwhile idx < len(data):\n    idx += data[idx]\n    count += 1\nprint(count)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-4",
        "documentation": {}
    },
    {
        "label": "idx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-4",
        "description": "Coding_test.Chapter 11. 그리디(完).01-4",
        "peekOfCode": "idx = 0\nwhile idx < len(data):\n    idx += data[idx]\n    count += 1\nprint(count)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-4",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-5",
        "description": "Coding_test.Chapter 11. 그리디(完).01-5",
        "peekOfCode": "n = int(input())\ndata = list(map(int, input().split()))\ncount = sum(data) // n + 1 if sum(data) % n != 0 else sum(data) // n\nprint(count)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-5",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-5",
        "description": "Coding_test.Chapter 11. 그리디(完).01-5",
        "peekOfCode": "data = list(map(int, input().split()))\ncount = sum(data) // n + 1 if sum(data) % n != 0 else sum(data) // n\nprint(count)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-5",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).01-5",
        "description": "Coding_test.Chapter 11. 그리디(完).01-5",
        "peekOfCode": "count = sum(data) // n + 1 if sum(data) % n != 0 else sum(data) // n\nprint(count)",
        "detail": "Coding_test.Chapter 11. 그리디(完).01-5",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).02-1",
        "description": "Coding_test.Chapter 11. 그리디(完).02-1",
        "peekOfCode": "num = input()\nanswer = int(num[0])\nfor i in range(1, len(num)):\n    if answer + int(num[i]) > answer * int(num[i]):\n        answer += int(num[i])\n    else:\n        answer *= int(num[i])\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).02-1",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).02-1",
        "description": "Coding_test.Chapter 11. 그리디(完).02-1",
        "peekOfCode": "answer = int(num[0])\nfor i in range(1, len(num)):\n    if answer + int(num[i]) > answer * int(num[i]):\n        answer += int(num[i])\n    else:\n        answer *= int(num[i])\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).02-1",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).02-2",
        "description": "Coding_test.Chapter 11. 그리디(完).02-2",
        "peekOfCode": "s = input()\nresult = 0\nfor i in range(len(s)):\n    num = int(s[i])\n    if i == 0:\n        result = num\n    else:\n        if result <= 1 or num <= 1:  # 두 수 중 하나라도 0 or 1\n            result += num\n        else:",
        "detail": "Coding_test.Chapter 11. 그리디(完).02-2",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).02-2",
        "description": "Coding_test.Chapter 11. 그리디(完).02-2",
        "peekOfCode": "result = 0\nfor i in range(len(s)):\n    num = int(s[i])\n    if i == 0:\n        result = num\n    else:\n        if result <= 1 or num <= 1:  # 두 수 중 하나라도 0 or 1\n            result += num\n        else:\n            result *= num",
        "detail": "Coding_test.Chapter 11. 그리디(完).02-2",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).02-3-best",
        "description": "Coding_test.Chapter 11. 그리디(完).02-3-best",
        "peekOfCode": "s = input()\nresult = 0\nfor i in s:\n    i = int(i)\n    if result <= 1 or i <= 1:\n        result += i\n    else:\n        result *= i\nprint(result)",
        "detail": "Coding_test.Chapter 11. 그리디(完).02-3-best",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).02-3-best",
        "description": "Coding_test.Chapter 11. 그리디(完).02-3-best",
        "peekOfCode": "result = 0\nfor i in s:\n    i = int(i)\n    if result <= 1 or i <= 1:\n        result += i\n    else:\n        result *= i\nprint(result)",
        "detail": "Coding_test.Chapter 11. 그리디(完).02-3-best",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).02-4",
        "description": "Coding_test.Chapter 11. 그리디(完).02-4",
        "peekOfCode": "s = input()\nresult = 0\nfor num in s:\n    if int(num) <= 1 or result <= 1:\n        result += int(num)\n    else:\n        result *= int(num)\nprint(result)",
        "detail": "Coding_test.Chapter 11. 그리디(完).02-4",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).02-4",
        "description": "Coding_test.Chapter 11. 그리디(完).02-4",
        "peekOfCode": "result = 0\nfor num in s:\n    if int(num) <= 1 or result <= 1:\n        result += int(num)\n    else:\n        result *= int(num)\nprint(result)",
        "detail": "Coding_test.Chapter 11. 그리디(完).02-4",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).02-5",
        "description": "Coding_test.Chapter 11. 그리디(完).02-5",
        "peekOfCode": "s = input()\nanswer = 0\nfor i in s:\n    i = int(i)\n    if answer <= 1 or i <= 1:\n        answer += i\n    else:\n        answer *= i\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).02-5",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).02-5",
        "description": "Coding_test.Chapter 11. 그리디(完).02-5",
        "peekOfCode": "answer = 0\nfor i in s:\n    i = int(i)\n    if answer <= 1 or i <= 1:\n        answer += i\n    else:\n        answer *= i\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).02-5",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-1",
        "description": "Coding_test.Chapter 11. 그리디(完).03-1",
        "peekOfCode": "S = input()\nanswer = 0\nzero = [s for s in S.split(\"1\") if len(s) != 0]\nones = [s for s in S.split(\"0\") if len(s) != 0]\nswap = []\nif len(zero) > len(ones):\n    answer = len(ones)\nelse:\n    answer = len(zero)\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-1",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-1",
        "description": "Coding_test.Chapter 11. 그리디(完).03-1",
        "peekOfCode": "answer = 0\nzero = [s for s in S.split(\"1\") if len(s) != 0]\nones = [s for s in S.split(\"0\") if len(s) != 0]\nswap = []\nif len(zero) > len(ones):\n    answer = len(ones)\nelse:\n    answer = len(zero)\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-1",
        "documentation": {}
    },
    {
        "label": "zero",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-1",
        "description": "Coding_test.Chapter 11. 그리디(完).03-1",
        "peekOfCode": "zero = [s for s in S.split(\"1\") if len(s) != 0]\nones = [s for s in S.split(\"0\") if len(s) != 0]\nswap = []\nif len(zero) > len(ones):\n    answer = len(ones)\nelse:\n    answer = len(zero)\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-1",
        "documentation": {}
    },
    {
        "label": "ones",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-1",
        "description": "Coding_test.Chapter 11. 그리디(完).03-1",
        "peekOfCode": "ones = [s for s in S.split(\"0\") if len(s) != 0]\nswap = []\nif len(zero) > len(ones):\n    answer = len(ones)\nelse:\n    answer = len(zero)\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-1",
        "documentation": {}
    },
    {
        "label": "swap",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-1",
        "description": "Coding_test.Chapter 11. 그리디(完).03-1",
        "peekOfCode": "swap = []\nif len(zero) > len(ones):\n    answer = len(ones)\nelse:\n    answer = len(zero)\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-1",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-2",
        "description": "Coding_test.Chapter 11. 그리디(完).03-2",
        "peekOfCode": "S = input()\nzeros = len([s for s in S.split(\"0\") if len(s) != 0])\nones = len([s for s in S.split(\"1\") if len(s) != 0])\nprint(min(zeros, ones))",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-2",
        "documentation": {}
    },
    {
        "label": "zeros",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-2",
        "description": "Coding_test.Chapter 11. 그리디(完).03-2",
        "peekOfCode": "zeros = len([s for s in S.split(\"0\") if len(s) != 0])\nones = len([s for s in S.split(\"1\") if len(s) != 0])\nprint(min(zeros, ones))",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-2",
        "documentation": {}
    },
    {
        "label": "ones",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-2",
        "description": "Coding_test.Chapter 11. 그리디(完).03-2",
        "peekOfCode": "ones = len([s for s in S.split(\"1\") if len(s) != 0])\nprint(min(zeros, ones))",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-2",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-3-best",
        "description": "Coding_test.Chapter 11. 그리디(完).03-3-best",
        "peekOfCode": "s = input()\nzeros = [i for i in s.split(\"1\") if len(i)]\nones = [i for i in s.split(\"0\") if len(i)]\nprint(min(len(zeros), len(ones)))",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-3-best",
        "documentation": {}
    },
    {
        "label": "zeros",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-3-best",
        "description": "Coding_test.Chapter 11. 그리디(完).03-3-best",
        "peekOfCode": "zeros = [i for i in s.split(\"1\") if len(i)]\nones = [i for i in s.split(\"0\") if len(i)]\nprint(min(len(zeros), len(ones)))",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-3-best",
        "documentation": {}
    },
    {
        "label": "ones",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-3-best",
        "description": "Coding_test.Chapter 11. 그리디(完).03-3-best",
        "peekOfCode": "ones = [i for i in s.split(\"0\") if len(i)]\nprint(min(len(zeros), len(ones)))",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-3-best",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-4",
        "description": "Coding_test.Chapter 11. 그리디(完).03-4",
        "peekOfCode": "s = input()\nzeros = [i for i in s.split(\"1\") if len(i)]\nones = [i for i in s.split(\"0\") if len(i)]\nprint(min(len(zeros), len(ones)))",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-4",
        "documentation": {}
    },
    {
        "label": "zeros",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-4",
        "description": "Coding_test.Chapter 11. 그리디(完).03-4",
        "peekOfCode": "zeros = [i for i in s.split(\"1\") if len(i)]\nones = [i for i in s.split(\"0\") if len(i)]\nprint(min(len(zeros), len(ones)))",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-4",
        "documentation": {}
    },
    {
        "label": "ones",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-4",
        "description": "Coding_test.Chapter 11. 그리디(完).03-4",
        "peekOfCode": "ones = [i for i in s.split(\"0\") if len(i)]\nprint(min(len(zeros), len(ones)))",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-4",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-5",
        "description": "Coding_test.Chapter 11. 그리디(完).03-5",
        "peekOfCode": "s = input()\nzeros = [i for i in s.split(\"1\") if i != \"\"]\nones = [i for i in s.split(\"0\") if i != \"\"]\nanswer = min(len(zeros), len(ones))\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-5",
        "documentation": {}
    },
    {
        "label": "zeros",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-5",
        "description": "Coding_test.Chapter 11. 그리디(完).03-5",
        "peekOfCode": "zeros = [i for i in s.split(\"1\") if i != \"\"]\nones = [i for i in s.split(\"0\") if i != \"\"]\nanswer = min(len(zeros), len(ones))\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-5",
        "documentation": {}
    },
    {
        "label": "ones",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-5",
        "description": "Coding_test.Chapter 11. 그리디(完).03-5",
        "peekOfCode": "ones = [i for i in s.split(\"0\") if i != \"\"]\nanswer = min(len(zeros), len(ones))\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-5",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).03-5",
        "description": "Coding_test.Chapter 11. 그리디(完).03-5",
        "peekOfCode": "answer = min(len(zeros), len(ones))\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).03-5",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-1",
        "description": "Coding_test.Chapter 11. 그리디(完).04-1",
        "peekOfCode": "N = int(input())\ncoins = input()\ncoins = [int(n) for n in coins.split(\" \")]\ncomb = []\nlength = 1\nwhile length < N:\n    for i in range(N):\n        comb.append(sum(coins[i : i + length]))\n    length += 1\ncomb = list(set(sorted(comb)))",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-1",
        "documentation": {}
    },
    {
        "label": "coins",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-1",
        "description": "Coding_test.Chapter 11. 그리디(完).04-1",
        "peekOfCode": "coins = input()\ncoins = [int(n) for n in coins.split(\" \")]\ncomb = []\nlength = 1\nwhile length < N:\n    for i in range(N):\n        comb.append(sum(coins[i : i + length]))\n    length += 1\ncomb = list(set(sorted(comb)))\nnums = range(1, max(comb))",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-1",
        "documentation": {}
    },
    {
        "label": "coins",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-1",
        "description": "Coding_test.Chapter 11. 그리디(完).04-1",
        "peekOfCode": "coins = [int(n) for n in coins.split(\" \")]\ncomb = []\nlength = 1\nwhile length < N:\n    for i in range(N):\n        comb.append(sum(coins[i : i + length]))\n    length += 1\ncomb = list(set(sorted(comb)))\nnums = range(1, max(comb))\nfor n in nums:",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-1",
        "documentation": {}
    },
    {
        "label": "comb",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-1",
        "description": "Coding_test.Chapter 11. 그리디(完).04-1",
        "peekOfCode": "comb = []\nlength = 1\nwhile length < N:\n    for i in range(N):\n        comb.append(sum(coins[i : i + length]))\n    length += 1\ncomb = list(set(sorted(comb)))\nnums = range(1, max(comb))\nfor n in nums:\n    if not n in comb:",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-1",
        "documentation": {}
    },
    {
        "label": "length",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-1",
        "description": "Coding_test.Chapter 11. 그리디(完).04-1",
        "peekOfCode": "length = 1\nwhile length < N:\n    for i in range(N):\n        comb.append(sum(coins[i : i + length]))\n    length += 1\ncomb = list(set(sorted(comb)))\nnums = range(1, max(comb))\nfor n in nums:\n    if not n in comb:\n        answer = n",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-1",
        "documentation": {}
    },
    {
        "label": "comb",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-1",
        "description": "Coding_test.Chapter 11. 그리디(完).04-1",
        "peekOfCode": "comb = list(set(sorted(comb)))\nnums = range(1, max(comb))\nfor n in nums:\n    if not n in comb:\n        answer = n\n        break\nprint(n)",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-1",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-1",
        "description": "Coding_test.Chapter 11. 그리디(完).04-1",
        "peekOfCode": "nums = range(1, max(comb))\nfor n in nums:\n    if not n in comb:\n        answer = n\n        break\nprint(n)",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-2",
        "description": "Coding_test.Chapter 11. 그리디(完).04-2",
        "peekOfCode": "n = int(input())\ncoins = list(map(int, input().split()))\ncoins.sort()\nresult = 1\ncases = []\nfor num in range(1, n + 1):\n    comb = itertools.combinations(coins, num)\n    for c in comb:\n        total = sum(c)\n        cases.append(total)",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-2",
        "documentation": {}
    },
    {
        "label": "coins",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-2",
        "description": "Coding_test.Chapter 11. 그리디(完).04-2",
        "peekOfCode": "coins = list(map(int, input().split()))\ncoins.sort()\nresult = 1\ncases = []\nfor num in range(1, n + 1):\n    comb = itertools.combinations(coins, num)\n    for c in comb:\n        total = sum(c)\n        cases.append(total)\ncases = list(set(sorted(cases)))",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-2",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-2",
        "description": "Coding_test.Chapter 11. 그리디(完).04-2",
        "peekOfCode": "result = 1\ncases = []\nfor num in range(1, n + 1):\n    comb = itertools.combinations(coins, num)\n    for c in comb:\n        total = sum(c)\n        cases.append(total)\ncases = list(set(sorted(cases)))\nfor n in cases:\n    if n == result:",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-2",
        "documentation": {}
    },
    {
        "label": "cases",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-2",
        "description": "Coding_test.Chapter 11. 그리디(完).04-2",
        "peekOfCode": "cases = []\nfor num in range(1, n + 1):\n    comb = itertools.combinations(coins, num)\n    for c in comb:\n        total = sum(c)\n        cases.append(total)\ncases = list(set(sorted(cases)))\nfor n in cases:\n    if n == result:\n        result += 1",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-2",
        "documentation": {}
    },
    {
        "label": "cases",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-2",
        "description": "Coding_test.Chapter 11. 그리디(完).04-2",
        "peekOfCode": "cases = list(set(sorted(cases)))\nfor n in cases:\n    if n == result:\n        result += 1\n    else:\n        break\nprint(result)",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-3",
        "description": "Coding_test.Chapter 11. 그리디(完).04-3",
        "peekOfCode": "n = int(input())\ncoins = list(map(int, input().split()))\ncoins.sort()\ncandidates = []\nfor i in range(1, n + 1):\n    for j in list(combinations(coins, i)):\n        add = sum(list(j))\n        candidates.append(add)\nidx = 1\nresult = 0",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-3",
        "documentation": {}
    },
    {
        "label": "coins",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-3",
        "description": "Coding_test.Chapter 11. 그리디(完).04-3",
        "peekOfCode": "coins = list(map(int, input().split()))\ncoins.sort()\ncandidates = []\nfor i in range(1, n + 1):\n    for j in list(combinations(coins, i)):\n        add = sum(list(j))\n        candidates.append(add)\nidx = 1\nresult = 0\nfor i in list(set(candidates)):",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-3",
        "documentation": {}
    },
    {
        "label": "candidates",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-3",
        "description": "Coding_test.Chapter 11. 그리디(完).04-3",
        "peekOfCode": "candidates = []\nfor i in range(1, n + 1):\n    for j in list(combinations(coins, i)):\n        add = sum(list(j))\n        candidates.append(add)\nidx = 1\nresult = 0\nfor i in list(set(candidates)):\n    if i == idx:\n        idx += 1",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-3",
        "documentation": {}
    },
    {
        "label": "idx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-3",
        "description": "Coding_test.Chapter 11. 그리디(完).04-3",
        "peekOfCode": "idx = 1\nresult = 0\nfor i in list(set(candidates)):\n    if i == idx:\n        idx += 1\n    else:\n        result = idx\n        break\nprint(idx)",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-3",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-3",
        "description": "Coding_test.Chapter 11. 그리디(完).04-3",
        "peekOfCode": "result = 0\nfor i in list(set(candidates)):\n    if i == idx:\n        idx += 1\n    else:\n        result = idx\n        break\nprint(idx)",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-3",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-4",
        "description": "Coding_test.Chapter 11. 그리디(完).04-4",
        "peekOfCode": "n = int(input())\ncoins = list(map(int, input().split()))\ncoins.sort()\ncandidates = []\nfor i in range(1, n + 1):\n    for j in list(combinations(coins, i)):\n        candidates.append(sum(list(j)))\nidx = 1\nresult = 0\nfor i in list(set(candidates)):",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-4",
        "documentation": {}
    },
    {
        "label": "coins",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-4",
        "description": "Coding_test.Chapter 11. 그리디(完).04-4",
        "peekOfCode": "coins = list(map(int, input().split()))\ncoins.sort()\ncandidates = []\nfor i in range(1, n + 1):\n    for j in list(combinations(coins, i)):\n        candidates.append(sum(list(j)))\nidx = 1\nresult = 0\nfor i in list(set(candidates)):\n    if idx == i:",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-4",
        "documentation": {}
    },
    {
        "label": "candidates",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-4",
        "description": "Coding_test.Chapter 11. 그리디(完).04-4",
        "peekOfCode": "candidates = []\nfor i in range(1, n + 1):\n    for j in list(combinations(coins, i)):\n        candidates.append(sum(list(j)))\nidx = 1\nresult = 0\nfor i in list(set(candidates)):\n    if idx == i:\n        idx += 1\n    else:",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-4",
        "documentation": {}
    },
    {
        "label": "idx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-4",
        "description": "Coding_test.Chapter 11. 그리디(完).04-4",
        "peekOfCode": "idx = 1\nresult = 0\nfor i in list(set(candidates)):\n    if idx == i:\n        idx += 1\n    else:\n        result = idx\n        break\nprint(result)",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-4",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-4",
        "description": "Coding_test.Chapter 11. 그리디(完).04-4",
        "peekOfCode": "result = 0\nfor i in list(set(candidates)):\n    if idx == i:\n        idx += 1\n    else:\n        result = idx\n        break\nprint(result)",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-4",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-5-best",
        "description": "Coding_test.Chapter 11. 그리디(完).04-5-best",
        "peekOfCode": "n = int(input())\ncoins = list(map(int, input().split()))\ncandidates = set()\nfor i in range(n):\n    combs = list(combinations(coins, i + 1))\n    for comb in combs:\n        candidates.add(sum(comb))\nanswer = 1\nwhile True:\n    if answer not in candidates:",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-5-best",
        "documentation": {}
    },
    {
        "label": "coins",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-5-best",
        "description": "Coding_test.Chapter 11. 그리디(完).04-5-best",
        "peekOfCode": "coins = list(map(int, input().split()))\ncandidates = set()\nfor i in range(n):\n    combs = list(combinations(coins, i + 1))\n    for comb in combs:\n        candidates.add(sum(comb))\nanswer = 1\nwhile True:\n    if answer not in candidates:\n        break",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-5-best",
        "documentation": {}
    },
    {
        "label": "candidates",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-5-best",
        "description": "Coding_test.Chapter 11. 그리디(完).04-5-best",
        "peekOfCode": "candidates = set()\nfor i in range(n):\n    combs = list(combinations(coins, i + 1))\n    for comb in combs:\n        candidates.add(sum(comb))\nanswer = 1\nwhile True:\n    if answer not in candidates:\n        break\n    answer += 1",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-5-best",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).04-5-best",
        "description": "Coding_test.Chapter 11. 그리디(完).04-5-best",
        "peekOfCode": "answer = 1\nwhile True:\n    if answer not in candidates:\n        break\n    answer += 1\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).04-5-best",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).05-1",
        "description": "Coding_test.Chapter 11. 그리디(完).05-1",
        "peekOfCode": "N = int(N)\nM = int(M)\nballs = input()\nballs = [int(i) for i in balls.split()]\nanswer = N * (N - 1) // 2\nsame_case = 0\nfor i in range(len(balls)):\n    if balls.count(i) == 1:\n        balls[i] = 0\nanswer -= len(set(balls)) - 1",
        "detail": "Coding_test.Chapter 11. 그리디(完).05-1",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).05-1",
        "description": "Coding_test.Chapter 11. 그리디(完).05-1",
        "peekOfCode": "M = int(M)\nballs = input()\nballs = [int(i) for i in balls.split()]\nanswer = N * (N - 1) // 2\nsame_case = 0\nfor i in range(len(balls)):\n    if balls.count(i) == 1:\n        balls[i] = 0\nanswer -= len(set(balls)) - 1\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).05-1",
        "documentation": {}
    },
    {
        "label": "balls",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).05-1",
        "description": "Coding_test.Chapter 11. 그리디(完).05-1",
        "peekOfCode": "balls = input()\nballs = [int(i) for i in balls.split()]\nanswer = N * (N - 1) // 2\nsame_case = 0\nfor i in range(len(balls)):\n    if balls.count(i) == 1:\n        balls[i] = 0\nanswer -= len(set(balls)) - 1\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).05-1",
        "documentation": {}
    },
    {
        "label": "balls",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).05-1",
        "description": "Coding_test.Chapter 11. 그리디(完).05-1",
        "peekOfCode": "balls = [int(i) for i in balls.split()]\nanswer = N * (N - 1) // 2\nsame_case = 0\nfor i in range(len(balls)):\n    if balls.count(i) == 1:\n        balls[i] = 0\nanswer -= len(set(balls)) - 1\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).05-1",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).05-1",
        "description": "Coding_test.Chapter 11. 그리디(完).05-1",
        "peekOfCode": "answer = N * (N - 1) // 2\nsame_case = 0\nfor i in range(len(balls)):\n    if balls.count(i) == 1:\n        balls[i] = 0\nanswer -= len(set(balls)) - 1\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).05-1",
        "documentation": {}
    },
    {
        "label": "same_case",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).05-1",
        "description": "Coding_test.Chapter 11. 그리디(完).05-1",
        "peekOfCode": "same_case = 0\nfor i in range(len(balls)):\n    if balls.count(i) == 1:\n        balls[i] = 0\nanswer -= len(set(balls)) - 1\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).05-1",
        "documentation": {}
    },
    {
        "label": "balls",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).05-2-best",
        "description": "Coding_test.Chapter 11. 그리디(完).05-2-best",
        "peekOfCode": "balls = list(map(int, input().split()))\ncomb = list(itertools.combinations(balls, 2))\nsame_case = sum([1 if c[0] == c[1] else 0 for c in comb])\nprint(len(comb) - same_case)",
        "detail": "Coding_test.Chapter 11. 그리디(完).05-2-best",
        "documentation": {}
    },
    {
        "label": "comb",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).05-2-best",
        "description": "Coding_test.Chapter 11. 그리디(完).05-2-best",
        "peekOfCode": "comb = list(itertools.combinations(balls, 2))\nsame_case = sum([1 if c[0] == c[1] else 0 for c in comb])\nprint(len(comb) - same_case)",
        "detail": "Coding_test.Chapter 11. 그리디(完).05-2-best",
        "documentation": {}
    },
    {
        "label": "same_case",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).05-2-best",
        "description": "Coding_test.Chapter 11. 그리디(完).05-2-best",
        "peekOfCode": "same_case = sum([1 if c[0] == c[1] else 0 for c in comb])\nprint(len(comb) - same_case)",
        "detail": "Coding_test.Chapter 11. 그리디(完).05-2-best",
        "documentation": {}
    },
    {
        "label": "balls",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).05-3",
        "description": "Coding_test.Chapter 11. 그리디(完).05-3",
        "peekOfCode": "balls = list(map(int, input().split()))\ncount = 0\nfor candidate in list(combinations(balls, 2)):\n    if candidate[0] == candidate[1]:\n        count += 1\nprint(len(list(combinations(balls, 2))) - count)",
        "detail": "Coding_test.Chapter 11. 그리디(完).05-3",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).05-3",
        "description": "Coding_test.Chapter 11. 그리디(完).05-3",
        "peekOfCode": "count = 0\nfor candidate in list(combinations(balls, 2)):\n    if candidate[0] == candidate[1]:\n        count += 1\nprint(len(list(combinations(balls, 2))) - count)",
        "detail": "Coding_test.Chapter 11. 그리디(完).05-3",
        "documentation": {}
    },
    {
        "label": "balls",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).05-4",
        "description": "Coding_test.Chapter 11. 그리디(完).05-4",
        "peekOfCode": "balls = list(map(int, input().split()))\ncandidates = list(combinations(balls, 2))\ncount = 0\nfor candidate in candidates:\n    if candidate[0] == candidate[1]:\n        count += 1\nanswer = len(candidates) - count\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).05-4",
        "documentation": {}
    },
    {
        "label": "candidates",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).05-4",
        "description": "Coding_test.Chapter 11. 그리디(完).05-4",
        "peekOfCode": "candidates = list(combinations(balls, 2))\ncount = 0\nfor candidate in candidates:\n    if candidate[0] == candidate[1]:\n        count += 1\nanswer = len(candidates) - count\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).05-4",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).05-4",
        "description": "Coding_test.Chapter 11. 그리디(完).05-4",
        "peekOfCode": "count = 0\nfor candidate in candidates:\n    if candidate[0] == candidate[1]:\n        count += 1\nanswer = len(candidates) - count\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).05-4",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).05-4",
        "description": "Coding_test.Chapter 11. 그리디(完).05-4",
        "peekOfCode": "answer = len(candidates) - count\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).05-4",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).05-5",
        "description": "Coding_test.Chapter 11. 그리디(完).05-5",
        "peekOfCode": "data = list(map(int, input().split()))\nanswer = sum([1 if x != y else 0 for x, y in combinations(data, 2)])\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).05-5",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 11. 그리디(完).05-5",
        "description": "Coding_test.Chapter 11. 그리디(完).05-5",
        "peekOfCode": "answer = sum([1 if x != y else 0 for x, y in combinations(data, 2)])\nprint(answer)",
        "detail": "Coding_test.Chapter 11. 그리디(完).05-5",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 11. 그리디(完).06-1",
        "description": "Coding_test.Chapter 11. 그리디(完).06-1",
        "peekOfCode": "def solution(food_times, k):\n    if sum(food_times) <= k:\n        return -1\n    q = []\n    for i in range(len(food_times)):\n        heapq.heappush(q, (food_times[i], i + 1))\n    sum_value = 0\n    previous = 0\n    length = len(food_times)\n    while sum_value + (q[0][0] - previous) * length <= k:",
        "detail": "Coding_test.Chapter 11. 그리디(完).06-1",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 11. 그리디(完).06-2",
        "description": "Coding_test.Chapter 11. 그리디(完).06-2",
        "peekOfCode": "def solution(food_times, k):\n    if sum(food_times) <= k:\n        return -1\n    q = []\n    for i in range(len(food_times)):\n        heapq.heappush(q, (food_times[i], i + 1))\n    sum_value = 0\n    previous = 0\n    length = len(food_times)\n    while sum_value + (q[0][0] - previous) * length <= k:",
        "detail": "Coding_test.Chapter 11. 그리디(完).06-2",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 11. 그리디(完).06-3",
        "description": "Coding_test.Chapter 11. 그리디(完).06-3",
        "peekOfCode": "def solution(food_times, k):\n    if sum(food_times) <= k:\n        return -1\n    length = len(food_times)\n    q = []\n    for i in range(length):\n        heapq.heappush(q, (food_times[i], i + 1))\n    sum_value = 0\n    previous = 0\n    while sum_value + (q[0][0] - previous) * length <= k:",
        "detail": "Coding_test.Chapter 11. 그리디(完).06-3",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 11. 그리디(完).06-5",
        "description": "Coding_test.Chapter 11. 그리디(完).06-5",
        "peekOfCode": "def solution(food_times, k):\n    if sum(food_times) <= k:\n        return -1\n    length = len(food_times)\n    q = []\n    for i in range(length):\n        heapq.heappush(q, (food_times[i], i + 1))\n    sum_value = 0\n    previous = 0\n    while sum_value + (q[0][0] - previous) * length <= k:",
        "detail": "Coding_test.Chapter 11. 그리디(完).06-5",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-1",
        "description": "Coding_test.Chapter 12. 구현(完).07-1",
        "peekOfCode": "N = input()\nlength = len(N) // 2\na = sum([int(n) for n in N[:length]])\nb = sum([int(n) for n in N[length:]])\nif a == b:\n    print(\"LUCKY\")\nelse:\n    print(\"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-1",
        "documentation": {}
    },
    {
        "label": "length",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-1",
        "description": "Coding_test.Chapter 12. 구현(完).07-1",
        "peekOfCode": "length = len(N) // 2\na = sum([int(n) for n in N[:length]])\nb = sum([int(n) for n in N[length:]])\nif a == b:\n    print(\"LUCKY\")\nelse:\n    print(\"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-1",
        "description": "Coding_test.Chapter 12. 구현(完).07-1",
        "peekOfCode": "a = sum([int(n) for n in N[:length]])\nb = sum([int(n) for n in N[length:]])\nif a == b:\n    print(\"LUCKY\")\nelse:\n    print(\"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-1",
        "description": "Coding_test.Chapter 12. 구현(完).07-1",
        "peekOfCode": "b = sum([int(n) for n in N[length:]])\nif a == b:\n    print(\"LUCKY\")\nelse:\n    print(\"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-2",
        "description": "Coding_test.Chapter 12. 구현(完).07-2",
        "peekOfCode": "n = int(input())\ns = str(n)\na = sum(list(map(int, s[: len(s) // 2])))\nb = sum(list(map(int, s[len(s) // 2 :])))\nif a == b:\n    print(\"LUCKY\")\nelse:\n    print(\"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-2",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-2",
        "description": "Coding_test.Chapter 12. 구현(完).07-2",
        "peekOfCode": "s = str(n)\na = sum(list(map(int, s[: len(s) // 2])))\nb = sum(list(map(int, s[len(s) // 2 :])))\nif a == b:\n    print(\"LUCKY\")\nelse:\n    print(\"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-2",
        "description": "Coding_test.Chapter 12. 구현(完).07-2",
        "peekOfCode": "a = sum(list(map(int, s[: len(s) // 2])))\nb = sum(list(map(int, s[len(s) // 2 :])))\nif a == b:\n    print(\"LUCKY\")\nelse:\n    print(\"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-2",
        "description": "Coding_test.Chapter 12. 구현(完).07-2",
        "peekOfCode": "b = sum(list(map(int, s[len(s) // 2 :])))\nif a == b:\n    print(\"LUCKY\")\nelse:\n    print(\"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-3-best",
        "description": "Coding_test.Chapter 12. 구현(完).07-3-best",
        "peekOfCode": "n = input()\na = sum([int(i) for i in n[: len(n) // 2]])\nb = sum([int(i) for i in n[len(n) // 2 :]])\nif a == b:\n    print(\"LUCKY\")\nelse:\n    print(\"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-3-best",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-3-best",
        "description": "Coding_test.Chapter 12. 구현(完).07-3-best",
        "peekOfCode": "a = sum([int(i) for i in n[: len(n) // 2]])\nb = sum([int(i) for i in n[len(n) // 2 :]])\nif a == b:\n    print(\"LUCKY\")\nelse:\n    print(\"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-3-best",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-3-best",
        "description": "Coding_test.Chapter 12. 구현(完).07-3-best",
        "peekOfCode": "b = sum([int(i) for i in n[len(n) // 2 :]])\nif a == b:\n    print(\"LUCKY\")\nelse:\n    print(\"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-3-best",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-4",
        "description": "Coding_test.Chapter 12. 구현(完).07-4",
        "peekOfCode": "n = input()\nlength = len(n)\none = sum([int(num) for num in n[: length // 2]])\ntwo = sum([int(num) for num in n[length // 2 :]])\nif one == two:\n    print(\"LUCKY\")\nelse:\n    print(\"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-4",
        "documentation": {}
    },
    {
        "label": "length",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-4",
        "description": "Coding_test.Chapter 12. 구현(完).07-4",
        "peekOfCode": "length = len(n)\none = sum([int(num) for num in n[: length // 2]])\ntwo = sum([int(num) for num in n[length // 2 :]])\nif one == two:\n    print(\"LUCKY\")\nelse:\n    print(\"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-4",
        "documentation": {}
    },
    {
        "label": "one",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-4",
        "description": "Coding_test.Chapter 12. 구현(完).07-4",
        "peekOfCode": "one = sum([int(num) for num in n[: length // 2]])\ntwo = sum([int(num) for num in n[length // 2 :]])\nif one == two:\n    print(\"LUCKY\")\nelse:\n    print(\"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-4",
        "documentation": {}
    },
    {
        "label": "two",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-4",
        "description": "Coding_test.Chapter 12. 구현(完).07-4",
        "peekOfCode": "two = sum([int(num) for num in n[length // 2 :]])\nif one == two:\n    print(\"LUCKY\")\nelse:\n    print(\"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-4",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-5",
        "description": "Coding_test.Chapter 12. 구현(完).07-5",
        "peekOfCode": "n = input()\nfirst = sum(int(num) for num in n[: len(n) // 2])\nsecond = sum(int(num) for num in n[len(n) // 2 :])\nprint(\"LUCKY\" if first == second else \"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-5",
        "documentation": {}
    },
    {
        "label": "first",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-5",
        "description": "Coding_test.Chapter 12. 구현(完).07-5",
        "peekOfCode": "first = sum(int(num) for num in n[: len(n) // 2])\nsecond = sum(int(num) for num in n[len(n) // 2 :])\nprint(\"LUCKY\" if first == second else \"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-5",
        "documentation": {}
    },
    {
        "label": "second",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).07-5",
        "description": "Coding_test.Chapter 12. 구현(完).07-5",
        "peekOfCode": "second = sum(int(num) for num in n[len(n) // 2 :])\nprint(\"LUCKY\" if first == second else \"READY\")",
        "detail": "Coding_test.Chapter 12. 구현(完).07-5",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).08-1",
        "description": "Coding_test.Chapter 12. 구현(完).08-1",
        "peekOfCode": "N = input()\nalphabet = \"\".join(sorted([n for n in N if not n.isdigit()]))\nnum = sum([int(n) for n in N if n.isdigit()])\nresult = alphabet + str(num)\nprint(result)",
        "detail": "Coding_test.Chapter 12. 구현(完).08-1",
        "documentation": {}
    },
    {
        "label": "alphabet",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).08-1",
        "description": "Coding_test.Chapter 12. 구현(完).08-1",
        "peekOfCode": "alphabet = \"\".join(sorted([n for n in N if not n.isdigit()]))\nnum = sum([int(n) for n in N if n.isdigit()])\nresult = alphabet + str(num)\nprint(result)",
        "detail": "Coding_test.Chapter 12. 구현(完).08-1",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).08-1",
        "description": "Coding_test.Chapter 12. 구현(完).08-1",
        "peekOfCode": "num = sum([int(n) for n in N if n.isdigit()])\nresult = alphabet + str(num)\nprint(result)",
        "detail": "Coding_test.Chapter 12. 구현(完).08-1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).08-1",
        "description": "Coding_test.Chapter 12. 구현(完).08-1",
        "peekOfCode": "result = alphabet + str(num)\nprint(result)",
        "detail": "Coding_test.Chapter 12. 구현(完).08-1",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).08-2-best",
        "description": "Coding_test.Chapter 12. 구현(完).08-2-best",
        "peekOfCode": "s = list(input())\ns.sort()\nnum = sum([int(i) for i in s if i.isdigit()])\nstring = \"\".join([i for i in s if not i.isdigit()])\nprint(string + str(num))",
        "detail": "Coding_test.Chapter 12. 구현(完).08-2-best",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).08-2-best",
        "description": "Coding_test.Chapter 12. 구현(完).08-2-best",
        "peekOfCode": "num = sum([int(i) for i in s if i.isdigit()])\nstring = \"\".join([i for i in s if not i.isdigit()])\nprint(string + str(num))",
        "detail": "Coding_test.Chapter 12. 구현(完).08-2-best",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).08-2-best",
        "description": "Coding_test.Chapter 12. 구현(完).08-2-best",
        "peekOfCode": "string = \"\".join([i for i in s if not i.isdigit()])\nprint(string + str(num))",
        "detail": "Coding_test.Chapter 12. 구현(完).08-2-best",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).08-3",
        "description": "Coding_test.Chapter 12. 구현(完).08-3",
        "peekOfCode": "s = list(input())\ns.sort()\nstring = [i for i in s if not i.isdigit()]\ndigit = sum([int(i) for i in s if i.isdigit()])\nprint(\"\".join(string) + str(digit))",
        "detail": "Coding_test.Chapter 12. 구현(完).08-3",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).08-3",
        "description": "Coding_test.Chapter 12. 구현(完).08-3",
        "peekOfCode": "string = [i for i in s if not i.isdigit()]\ndigit = sum([int(i) for i in s if i.isdigit()])\nprint(\"\".join(string) + str(digit))",
        "detail": "Coding_test.Chapter 12. 구현(完).08-3",
        "documentation": {}
    },
    {
        "label": "digit",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).08-3",
        "description": "Coding_test.Chapter 12. 구현(完).08-3",
        "peekOfCode": "digit = sum([int(i) for i in s if i.isdigit()])\nprint(\"\".join(string) + str(digit))",
        "detail": "Coding_test.Chapter 12. 구현(完).08-3",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).08-4",
        "description": "Coding_test.Chapter 12. 구현(完).08-4",
        "peekOfCode": "s = input()\nstrings = \"\".join(sorted([i for i in s if i.isalpha()]))\nnums = sum([int(i) for i in s if i.isdigit()])\nprint(strings + str(nums))",
        "detail": "Coding_test.Chapter 12. 구현(完).08-4",
        "documentation": {}
    },
    {
        "label": "strings",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).08-4",
        "description": "Coding_test.Chapter 12. 구현(完).08-4",
        "peekOfCode": "strings = \"\".join(sorted([i for i in s if i.isalpha()]))\nnums = sum([int(i) for i in s if i.isdigit()])\nprint(strings + str(nums))",
        "detail": "Coding_test.Chapter 12. 구현(完).08-4",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).08-4",
        "description": "Coding_test.Chapter 12. 구현(完).08-4",
        "peekOfCode": "nums = sum([int(i) for i in s if i.isdigit()])\nprint(strings + str(nums))",
        "detail": "Coding_test.Chapter 12. 구현(完).08-4",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).08-5",
        "description": "Coding_test.Chapter 12. 구현(完).08-5",
        "peekOfCode": "s = input()\ns.sort()\nalpha = \"\".join([i for i in list(s) if i.isalpha()])\nnumbers = sum([int(i) for i in list(s) if i.isdigit()])\nprint(alpha + str(numbers))",
        "detail": "Coding_test.Chapter 12. 구현(完).08-5",
        "documentation": {}
    },
    {
        "label": "alpha",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).08-5",
        "description": "Coding_test.Chapter 12. 구현(完).08-5",
        "peekOfCode": "alpha = \"\".join([i for i in list(s) if i.isalpha()])\nnumbers = sum([int(i) for i in list(s) if i.isdigit()])\nprint(alpha + str(numbers))",
        "detail": "Coding_test.Chapter 12. 구현(完).08-5",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).08-5",
        "description": "Coding_test.Chapter 12. 구현(完).08-5",
        "peekOfCode": "numbers = sum([int(i) for i in list(s) if i.isdigit()])\nprint(alpha + str(numbers))",
        "detail": "Coding_test.Chapter 12. 구현(完).08-5",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).09-1",
        "description": "Coding_test.Chapter 12. 구현(完).09-1",
        "peekOfCode": "def solution(s):\n    answer = len(s)\n    for length in range(1, len(s)):\n        idx = 0\n        count = 0\n        prev = \"\"\n        new_s = \"\"\n        while idx < len(s) + length:\n            if len(prev) == 0:\n                count += 1",
        "detail": "Coding_test.Chapter 12. 구현(完).09-1",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).09-2",
        "description": "Coding_test.Chapter 12. 구현(完).09-2",
        "peekOfCode": "def solution(s):\n    answer = s\n    for length in range(1, len(s)):\n        idx = 0\n        count = 0\n        prev = \"\"\n        new_s = \"\"\n        while idx < len(s) + length:\n            if s[idx : idx + length] == prev or len(prev) == 0:\n                count += 1",
        "detail": "Coding_test.Chapter 12. 구현(完).09-2",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).09-3",
        "description": "Coding_test.Chapter 12. 구현(完).09-3",
        "peekOfCode": "def solution(s):\n    answer = len(s)\n    for length in range(1, len(s)):\n        new_string = \"\"\n        prev = \"\"\n        count = 1\n        i = 0\n        while i <= len(s) + length:\n            now = s[i : i + length]\n            if prev == now:",
        "detail": "Coding_test.Chapter 12. 구현(完).09-3",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).09-4",
        "description": "Coding_test.Chapter 12. 구현(完).09-4",
        "peekOfCode": "def solution(s):\n    answer = len(s)\n    for length in range(1, len(s)):\n        new_string = \"\"\n        prev = \"\"\n        i = 0\n        count = 1\n        while i <= len(s) - length:\n            now = s[i : i + length]\n            if prev == now:",
        "detail": "Coding_test.Chapter 12. 구현(完).09-4",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).09-5-best",
        "description": "Coding_test.Chapter 12. 구현(完).09-5-best",
        "peekOfCode": "s = input()\nanswer = len(s)\nfor length in range(1, len(s)):\n    new_string = \"\"\n    prev = \"\"\n    i = 0\n    count = 1\n    while i < len(s) + length:\n        now = s[i : i + length]\n        if prev == now:",
        "detail": "Coding_test.Chapter 12. 구현(完).09-5-best",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).09-5-best",
        "description": "Coding_test.Chapter 12. 구현(完).09-5-best",
        "peekOfCode": "answer = len(s)\nfor length in range(1, len(s)):\n    new_string = \"\"\n    prev = \"\"\n    i = 0\n    count = 1\n    while i < len(s) + length:\n        now = s[i : i + length]\n        if prev == now:\n            count += 1",
        "detail": "Coding_test.Chapter 12. 구현(完).09-5-best",
        "documentation": {}
    },
    {
        "label": "rotate_a_matrix_by_90_degree",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-1",
        "description": "Coding_test.Chapter 12. 구현(完).10-1",
        "peekOfCode": "def rotate_a_matrix_by_90_degree(a):\n    n = len(a)\n    m = len(a[0])\n    result = [[0] * n for _ in range(m)]\n    for i in range(n):\n        for j in range(m):\n            result[j][n - i - 1] = a[i][j]\n    return result\ndef check(new_lock):\n    lock_length = len(new_lock) // 3",
        "detail": "Coding_test.Chapter 12. 구현(完).10-1",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-1",
        "description": "Coding_test.Chapter 12. 구현(完).10-1",
        "peekOfCode": "def check(new_lock):\n    lock_length = len(new_lock) // 3\n    for i in range(lock_length, lock_length * 2):\n        for j in range(lock_length, lock_length * 2):\n            if new_lock[i][j] != 1:\n                return False\n    return True\ndef solution(key, lock):\n    n = len(lock)\n    m = len(key)",
        "detail": "Coding_test.Chapter 12. 구현(完).10-1",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-1",
        "description": "Coding_test.Chapter 12. 구현(完).10-1",
        "peekOfCode": "def solution(key, lock):\n    n = len(lock)\n    m = len(key)\n    new_lock = [[0] * (n * 3) for _ in range(n * 3)]\n    for i in range(n):\n        for j in range(n):\n            new_lock[i + n][j + n] = lock[i][j]\n    for rotation in range(4):\n        key = rotate_a_matrix_by_90_degree(key)\n        for x in range(n * 2):",
        "detail": "Coding_test.Chapter 12. 구현(完).10-1",
        "documentation": {}
    },
    {
        "label": "rotate_a_matrix_by_90_degree",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-2",
        "description": "Coding_test.Chapter 12. 구현(完).10-2",
        "peekOfCode": "def rotate_a_matrix_by_90_degree(key):\n    n = len(key)\n    result = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            result[j][n - i - 1] = key[i][j]\n    return result\ndef check(new_lock):\n    m = len(new_lock) // 3\n    for i in range(m, 2 * m):",
        "detail": "Coding_test.Chapter 12. 구현(完).10-2",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-2",
        "description": "Coding_test.Chapter 12. 구현(完).10-2",
        "peekOfCode": "def check(new_lock):\n    m = len(new_lock) // 3\n    for i in range(m, 2 * m):\n        for j in range(m, 2 * m):\n            if new_lock[i][j] != 1:\n                return False\n    return True\ndef solution(key, lock):\n    n = len(key)\n    m = len(lock)",
        "detail": "Coding_test.Chapter 12. 구현(完).10-2",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-2",
        "description": "Coding_test.Chapter 12. 구현(完).10-2",
        "peekOfCode": "def solution(key, lock):\n    n = len(key)\n    m = len(lock)\n    new_lock = [[0] * (3 * m) for _ in range(3 * m)]\n    for i in range(m, 2 * m):\n        for j in range(m, 2 * m):\n            new_lock[i][j] = lock[i - m][j - m]\n    for _ in range(4):\n        key = rotate_a_matrix_by_90_degree(key)\n        for y in range(2 * m):",
        "detail": "Coding_test.Chapter 12. 구현(完).10-2",
        "documentation": {}
    },
    {
        "label": "rotate_by_90_degrees",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-3-best",
        "description": "Coding_test.Chapter 12. 구현(完).10-3-best",
        "peekOfCode": "def rotate_by_90_degrees(key):\n    n = len(key)\n    for i in range(n):\n        for j in range(n):\n            key[j][n - i - 1] = key[i][j]\n    return key\ndef check(new_lock, m):\n    for i in range(m, 2 * m):\n        for j in range(m, 2 * m):\n            if new_lock[i][j] != 1:",
        "detail": "Coding_test.Chapter 12. 구현(完).10-3-best",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-3-best",
        "description": "Coding_test.Chapter 12. 구현(完).10-3-best",
        "peekOfCode": "def check(new_lock, m):\n    for i in range(m, 2 * m):\n        for j in range(m, 2 * m):\n            if new_lock[i][j] != 1:\n                return False\n    return True\ndef solution(key, lock):\n    n = len(key)\n    m = len(lock)\n    # initialize",
        "detail": "Coding_test.Chapter 12. 구현(完).10-3-best",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-3-best",
        "description": "Coding_test.Chapter 12. 구현(完).10-3-best",
        "peekOfCode": "def solution(key, lock):\n    n = len(key)\n    m = len(lock)\n    # initialize\n    new_lock = [[0] * 3 * m for _ in range(3 * m)]\n    for i in range(m):\n        for j in range(m):\n            new_lock[i + m][j + m] = lock[i][j]\n    for _ in range(4):\n        key = rotate_by_90_degrees(key)",
        "detail": "Coding_test.Chapter 12. 구현(完).10-3-best",
        "documentation": {}
    },
    {
        "label": "rotate_by_90_degrees",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-4",
        "description": "Coding_test.Chapter 12. 구현(完).10-4",
        "peekOfCode": "def rotate_by_90_degrees(key):\n    for i in range(n):\n        for j in range(n):\n            key[j][n - i - 1] = key[i][j]\n    return key\ndef check(new_lock, m):\n    for i in range(m, 2 * m):\n        for j in range(m, 2 * m):\n            if new_lock[i][j] != 1:\n                return False",
        "detail": "Coding_test.Chapter 12. 구현(完).10-4",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-4",
        "description": "Coding_test.Chapter 12. 구현(完).10-4",
        "peekOfCode": "def check(new_lock, m):\n    for i in range(m, 2 * m):\n        for j in range(m, 2 * m):\n            if new_lock[i][j] != 1:\n                return False\n    return True\ndef solution():\n    key = [[0, 0, 0], [1, 0, 0], [0, 1, 1]]\n    lock = [[1, 1, 1], [1, 1, 0], [1, 0, 1]]\n    n = len(key)",
        "detail": "Coding_test.Chapter 12. 구현(完).10-4",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-4",
        "description": "Coding_test.Chapter 12. 구현(完).10-4",
        "peekOfCode": "def solution():\n    key = [[0, 0, 0], [1, 0, 0], [0, 1, 1]]\n    lock = [[1, 1, 1], [1, 1, 0], [1, 0, 1]]\n    n = len(key)\n    m = len(lock)\n    new_lock = [[0] * 3 * m for _ in range(3 * m)]\n    # initialize\n    for i in range(m):\n        for j in range(m):\n            new_lock[m + i][m + j] = lock[i][j]",
        "detail": "Coding_test.Chapter 12. 구현(完).10-4",
        "documentation": {}
    },
    {
        "label": "rotate_by_90_degrees",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-5",
        "description": "Coding_test.Chapter 12. 구현(完).10-5",
        "peekOfCode": "def rotate_by_90_degrees(key):\n    n = len(key)\n    for i in range(n):\n        for j in range(n):\n            key[j][n - i - 1] = key[i][j]\n    return key\ndef check(new_lock, m):\n    for i in range(m, 2 * m):\n        for j in range(m, 2 * m):\n            if new_lock[i][j] != 1:",
        "detail": "Coding_test.Chapter 12. 구현(完).10-5",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-5",
        "description": "Coding_test.Chapter 12. 구현(完).10-5",
        "peekOfCode": "def check(new_lock, m):\n    for i in range(m, 2 * m):\n        for j in range(m, 2 * m):\n            if new_lock[i][j] != 1:\n                return False\nn = len(key)\nm = len(lock)\nanswer = False\nnew_lock = [[0] * 3 * m for _ in range(3 * m)]\nfor i in range(m):",
        "detail": "Coding_test.Chapter 12. 구현(完).10-5",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-5",
        "description": "Coding_test.Chapter 12. 구현(完).10-5",
        "peekOfCode": "key = [[0, 0, 0], [1, 0, 0], [0, 1, 1]]\nlock = [[1, 1, 1], [1, 1, 0], [1, 0, 1]]\ndef rotate_by_90_degrees(key):\n    n = len(key)\n    for i in range(n):\n        for j in range(n):\n            key[j][n - i - 1] = key[i][j]\n    return key\ndef check(new_lock, m):\n    for i in range(m, 2 * m):",
        "detail": "Coding_test.Chapter 12. 구현(完).10-5",
        "documentation": {}
    },
    {
        "label": "lock",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-5",
        "description": "Coding_test.Chapter 12. 구현(完).10-5",
        "peekOfCode": "lock = [[1, 1, 1], [1, 1, 0], [1, 0, 1]]\ndef rotate_by_90_degrees(key):\n    n = len(key)\n    for i in range(n):\n        for j in range(n):\n            key[j][n - i - 1] = key[i][j]\n    return key\ndef check(new_lock, m):\n    for i in range(m, 2 * m):\n        for j in range(m, 2 * m):",
        "detail": "Coding_test.Chapter 12. 구현(完).10-5",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-5",
        "description": "Coding_test.Chapter 12. 구현(完).10-5",
        "peekOfCode": "n = len(key)\nm = len(lock)\nanswer = False\nnew_lock = [[0] * 3 * m for _ in range(3 * m)]\nfor i in range(m):\n    for j in range(m):\n        new_lock[m + i][m + j] = lock[i][j]\nfor _ in range(4):\n    key = rotate_by_90_degrees(key)\n    for i in range(m):",
        "detail": "Coding_test.Chapter 12. 구현(完).10-5",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-5",
        "description": "Coding_test.Chapter 12. 구현(完).10-5",
        "peekOfCode": "m = len(lock)\nanswer = False\nnew_lock = [[0] * 3 * m for _ in range(3 * m)]\nfor i in range(m):\n    for j in range(m):\n        new_lock[m + i][m + j] = lock[i][j]\nfor _ in range(4):\n    key = rotate_by_90_degrees(key)\n    for i in range(m):\n        for j in range(m):",
        "detail": "Coding_test.Chapter 12. 구현(完).10-5",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-5",
        "description": "Coding_test.Chapter 12. 구현(完).10-5",
        "peekOfCode": "answer = False\nnew_lock = [[0] * 3 * m for _ in range(3 * m)]\nfor i in range(m):\n    for j in range(m):\n        new_lock[m + i][m + j] = lock[i][j]\nfor _ in range(4):\n    key = rotate_by_90_degrees(key)\n    for i in range(m):\n        for j in range(m):\n            for x in range(n):",
        "detail": "Coding_test.Chapter 12. 구현(完).10-5",
        "documentation": {}
    },
    {
        "label": "new_lock",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).10-5",
        "description": "Coding_test.Chapter 12. 구현(完).10-5",
        "peekOfCode": "new_lock = [[0] * 3 * m for _ in range(3 * m)]\nfor i in range(m):\n    for j in range(m):\n        new_lock[m + i][m + j] = lock[i][j]\nfor _ in range(4):\n    key = rotate_by_90_degrees(key)\n    for i in range(m):\n        for j in range(m):\n            for x in range(n):\n                for y in range(n):",
        "detail": "Coding_test.Chapter 12. 구현(完).10-5",
        "documentation": {}
    },
    {
        "label": "turn",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-1",
        "description": "Coding_test.Chapter 12. 구현(完).11-1",
        "peekOfCode": "def turn(direction, C):\n    if C == \"L\":\n        direction = (direction - 1) % 4\n    else:\n        direction = (direction + 1) % 4\n    return direction\ndef simulate():\n    x, y = 1, 1\n    data[x][y] = 2\n    direction = 0",
        "detail": "Coding_test.Chapter 12. 구현(完).11-1",
        "documentation": {}
    },
    {
        "label": "simulate",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-1",
        "description": "Coding_test.Chapter 12. 구현(完).11-1",
        "peekOfCode": "def simulate():\n    x, y = 1, 1\n    data[x][y] = 2\n    direction = 0\n    time = 0\n    index = 0  # 다음 회전 정보\n    q = [(x, y)]  # 뱀이 차지하고 있는 정보\n    while True:\n        nx = x + dx[direction]\n        ny = y + dy[direction]",
        "detail": "Coding_test.Chapter 12. 구현(完).11-1",
        "documentation": {}
    },
    {
        "label": "N",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-1",
        "description": "Coding_test.Chapter 12. 구현(完).11-1",
        "peekOfCode": "N = int(input())\nM = int(input())\ndata = [[0] * (N + 1) for _ in range(N + 1)]\nfor _ in range(M):\n    x, y = map(int, input().split())\n    data[x][y] = 1\ninfo = []\nL = int(input())\nfor _ in range(L):\n    X, C = input().split()",
        "detail": "Coding_test.Chapter 12. 구현(完).11-1",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-1",
        "description": "Coding_test.Chapter 12. 구현(完).11-1",
        "peekOfCode": "M = int(input())\ndata = [[0] * (N + 1) for _ in range(N + 1)]\nfor _ in range(M):\n    x, y = map(int, input().split())\n    data[x][y] = 1\ninfo = []\nL = int(input())\nfor _ in range(L):\n    X, C = input().split()\n    info.append([int(X), C])",
        "detail": "Coding_test.Chapter 12. 구현(完).11-1",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-1",
        "description": "Coding_test.Chapter 12. 구현(完).11-1",
        "peekOfCode": "data = [[0] * (N + 1) for _ in range(N + 1)]\nfor _ in range(M):\n    x, y = map(int, input().split())\n    data[x][y] = 1\ninfo = []\nL = int(input())\nfor _ in range(L):\n    X, C = input().split()\n    info.append([int(X), C])\ndx = [0, 1, 0, -1]  # 문제 해결 point",
        "detail": "Coding_test.Chapter 12. 구현(完).11-1",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-1",
        "description": "Coding_test.Chapter 12. 구현(完).11-1",
        "peekOfCode": "info = []\nL = int(input())\nfor _ in range(L):\n    X, C = input().split()\n    info.append([int(X), C])\ndx = [0, 1, 0, -1]  # 문제 해결 point\ndy = [1, 0, -1, 0]\ndef turn(direction, C):\n    if C == \"L\":\n        direction = (direction - 1) % 4",
        "detail": "Coding_test.Chapter 12. 구현(完).11-1",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-1",
        "description": "Coding_test.Chapter 12. 구현(完).11-1",
        "peekOfCode": "L = int(input())\nfor _ in range(L):\n    X, C = input().split()\n    info.append([int(X), C])\ndx = [0, 1, 0, -1]  # 문제 해결 point\ndy = [1, 0, -1, 0]\ndef turn(direction, C):\n    if C == \"L\":\n        direction = (direction - 1) % 4\n    else:",
        "detail": "Coding_test.Chapter 12. 구현(完).11-1",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-1",
        "description": "Coding_test.Chapter 12. 구현(完).11-1",
        "peekOfCode": "dx = [0, 1, 0, -1]  # 문제 해결 point\ndy = [1, 0, -1, 0]\ndef turn(direction, C):\n    if C == \"L\":\n        direction = (direction - 1) % 4\n    else:\n        direction = (direction + 1) % 4\n    return direction\ndef simulate():\n    x, y = 1, 1",
        "detail": "Coding_test.Chapter 12. 구현(完).11-1",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-1",
        "description": "Coding_test.Chapter 12. 구현(完).11-1",
        "peekOfCode": "dy = [1, 0, -1, 0]\ndef turn(direction, C):\n    if C == \"L\":\n        direction = (direction - 1) % 4\n    else:\n        direction = (direction + 1) % 4\n    return direction\ndef simulate():\n    x, y = 1, 1\n    data[x][y] = 2",
        "detail": "Coding_test.Chapter 12. 구현(完).11-1",
        "documentation": {}
    },
    {
        "label": "turn",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "description": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "peekOfCode": "def turn(direction, C):\n    if C == \"L\":\n        direction = (direction - 1) % 4\n    else:\n        direction = (direction + 1) % 4\n    return direction\ndef simulate():\n    x, y = 1, 1\n    data[x][y] = 2  # snake trace\n    direction = 0",
        "detail": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "documentation": {}
    },
    {
        "label": "simulate",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "description": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "peekOfCode": "def simulate():\n    x, y = 1, 1\n    data[x][y] = 2  # snake trace\n    direction = 0\n    time = 0\n    snake = [(x, y)]\n    while True:\n        time += 1\n        nx = x + dx[direction]\n        ny = y + dy[direction]",
        "detail": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "description": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "peekOfCode": "n = int(input())\nk = int(input())\ndata = [[0] * (n + 1) for _ in range(n + 1)]\nfor _ in range(k):\n    x, y = map(int, input().split())\n    data[x][y] = 1\nl = int(input())\ncontrol = {}\nfor _ in range(l):\n    x, c = input().split()",
        "detail": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "description": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "peekOfCode": "k = int(input())\ndata = [[0] * (n + 1) for _ in range(n + 1)]\nfor _ in range(k):\n    x, y = map(int, input().split())\n    data[x][y] = 1\nl = int(input())\ncontrol = {}\nfor _ in range(l):\n    x, c = input().split()\n    x = int(x)",
        "detail": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "description": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "peekOfCode": "data = [[0] * (n + 1) for _ in range(n + 1)]\nfor _ in range(k):\n    x, y = map(int, input().split())\n    data[x][y] = 1\nl = int(input())\ncontrol = {}\nfor _ in range(l):\n    x, c = input().split()\n    x = int(x)\n    control[x] = c",
        "detail": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "description": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "peekOfCode": "l = int(input())\ncontrol = {}\nfor _ in range(l):\n    x, c = input().split()\n    x = int(x)\n    control[x] = c\ndx = [0, 1, 0, -1]  # 행: 하, 상\ndy = [1, 0, -1, 0]  # 열: 우, 좌\ndef turn(direction, C):\n    if C == \"L\":",
        "detail": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "documentation": {}
    },
    {
        "label": "control",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "description": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "peekOfCode": "control = {}\nfor _ in range(l):\n    x, c = input().split()\n    x = int(x)\n    control[x] = c\ndx = [0, 1, 0, -1]  # 행: 하, 상\ndy = [1, 0, -1, 0]  # 열: 우, 좌\ndef turn(direction, C):\n    if C == \"L\":\n        direction = (direction - 1) % 4",
        "detail": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "description": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "peekOfCode": "dx = [0, 1, 0, -1]  # 행: 하, 상\ndy = [1, 0, -1, 0]  # 열: 우, 좌\ndef turn(direction, C):\n    if C == \"L\":\n        direction = (direction - 1) % 4\n    else:\n        direction = (direction + 1) % 4\n    return direction\ndef simulate():\n    x, y = 1, 1",
        "detail": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "description": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "peekOfCode": "dy = [1, 0, -1, 0]  # 열: 우, 좌\ndef turn(direction, C):\n    if C == \"L\":\n        direction = (direction - 1) % 4\n    else:\n        direction = (direction + 1) % 4\n    return direction\ndef simulate():\n    x, y = 1, 1\n    data[x][y] = 2  # snake trace",
        "detail": "Coding_test.Chapter 12. 구현(完).11-2-best",
        "documentation": {}
    },
    {
        "label": "turn",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-3",
        "description": "Coding_test.Chapter 12. 구현(完).11-3",
        "peekOfCode": "def turn(direction, c):\n    if c == \"L\":\n        direction = (direction - 1) % 4\n    else:\n        direction = (direction + 1) % 4\n    return direction\ndef simulate():\n    time = 0\n    direction = 0\n    x, y = 1, 1",
        "detail": "Coding_test.Chapter 12. 구현(完).11-3",
        "documentation": {}
    },
    {
        "label": "simulate",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-3",
        "description": "Coding_test.Chapter 12. 구현(完).11-3",
        "peekOfCode": "def simulate():\n    time = 0\n    direction = 0\n    x, y = 1, 1\n    new_board[x][y] = 2\n    snake = [(x, y)]\n    while True:\n        time += 1\n        nx = x + dx[direction]\n        ny = y + dy[direction]",
        "detail": "Coding_test.Chapter 12. 구현(完).11-3",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-3",
        "description": "Coding_test.Chapter 12. 구현(完).11-3",
        "peekOfCode": "n = int(input())\nk = int(input())\nnew_board = [[0] * (n + 1) for _ in range(n + 1)]\nfor _ in range(k):\n    x, y = map(int, input().split())\n    new_board[x][y] = 1\nl = int(input())\ncontrol = {}\nfor _ in range(l):\n    x, c = input().split()",
        "detail": "Coding_test.Chapter 12. 구현(完).11-3",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-3",
        "description": "Coding_test.Chapter 12. 구현(完).11-3",
        "peekOfCode": "k = int(input())\nnew_board = [[0] * (n + 1) for _ in range(n + 1)]\nfor _ in range(k):\n    x, y = map(int, input().split())\n    new_board[x][y] = 1\nl = int(input())\ncontrol = {}\nfor _ in range(l):\n    x, c = input().split()\n    control[int(x)] = c",
        "detail": "Coding_test.Chapter 12. 구현(完).11-3",
        "documentation": {}
    },
    {
        "label": "new_board",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-3",
        "description": "Coding_test.Chapter 12. 구현(完).11-3",
        "peekOfCode": "new_board = [[0] * (n + 1) for _ in range(n + 1)]\nfor _ in range(k):\n    x, y = map(int, input().split())\n    new_board[x][y] = 1\nl = int(input())\ncontrol = {}\nfor _ in range(l):\n    x, c = input().split()\n    control[int(x)] = c\ndx = [0, 1, 0, -1]",
        "detail": "Coding_test.Chapter 12. 구현(完).11-3",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-3",
        "description": "Coding_test.Chapter 12. 구현(完).11-3",
        "peekOfCode": "l = int(input())\ncontrol = {}\nfor _ in range(l):\n    x, c = input().split()\n    control[int(x)] = c\ndx = [0, 1, 0, -1]\ndy = [1, 0, -1, 0]\ndef turn(direction, c):\n    if c == \"L\":\n        direction = (direction - 1) % 4",
        "detail": "Coding_test.Chapter 12. 구현(完).11-3",
        "documentation": {}
    },
    {
        "label": "control",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-3",
        "description": "Coding_test.Chapter 12. 구현(完).11-3",
        "peekOfCode": "control = {}\nfor _ in range(l):\n    x, c = input().split()\n    control[int(x)] = c\ndx = [0, 1, 0, -1]\ndy = [1, 0, -1, 0]\ndef turn(direction, c):\n    if c == \"L\":\n        direction = (direction - 1) % 4\n    else:",
        "detail": "Coding_test.Chapter 12. 구현(完).11-3",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-3",
        "description": "Coding_test.Chapter 12. 구현(完).11-3",
        "peekOfCode": "dx = [0, 1, 0, -1]\ndy = [1, 0, -1, 0]\ndef turn(direction, c):\n    if c == \"L\":\n        direction = (direction - 1) % 4\n    else:\n        direction = (direction + 1) % 4\n    return direction\ndef simulate():\n    time = 0",
        "detail": "Coding_test.Chapter 12. 구현(完).11-3",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-3",
        "description": "Coding_test.Chapter 12. 구현(完).11-3",
        "peekOfCode": "dy = [1, 0, -1, 0]\ndef turn(direction, c):\n    if c == \"L\":\n        direction = (direction - 1) % 4\n    else:\n        direction = (direction + 1) % 4\n    return direction\ndef simulate():\n    time = 0\n    direction = 0",
        "detail": "Coding_test.Chapter 12. 구현(完).11-3",
        "documentation": {}
    },
    {
        "label": "turn",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-5",
        "description": "Coding_test.Chapter 12. 구현(完).11-5",
        "peekOfCode": "def turn(direction, c):\n    if c == \"L\":\n        direction = (direction - 1) % 4\n    else:\n        direction = (direction + 1) % 4\n    return direction\ndef simulate():\n    time = 0\n    direction = 0\n    x, y = 1, 1",
        "detail": "Coding_test.Chapter 12. 구현(完).11-5",
        "documentation": {}
    },
    {
        "label": "simulate",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-5",
        "description": "Coding_test.Chapter 12. 구현(完).11-5",
        "peekOfCode": "def simulate():\n    time = 0\n    direction = 0\n    x, y = 1, 1\n    new_board[x][y] = 2\n    snake = [(x, y)]\n    while True:\n        time += 1\n        nx = x + dx[direction]\n        ny = y + dy[direction]",
        "detail": "Coding_test.Chapter 12. 구현(完).11-5",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-5",
        "description": "Coding_test.Chapter 12. 구현(完).11-5",
        "peekOfCode": "n = int(input())\nk = int(input())\napples = []\nfor _ in range(k):\n    apples.append(list(map(int, input().split())))\nl = int(input())\ncontrol = {}\nfor _ in range(l):\n    x, c = input().split()\n    control[int(x)] = c",
        "detail": "Coding_test.Chapter 12. 구현(完).11-5",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-5",
        "description": "Coding_test.Chapter 12. 구현(完).11-5",
        "peekOfCode": "k = int(input())\napples = []\nfor _ in range(k):\n    apples.append(list(map(int, input().split())))\nl = int(input())\ncontrol = {}\nfor _ in range(l):\n    x, c = input().split()\n    control[int(x)] = c\nnew_board = [[0] * (n + 1) for _ in range(n + 1)]",
        "detail": "Coding_test.Chapter 12. 구현(完).11-5",
        "documentation": {}
    },
    {
        "label": "apples",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-5",
        "description": "Coding_test.Chapter 12. 구현(完).11-5",
        "peekOfCode": "apples = []\nfor _ in range(k):\n    apples.append(list(map(int, input().split())))\nl = int(input())\ncontrol = {}\nfor _ in range(l):\n    x, c = input().split()\n    control[int(x)] = c\nnew_board = [[0] * (n + 1) for _ in range(n + 1)]\nfor _ in range(k):",
        "detail": "Coding_test.Chapter 12. 구현(完).11-5",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-5",
        "description": "Coding_test.Chapter 12. 구현(完).11-5",
        "peekOfCode": "l = int(input())\ncontrol = {}\nfor _ in range(l):\n    x, c = input().split()\n    control[int(x)] = c\nnew_board = [[0] * (n + 1) for _ in range(n + 1)]\nfor _ in range(k):\n    x, y = map(int, input().split())\n    new_board[x][y] = 1\ndx = [0, 1, 0, -1]  # 문제 해결 point",
        "detail": "Coding_test.Chapter 12. 구현(完).11-5",
        "documentation": {}
    },
    {
        "label": "control",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-5",
        "description": "Coding_test.Chapter 12. 구현(完).11-5",
        "peekOfCode": "control = {}\nfor _ in range(l):\n    x, c = input().split()\n    control[int(x)] = c\nnew_board = [[0] * (n + 1) for _ in range(n + 1)]\nfor _ in range(k):\n    x, y = map(int, input().split())\n    new_board[x][y] = 1\ndx = [0, 1, 0, -1]  # 문제 해결 point\ndy = [1, 0, -1, 0]",
        "detail": "Coding_test.Chapter 12. 구현(完).11-5",
        "documentation": {}
    },
    {
        "label": "new_board",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-5",
        "description": "Coding_test.Chapter 12. 구현(完).11-5",
        "peekOfCode": "new_board = [[0] * (n + 1) for _ in range(n + 1)]\nfor _ in range(k):\n    x, y = map(int, input().split())\n    new_board[x][y] = 1\ndx = [0, 1, 0, -1]  # 문제 해결 point\ndy = [1, 0, -1, 0]\ndef turn(direction, c):\n    if c == \"L\":\n        direction = (direction - 1) % 4\n    else:",
        "detail": "Coding_test.Chapter 12. 구현(完).11-5",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-5",
        "description": "Coding_test.Chapter 12. 구현(完).11-5",
        "peekOfCode": "dx = [0, 1, 0, -1]  # 문제 해결 point\ndy = [1, 0, -1, 0]\ndef turn(direction, c):\n    if c == \"L\":\n        direction = (direction - 1) % 4\n    else:\n        direction = (direction + 1) % 4\n    return direction\ndef simulate():\n    time = 0",
        "detail": "Coding_test.Chapter 12. 구현(完).11-5",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).11-5",
        "description": "Coding_test.Chapter 12. 구현(完).11-5",
        "peekOfCode": "dy = [1, 0, -1, 0]\ndef turn(direction, c):\n    if c == \"L\":\n        direction = (direction - 1) % 4\n    else:\n        direction = (direction + 1) % 4\n    return direction\ndef simulate():\n    time = 0\n    direction = 0",
        "detail": "Coding_test.Chapter 12. 구현(完).11-5",
        "documentation": {}
    },
    {
        "label": "possible",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).12-1",
        "description": "Coding_test.Chapter 12. 구현(完).12-1",
        "peekOfCode": "def possible(answer):\n    for x, y, stuff in answer:\n        if stuff == 0:  # pillar\n            if (\n                y == 0\n                or [x - 1, y, 1] in answer\n                or [x, y - 1, 0] in answer\n                or [x, y, 1] in answer\n            ):\n                continue",
        "detail": "Coding_test.Chapter 12. 구현(完).12-1",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).12-1",
        "description": "Coding_test.Chapter 12. 구현(完).12-1",
        "peekOfCode": "def solution(n, build_frame):\n    construct = [[0] * n for _ in range(n)]\n    answer = []\n    for frame in build_frame:\n        x, y, stuff, operate = frame\n        if operate == 0:  # 삭제\n            answer.remove([x, y, stuff])\n            if not possible(answer):\n                answer.append([x, y, stuff])\n        else:  # 설치",
        "detail": "Coding_test.Chapter 12. 구현(完).12-1",
        "documentation": {}
    },
    {
        "label": "possible",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).12-2-best",
        "description": "Coding_test.Chapter 12. 구현(完).12-2-best",
        "peekOfCode": "def possible(answer):\n    for x, y, a in answer:\n        if a == 0:  # pillar\n            if (\n                y == 0\n                or [x - 1, y, 1] in answer\n                or [x, y - 1, 0] in answer\n                or [x, y, 1] in answer\n            ):\n                continue",
        "detail": "Coding_test.Chapter 12. 구현(完).12-2-best",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).12-2-best",
        "description": "Coding_test.Chapter 12. 구현(完).12-2-best",
        "peekOfCode": "def solution(n, build_frame):\n    answer = []\n    for frame in build_frame:\n        x, y, a, b = frame\n        if b == 0:\n            answer.remove([x, y, a])\n            if not possible(answer):\n                answer.append([x, y, a])\n        else:\n            answer.append([x, y, a])",
        "detail": "Coding_test.Chapter 12. 구현(完).12-2-best",
        "documentation": {}
    },
    {
        "label": "possible",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).12-3",
        "description": "Coding_test.Chapter 12. 구현(完).12-3",
        "peekOfCode": "def possible(answer):\n    for x, y, a in answer:\n        if a == 0:\n            if y == 0 or [x, y - 1, 0] in answer or [x - 1, y, 1] in answer:\n                continue\n            return False\n        else:\n            if (\n                [x, y - 1, 0] in answer\n                or [x + 1, y - 1, 0] in answer",
        "detail": "Coding_test.Chapter 12. 구현(完).12-3",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).12-3",
        "description": "Coding_test.Chapter 12. 구현(完).12-3",
        "peekOfCode": "def solution(n, build_frame):\n    answer = []\n    for frame in build_frame:\n        x, y, a, b = frame\n        if b == 0:\n            answer.remove([x, y, a])\n            if not possible(answer):\n                answer.append([x, y, a])\n        else:\n            answer.append([x, y, a])",
        "detail": "Coding_test.Chapter 12. 구현(完).12-3",
        "documentation": {}
    },
    {
        "label": "possible",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).12-5",
        "description": "Coding_test.Chapter 12. 구현(完).12-5",
        "peekOfCode": "def possible(answer):\n    for x, y, a in answer:\n        if a == 0:\n            if y == 0 or [x, y - 1, 0] in answer or [x - 1, y, 0] in answer:\n                continue\n            return False\n        else:\n            if (\n                [x, y - 1, 0] in answer\n                or [x + 1, y - 1, 0] in answer",
        "detail": "Coding_test.Chapter 12. 구현(完).12-5",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).12-5",
        "description": "Coding_test.Chapter 12. 구현(完).12-5",
        "peekOfCode": "def solution(n, build_frame):\n    answer = []\n    for frame in build_frame:\n        x, y, a, b = frame\n        if b == 0:\n            answer.remove([x, y, a])\n            if not possible(answer):\n                answer.append([x, y, a])\n        else:\n            answer.append([x, y, a])",
        "detail": "Coding_test.Chapter 12. 구현(完).12-5",
        "documentation": {}
    },
    {
        "label": "get_sum",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).13-1",
        "description": "Coding_test.Chapter 12. 구현(完).13-1",
        "peekOfCode": "def get_sum(candidate):\n    result = 0\n    for hx, hy in house:\n        temp = 1e9\n        for cx, cy in candidate:\n            temp = min(temp, abs(hx - cx) + abs(hy - cy))\n        result += temp\n    return result\nresult = 1e9\nfor candidate in candidates:",
        "detail": "Coding_test.Chapter 12. 구현(完).13-1",
        "documentation": {}
    },
    {
        "label": "candidates",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).13-1",
        "description": "Coding_test.Chapter 12. 구현(完).13-1",
        "peekOfCode": "candidates = list(combinations(chicken, m))\ndef get_sum(candidate):\n    result = 0\n    for hx, hy in house:\n        temp = 1e9\n        for cx, cy in candidate:\n            temp = min(temp, abs(hx - cx) + abs(hy - cy))\n        result += temp\n    return result\nresult = 1e9",
        "detail": "Coding_test.Chapter 12. 구현(完).13-1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).13-1",
        "description": "Coding_test.Chapter 12. 구현(完).13-1",
        "peekOfCode": "result = 1e9\nfor candidate in candidates:\n    result = min(result, get_sum(candidate))\nprint(result)",
        "detail": "Coding_test.Chapter 12. 구현(完).13-1",
        "documentation": {}
    },
    {
        "label": "chicken",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).13-2",
        "description": "Coding_test.Chapter 12. 구현(完).13-2",
        "peekOfCode": "chicken = []\nhouses = []\nfor i in range(n):\n    data = list(map(int, input().split()))\n    for j in range(n):\n        if data[j] == 1:\n            houses.append([i, j])\n        if data[j] == 2:\n            chicken.append([i, j])\ncombs = list(itertools.combinations(chicken, m))",
        "detail": "Coding_test.Chapter 12. 구현(完).13-2",
        "documentation": {}
    },
    {
        "label": "houses",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).13-2",
        "description": "Coding_test.Chapter 12. 구현(完).13-2",
        "peekOfCode": "houses = []\nfor i in range(n):\n    data = list(map(int, input().split()))\n    for j in range(n):\n        if data[j] == 1:\n            houses.append([i, j])\n        if data[j] == 2:\n            chicken.append([i, j])\ncombs = list(itertools.combinations(chicken, m))\nmin_dist = 1e9",
        "detail": "Coding_test.Chapter 12. 구현(完).13-2",
        "documentation": {}
    },
    {
        "label": "combs",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).13-2",
        "description": "Coding_test.Chapter 12. 구현(完).13-2",
        "peekOfCode": "combs = list(itertools.combinations(chicken, m))\nmin_dist = 1e9\nfor comb in combs:\n    dist = 0\n    for h in houses:\n        temp = []\n        for c in comb:\n            temp.append(abs(h[0] - c[0]) + abs(h[1] - c[1]))\n        dist += min(temp)\n    if dist < min_dist:",
        "detail": "Coding_test.Chapter 12. 구현(完).13-2",
        "documentation": {}
    },
    {
        "label": "min_dist",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).13-2",
        "description": "Coding_test.Chapter 12. 구현(完).13-2",
        "peekOfCode": "min_dist = 1e9\nfor comb in combs:\n    dist = 0\n    for h in houses:\n        temp = []\n        for c in comb:\n            temp.append(abs(h[0] - c[0]) + abs(h[1] - c[1]))\n        dist += min(temp)\n    if dist < min_dist:\n        min_dist = dist",
        "detail": "Coding_test.Chapter 12. 구현(完).13-2",
        "documentation": {}
    },
    {
        "label": "chicken",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).13-3-best",
        "description": "Coding_test.Chapter 12. 구현(完).13-3-best",
        "peekOfCode": "chicken = []\nhome = []\nfor i in range(n):\n    array = list(map(int, input().split()))\n    for j in range(n):\n        if array[j] == 1:\n            home.append((i, j))\n        if array[j] == 2:\n            chicken.append((i, j))\nmin_dist = 1e9",
        "detail": "Coding_test.Chapter 12. 구현(完).13-3-best",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).13-3-best",
        "description": "Coding_test.Chapter 12. 구현(完).13-3-best",
        "peekOfCode": "home = []\nfor i in range(n):\n    array = list(map(int, input().split()))\n    for j in range(n):\n        if array[j] == 1:\n            home.append((i, j))\n        if array[j] == 2:\n            chicken.append((i, j))\nmin_dist = 1e9\nfor candidate in list(combinations(chicken, m)):",
        "detail": "Coding_test.Chapter 12. 구현(完).13-3-best",
        "documentation": {}
    },
    {
        "label": "min_dist",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).13-3-best",
        "description": "Coding_test.Chapter 12. 구현(完).13-3-best",
        "peekOfCode": "min_dist = 1e9\nfor candidate in list(combinations(chicken, m)):\n    dist = 0\n    for c in candidate:\n        temp = []\n        for h in home:\n            temp.append(abs(c[0] - h[0]) + abs(c[1] - h[1]))\n        dist += min(temp)\n    min_dist = min(min_dist, dist)\nprint(dist)",
        "detail": "Coding_test.Chapter 12. 구현(完).13-3-best",
        "documentation": {}
    },
    {
        "label": "chicken",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).13-5",
        "description": "Coding_test.Chapter 12. 구현(完).13-5",
        "peekOfCode": "chicken = []\nhouses = []\nfor x in range(n):\n    row = list(map(int, input().split()))\n    for y in range(n):\n        if row[y] == 2:\n            chicken.append([x, y])\n        elif row[y] == 1:\n            houses.append([x, y])\nanswer = 1e9",
        "detail": "Coding_test.Chapter 12. 구현(完).13-5",
        "documentation": {}
    },
    {
        "label": "houses",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).13-5",
        "description": "Coding_test.Chapter 12. 구현(完).13-5",
        "peekOfCode": "houses = []\nfor x in range(n):\n    row = list(map(int, input().split()))\n    for y in range(n):\n        if row[y] == 2:\n            chicken.append([x, y])\n        elif row[y] == 1:\n            houses.append([x, y])\nanswer = 1e9\nfor candidates in list(combinations(chicken, m)):",
        "detail": "Coding_test.Chapter 12. 구현(完).13-5",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 12. 구현(完).13-5",
        "description": "Coding_test.Chapter 12. 구현(完).13-5",
        "peekOfCode": "answer = 1e9\nfor candidates in list(combinations(chicken, m)):\n    dist = 0\n    for c in candidates:\n        temp = []\n        for h in houses:\n            temp.append(abs(h[0] - c[0]) + abs(h[1] - c[1]))\n        dist += min(temp)\n    answer = min(answer, dist)\nprint(answer)",
        "detail": "Coding_test.Chapter 12. 구현(完).13-5",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).14-1-best",
        "description": "Coding_test.Chapter 12. 구현(完).14-1-best",
        "peekOfCode": "def solution(\n    n, weak, dist\n):  # n: circumference, weak: weak point, dist: friends' dist per hour\n    length = len(weak)\n    for i in range(length):\n        weak.append(weak[i] + n)\n    answer = len(dist) + 1  # finding friend least num\n    for start in range(length):\n        for friends in list(permutations(dist, len(dist))):\n            count = 1",
        "detail": "Coding_test.Chapter 12. 구현(完).14-1-best",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).14-2",
        "description": "Coding_test.Chapter 12. 구현(完).14-2",
        "peekOfCode": "def solution(n, weak, dist):\n    length = len(weak)\n    for i in range(length):\n        weak.append(weak[i] + n)\n    answer = len(dist) + 1  # finding friend at least num\n    for start in range(length):\n        for friends in list(permutations(dist, len(dist))):\n            count = 1\n            position = weak[start] + friends[count - 1]\n            for index in range(start, start + length):",
        "detail": "Coding_test.Chapter 12. 구현(完).14-2",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).14-3",
        "description": "Coding_test.Chapter 12. 구현(完).14-3",
        "peekOfCode": "def solution(n, weak, dist):\n    length = len(weak)\n    for i in range(length):\n        weak.append(weak[i] + n)\n    answer = len(dist) + 1\n    for start in range(length):\n        for friends in list(permutations(dist, len(dist))):\n            count = 1\n            position = weak[start] + friends[count - 1]\n            for index in range(start, start + length):",
        "detail": "Coding_test.Chapter 12. 구현(完).14-3",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 12. 구현(完).14-5",
        "description": "Coding_test.Chapter 12. 구현(完).14-5",
        "peekOfCode": "def solution(n, weak, dist):\n    length = len(weak)\n    for i in range(length):\n        weak.append(weak[i] + n)\n    answer = len(dist) + 1\n    for start in range(length):\n        count = 1\n        for friend in list(permutations(dist, len(dist))):\n            position = weak[start] + friend[count - 1]\n            for index in range(start, start + length):",
        "detail": "Coding_test.Chapter 12. 구현(完).14-5",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.15-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.15-1",
        "peekOfCode": "graph = [[] for _ in range(n + 1)]\nfor _ in range(m):\n    a, b = map(int, sys.stdin.readline().split())\n    graph[a].append(b)\ndistance = [-1] * (n + 1)\ndistance[x] = 0\nqueue = deque([x])\nwhile queue:\n    v = queue.popleft()\n    for i in graph[v]:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.15-1",
        "documentation": {}
    },
    {
        "label": "distance",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.15-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.15-1",
        "peekOfCode": "distance = [-1] * (n + 1)\ndistance[x] = 0\nqueue = deque([x])\nwhile queue:\n    v = queue.popleft()\n    for i in graph[v]:\n        if distance[i] == -1:\n            distance[i] = distance[v] + 1\n            queue.append(i)\ncheck = False",
        "detail": "Coding_test.Chapter 13. DFS-BFS.15-1",
        "documentation": {}
    },
    {
        "label": "distance[x]",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.15-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.15-1",
        "peekOfCode": "distance[x] = 0\nqueue = deque([x])\nwhile queue:\n    v = queue.popleft()\n    for i in graph[v]:\n        if distance[i] == -1:\n            distance[i] = distance[v] + 1\n            queue.append(i)\ncheck = False\nfor i in range(1, n + 1):",
        "detail": "Coding_test.Chapter 13. DFS-BFS.15-1",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.15-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.15-1",
        "peekOfCode": "queue = deque([x])\nwhile queue:\n    v = queue.popleft()\n    for i in graph[v]:\n        if distance[i] == -1:\n            distance[i] = distance[v] + 1\n            queue.append(i)\ncheck = False\nfor i in range(1, n + 1):\n    if distance[i] == k:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.15-1",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.15-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.15-1",
        "peekOfCode": "check = False\nfor i in range(1, n + 1):\n    if distance[i] == k:\n        print(i)\n        check = True\nif not check:\n    print(-1)",
        "detail": "Coding_test.Chapter 13. DFS-BFS.15-1",
        "documentation": {}
    },
    {
        "label": "bfs",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.15-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.15-2",
        "peekOfCode": "def bfs(graph, start):\n    queue = deque([start])\n    dist[start] = 0\n    while queue:\n        v = queue.popleft()\n        for i in graph[v]:\n            if dist[i] == -1:\n                queue.append(i)\n                dist[i] = dist[v] + 1\nbfs(graph, x)",
        "detail": "Coding_test.Chapter 13. DFS-BFS.15-2",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.15-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.15-2",
        "peekOfCode": "graph = [[] for _ in range(n + 1)]\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a].append(b)\ndist = [-1] * (n + 1)\ndef bfs(graph, start):\n    queue = deque([start])\n    dist[start] = 0\n    while queue:\n        v = queue.popleft()",
        "detail": "Coding_test.Chapter 13. DFS-BFS.15-2",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.15-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.15-2",
        "peekOfCode": "dist = [-1] * (n + 1)\ndef bfs(graph, start):\n    queue = deque([start])\n    dist[start] = 0\n    while queue:\n        v = queue.popleft()\n        for i in graph[v]:\n            if dist[i] == -1:\n                queue.append(i)\n                dist[i] = dist[v] + 1",
        "detail": "Coding_test.Chapter 13. DFS-BFS.15-2",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.15-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.15-2",
        "peekOfCode": "check = False\nfor idx in range(1, n + 1):\n    if dist[idx] == k:\n        print(idx)\n        check = True\nif not check:\n    print(-1)",
        "detail": "Coding_test.Chapter 13. DFS-BFS.15-2",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.15-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.15-3-best",
        "peekOfCode": "graph = [[] for _ in range(n + 1)]\nvisited = [1e9] * (n + 1)\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a].append(b)\nqueue = deque([x])\nvisited[x] = 0\nwhile queue:\n    v = queue.popleft()\n    for i in graph[v]:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.15-3-best",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.15-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.15-3-best",
        "peekOfCode": "visited = [1e9] * (n + 1)\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a].append(b)\nqueue = deque([x])\nvisited[x] = 0\nwhile queue:\n    v = queue.popleft()\n    for i in graph[v]:\n        if visited[i] == 1e9:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.15-3-best",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.15-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.15-3-best",
        "peekOfCode": "queue = deque([x])\nvisited[x] = 0\nwhile queue:\n    v = queue.popleft()\n    for i in graph[v]:\n        if visited[i] == 1e9:\n            queue.append(i)\n            visited[i] = min(visited[i], visited[v] + 1)\nif k in visited[1:]:\n    for i in range(1, n + 1):",
        "detail": "Coding_test.Chapter 13. DFS-BFS.15-3-best",
        "documentation": {}
    },
    {
        "label": "visited[x]",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.15-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.15-3-best",
        "peekOfCode": "visited[x] = 0\nwhile queue:\n    v = queue.popleft()\n    for i in graph[v]:\n        if visited[i] == 1e9:\n            queue.append(i)\n            visited[i] = min(visited[i], visited[v] + 1)\nif k in visited[1:]:\n    for i in range(1, n + 1):\n        if k == visited[i]:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.15-3-best",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.15-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.15-4",
        "peekOfCode": "graph = [[] for _ in range(n + 1)]\nfor _ in range(m):\n    a, b = map(int, sys.stdin.readline().split())\n    graph[a].append(b)\nqueue = deque([x])\nvisited = [1e9 for _ in range(n + 1)]\nvisited[x] = 0\nwhile queue:\n    x = queue.popleft()\n    for i in graph[x]:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.15-4",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.15-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.15-4",
        "peekOfCode": "queue = deque([x])\nvisited = [1e9 for _ in range(n + 1)]\nvisited[x] = 0\nwhile queue:\n    x = queue.popleft()\n    for i in graph[x]:\n        if visited[i] == 1e9:\n            queue.append(i)\n            visited[i] = min(visited[i], visited[i] + 1)\nif k in visited[1:]:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.15-4",
        "documentation": {}
    },
    {
        "label": "visited",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.15-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.15-4",
        "peekOfCode": "visited = [1e9 for _ in range(n + 1)]\nvisited[x] = 0\nwhile queue:\n    x = queue.popleft()\n    for i in graph[x]:\n        if visited[i] == 1e9:\n            queue.append(i)\n            visited[i] = min(visited[i], visited[i] + 1)\nif k in visited[1:]:\n    for i in range(1, n + 1):",
        "detail": "Coding_test.Chapter 13. DFS-BFS.15-4",
        "documentation": {}
    },
    {
        "label": "visited[x]",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.15-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.15-4",
        "peekOfCode": "visited[x] = 0\nwhile queue:\n    x = queue.popleft()\n    for i in graph[x]:\n        if visited[i] == 1e9:\n            queue.append(i)\n            visited[i] = min(visited[i], visited[i] + 1)\nif k in visited[1:]:\n    for i in range(1, n + 1):\n        if visited[i] == k:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.15-4",
        "documentation": {}
    },
    {
        "label": "virus",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "peekOfCode": "def virus(x, y):  # 오로지 바이러스 퍼트리는 가정 상황\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < m:  # inside the boundary\n            if temp[nx][ny] == 0:\n                temp[nx][ny] = 1\n                virus(nx, ny)\ndef get_score():\n    score = 0",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "documentation": {}
    },
    {
        "label": "get_score",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "peekOfCode": "def get_score():\n    score = 0\n    for i in range(n):\n        for j in range(m):\n            if temp[i][j] == 0:\n                score += 1\n    return score\ndef dfs(count):\n    global result\n    if count == 3:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "peekOfCode": "def dfs(count):\n    global result\n    if count == 3:\n        for i in range(n):\n            for j in range(m):\n                temp[i][j] = data[i][j]\n        for i in range(n):\n            for j in range(m):\n                if temp[i][j] == 2:\n                    virus(i, j)",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "peekOfCode": "data = []\ntemp = [[0] * m for _ in range(n)]\nfor _ in range(n):\n    data.append(list(map(int, sys.stdin.readline().split())))\ndx = [-1, 0, 1, 0]  # 좌 상 우 하 (시계 방향)\ndy = [0, 1, 0, -1]\nresult = 0\ndef virus(x, y):  # 오로지 바이러스 퍼트리는 가정 상황\n    for i in range(4):\n        nx = x + dx[i]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "documentation": {}
    },
    {
        "label": "temp",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "peekOfCode": "temp = [[0] * m for _ in range(n)]\nfor _ in range(n):\n    data.append(list(map(int, sys.stdin.readline().split())))\ndx = [-1, 0, 1, 0]  # 좌 상 우 하 (시계 방향)\ndy = [0, 1, 0, -1]\nresult = 0\ndef virus(x, y):  # 오로지 바이러스 퍼트리는 가정 상황\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "peekOfCode": "dx = [-1, 0, 1, 0]  # 좌 상 우 하 (시계 방향)\ndy = [0, 1, 0, -1]\nresult = 0\ndef virus(x, y):  # 오로지 바이러스 퍼트리는 가정 상황\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < m:  # inside the boundary\n            if temp[nx][ny] == 0:\n                temp[nx][ny] = 1",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "peekOfCode": "dy = [0, 1, 0, -1]\nresult = 0\ndef virus(x, y):  # 오로지 바이러스 퍼트리는 가정 상황\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < m:  # inside the boundary\n            if temp[nx][ny] == 0:\n                temp[nx][ny] = 1\n                virus(nx, ny)",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "peekOfCode": "result = 0\ndef virus(x, y):  # 오로지 바이러스 퍼트리는 가정 상황\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < m:  # inside the boundary\n            if temp[nx][ny] == 0:\n                temp[nx][ny] = 1\n                virus(nx, ny)\ndef get_score():",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-1",
        "documentation": {}
    },
    {
        "label": "simulate",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "peekOfCode": "def simulate(temp, x, y):\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < m:\n            if temp[nx][ny] == 0:\n                temp[nx][ny] = 2\n                simulate(temp, nx, ny)\n    return temp\ndef count(temp):",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "peekOfCode": "def count(temp):\n    total = 0\n    for i in range(n):\n        for j in range(m):\n            if temp[i][j] == 0:\n                total += 1\n    return total\nmax_value = 0\nfor candidate in candidates:\n    temp = copy.deepcopy(data)",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "peekOfCode": "data = []\nwalls = []\nvirus = []\nfor i in range(n):\n    data.append(list(map(int, input().split())))\n    for j in range(m):\n        if data[i][j] == 0:\n            walls.append((i, j))\n        if data[i][j] == 2:\n            virus.append((i, j))",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "documentation": {}
    },
    {
        "label": "walls",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "peekOfCode": "walls = []\nvirus = []\nfor i in range(n):\n    data.append(list(map(int, input().split())))\n    for j in range(m):\n        if data[i][j] == 0:\n            walls.append((i, j))\n        if data[i][j] == 2:\n            virus.append((i, j))\ndx = [-1, 0, 1, 0]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "documentation": {}
    },
    {
        "label": "virus",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "peekOfCode": "virus = []\nfor i in range(n):\n    data.append(list(map(int, input().split())))\n    for j in range(m):\n        if data[i][j] == 0:\n            walls.append((i, j))\n        if data[i][j] == 2:\n            virus.append((i, j))\ndx = [-1, 0, 1, 0]\ndy = [0, 1, 0, -1]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "peekOfCode": "dx = [-1, 0, 1, 0]\ndy = [0, 1, 0, -1]\ncandidates = list(combinations(walls, 3))\ndef simulate(temp, x, y):\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < m:\n            if temp[nx][ny] == 0:\n                temp[nx][ny] = 2",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "peekOfCode": "dy = [0, 1, 0, -1]\ncandidates = list(combinations(walls, 3))\ndef simulate(temp, x, y):\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < m:\n            if temp[nx][ny] == 0:\n                temp[nx][ny] = 2\n                simulate(temp, nx, ny)",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "documentation": {}
    },
    {
        "label": "candidates",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "peekOfCode": "candidates = list(combinations(walls, 3))\ndef simulate(temp, x, y):\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < m:\n            if temp[nx][ny] == 0:\n                temp[nx][ny] = 2\n                simulate(temp, nx, ny)\n    return temp",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "documentation": {}
    },
    {
        "label": "max_value",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "peekOfCode": "max_value = 0\nfor candidate in candidates:\n    temp = copy.deepcopy(data)\n    for c in list(candidate):\n        temp[c[0]][c[1]] = 1\n    for v in virus:\n        result = simulate(temp, v[0], v[1])\n    max_value = max(count(result), max_value)\nprint(max_value)",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-2",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "peekOfCode": "def check(lab):\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if lab[i][j] == 0:\n                count += 1\n    return count\ndef simulate(lab, x, y):\n    for i in range(4):\n        nx = x + dx[i]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "documentation": {}
    },
    {
        "label": "simulate",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "peekOfCode": "def simulate(lab, x, y):\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < m:\n            if lab[nx][ny] == 0:\n                lab[nx][ny] = 2\n                simulate(lab, nx, ny)\n    return lab\nanswer = 0",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "documentation": {}
    },
    {
        "label": "lab",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "peekOfCode": "lab = []\nvirus = []\nvacent = []\nfor i in range(n):\n    lab.append(list(map(int, input().split())))\n    for j in range(m):\n        if lab[i][j] == 0:\n            vacent.append([i, j])\n        if lab[i][j] == 2:\n            virus.append([i, j])",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "documentation": {}
    },
    {
        "label": "virus",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "peekOfCode": "virus = []\nvacent = []\nfor i in range(n):\n    lab.append(list(map(int, input().split())))\n    for j in range(m):\n        if lab[i][j] == 0:\n            vacent.append([i, j])\n        if lab[i][j] == 2:\n            virus.append([i, j])\ncandidate = list(combinations(vacent, 3))",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "documentation": {}
    },
    {
        "label": "vacent",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "peekOfCode": "vacent = []\nfor i in range(n):\n    lab.append(list(map(int, input().split())))\n    for j in range(m):\n        if lab[i][j] == 0:\n            vacent.append([i, j])\n        if lab[i][j] == 2:\n            virus.append([i, j])\ncandidate = list(combinations(vacent, 3))\ndx = [-1, 0, 1, 0]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "documentation": {}
    },
    {
        "label": "candidate",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "peekOfCode": "candidate = list(combinations(vacent, 3))\ndx = [-1, 0, 1, 0]\ndy = [0, -1, 0, 1]\ndef check(lab):\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if lab[i][j] == 0:\n                count += 1\n    return count",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "peekOfCode": "dx = [-1, 0, 1, 0]\ndy = [0, -1, 0, 1]\ndef check(lab):\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if lab[i][j] == 0:\n                count += 1\n    return count\ndef simulate(lab, x, y):",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "peekOfCode": "dy = [0, -1, 0, 1]\ndef check(lab):\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if lab[i][j] == 0:\n                count += 1\n    return count\ndef simulate(lab, x, y):\n    for i in range(4):",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "peekOfCode": "answer = 0\nfor walls in candidate:\n    new_lab = deepcopy(lab)\n    for wall in list(walls):\n        new_lab[wall[0]][wall[1]] = 1\n    for v in virus:\n        new_lab = simulate(new_lab, v[0], v[1])\n    answer = max(answer, check(new_lab))\nprint(answer)",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-3-best",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "peekOfCode": "def check(lab):\n    count = 0\n    for x in range(n):\n        for y in range(m):\n            if lab[x][y] == 0:\n                count += 1\n    return count\ndx = [-1, 0, 1, 0]\ndy = [0, -1, 0, 1]\ndef simulate(lab, x, y):",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "documentation": {}
    },
    {
        "label": "simulate",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "peekOfCode": "def simulate(lab, x, y):\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if lab[nx][ny] == 0:\n            lab[nx][ny] = 2\n            simulate(lab, nx, ny)\ncandidates = list(combinations(vacent, 3))\nanswer = 0\nfor walls in candidates:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "documentation": {}
    },
    {
        "label": "lab",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "peekOfCode": "lab = []\nvirus = []\nvacent = []\nfor x in range(n):\n    row = list(map(int, input().split()))\n    for y in range(m):\n        if row[y] == 2:\n            virus.append((x, y))\ndef check(lab):\n    count = 0",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "documentation": {}
    },
    {
        "label": "virus",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "peekOfCode": "virus = []\nvacent = []\nfor x in range(n):\n    row = list(map(int, input().split()))\n    for y in range(m):\n        if row[y] == 2:\n            virus.append((x, y))\ndef check(lab):\n    count = 0\n    for x in range(n):",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "documentation": {}
    },
    {
        "label": "vacent",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "peekOfCode": "vacent = []\nfor x in range(n):\n    row = list(map(int, input().split()))\n    for y in range(m):\n        if row[y] == 2:\n            virus.append((x, y))\ndef check(lab):\n    count = 0\n    for x in range(n):\n        for y in range(m):",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "peekOfCode": "dx = [-1, 0, 1, 0]\ndy = [0, -1, 0, 1]\ndef simulate(lab, x, y):\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if lab[nx][ny] == 0:\n            lab[nx][ny] = 2\n            simulate(lab, nx, ny)\ncandidates = list(combinations(vacent, 3))",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "peekOfCode": "dy = [0, -1, 0, 1]\ndef simulate(lab, x, y):\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if lab[nx][ny] == 0:\n            lab[nx][ny] = 2\n            simulate(lab, nx, ny)\ncandidates = list(combinations(vacent, 3))\nanswer = 0",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "documentation": {}
    },
    {
        "label": "candidates",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "peekOfCode": "candidates = list(combinations(vacent, 3))\nanswer = 0\nfor walls in candidates:\n    new_lab = deepcopy(lab)\n    for x, y in walls:\n        new_lab[x][y] = 1\n    for x, y in virus:\n        simulate(new_lab, x, y)\n    answer = max(answer, check(new_lab))\nprint(answer)",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "peekOfCode": "answer = 0\nfor walls in candidates:\n    new_lab = deepcopy(lab)\n    for x, y in walls:\n        new_lab[x][y] = 1\n    for x, y in virus:\n        simulate(new_lab, x, y)\n    answer = max(answer, check(new_lab))\nprint(answer)",
        "detail": "Coding_test.Chapter 13. DFS-BFS.16-4",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-1",
        "peekOfCode": "graph = []\ndata = []\nfor i in range(n):\n    graph.append(list(map(int, sys.stdin.readline().split())))\n    for j in range(n):\n        if graph[i][j] != 0:\n            data.append((graph[i][j], 0, i, j))\ndata.sort()\nq = deque(data)\ntarget_s, target_x, target_y = map(int, input().split())",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-1",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-1",
        "peekOfCode": "data = []\nfor i in range(n):\n    graph.append(list(map(int, sys.stdin.readline().split())))\n    for j in range(n):\n        if graph[i][j] != 0:\n            data.append((graph[i][j], 0, i, j))\ndata.sort()\nq = deque(data)\ntarget_s, target_x, target_y = map(int, input().split())\ndx = [-1, 0, 1, 0]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-1",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-1",
        "peekOfCode": "q = deque(data)\ntarget_s, target_x, target_y = map(int, input().split())\ndx = [-1, 0, 1, 0]\ndy = [0, 1, 0, -1]\nwhile q:\n    virus, s, x, y = q.popleft()\n    if s == target_s:\n        break\n    for i in range(4):\n        nx = x + dx[i]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-1",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-1",
        "peekOfCode": "dx = [-1, 0, 1, 0]\ndy = [0, 1, 0, -1]\nwhile q:\n    virus, s, x, y = q.popleft()\n    if s == target_s:\n        break\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < n:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-1",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-1",
        "peekOfCode": "dy = [0, 1, 0, -1]\nwhile q:\n    virus, s, x, y = q.popleft()\n    if s == target_s:\n        break\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < n:\n            if graph[nx][ny] == 0:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-1",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-2",
        "peekOfCode": "data = []\nstart = []\nfor i in range(n):\n    data.append(list(map(int, input().split())))\n    for j in range(n):\n        if data[i][j] != 0:\n            start.append((data[i][j], 0, i, j))\nstart.sort()\ntarget_s, target_x, target_y = map(int, input().split())\ndx = [-1, 0, 1, 0]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-2",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-2",
        "peekOfCode": "start = []\nfor i in range(n):\n    data.append(list(map(int, input().split())))\n    for j in range(n):\n        if data[i][j] != 0:\n            start.append((data[i][j], 0, i, j))\nstart.sort()\ntarget_s, target_x, target_y = map(int, input().split())\ndx = [-1, 0, 1, 0]\ndy = [0, 1, 0, -1]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-2",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-2",
        "peekOfCode": "dx = [-1, 0, 1, 0]\ndy = [0, 1, 0, -1]\nq = deque(start)\nwhile q:\n    virus, s, x, y = q.popleft()\n    if s == target_s:\n        break\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-2",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-2",
        "peekOfCode": "dy = [0, 1, 0, -1]\nq = deque(start)\nwhile q:\n    virus, s, x, y = q.popleft()\n    if s == target_s:\n        break\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < n:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-2",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-2",
        "peekOfCode": "q = deque(start)\nwhile q:\n    virus, s, x, y = q.popleft()\n    if s == target_s:\n        break\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < n:\n            if data[nx][ny] == 0:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-2",
        "documentation": {}
    },
    {
        "label": "lab",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-3-best",
        "peekOfCode": "lab = []\nstart = []\nfor i in range(n):\n    lab.append(list(map(int, input().split())))\n    for j in range(n):\n        if lab[i][j] != 0:\n            start.append([lab[i][j], 0, i, j])\nstart.sort()\ntarget_s, target_x, target_y = map(int, input().split())\ndx = [-1, 0, 1, 0]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-3-best",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-3-best",
        "peekOfCode": "start = []\nfor i in range(n):\n    lab.append(list(map(int, input().split())))\n    for j in range(n):\n        if lab[i][j] != 0:\n            start.append([lab[i][j], 0, i, j])\nstart.sort()\ntarget_s, target_x, target_y = map(int, input().split())\ndx = [-1, 0, 1, 0]\ndy = [0, -1, 0, 1]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-3-best",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-3-best",
        "peekOfCode": "dx = [-1, 0, 1, 0]\ndy = [0, -1, 0, 1]\nq = deque(start)\nwhile q:\n    virus, s, x, y = q.popleft()\n    if s == target_s:\n        break\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-3-best",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-3-best",
        "peekOfCode": "dy = [0, -1, 0, 1]\nq = deque(start)\nwhile q:\n    virus, s, x, y = q.popleft()\n    if s == target_s:\n        break\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < n and lab[nx][ny] == 0:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-3-best",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-3-best",
        "peekOfCode": "q = deque(start)\nwhile q:\n    virus, s, x, y = q.popleft()\n    if s == target_s:\n        break\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < n and lab[nx][ny] == 0:\n            lab[nx][ny] = virus",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-3-best",
        "documentation": {}
    },
    {
        "label": "lab",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-4",
        "peekOfCode": "lab = []\nvirus = []\nfor x in range(n):\n    row = list(map(int, input().split()))\n    lab.append(row)\n    for y in range(n):\n        if row[y] != 0:\n            virus.append([row[y], 0, x, y])\nvirus.sort()\ntarget_s, target_x, target_y = map(int, input().split())",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-4",
        "documentation": {}
    },
    {
        "label": "virus",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-4",
        "peekOfCode": "virus = []\nfor x in range(n):\n    row = list(map(int, input().split()))\n    lab.append(row)\n    for y in range(n):\n        if row[y] != 0:\n            virus.append([row[y], 0, x, y])\nvirus.sort()\ntarget_s, target_x, target_y = map(int, input().split())\ndx = [-1, 0, 1, 0]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-4",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-4",
        "peekOfCode": "dx = [-1, 0, 1, 0]\ndy = [0, -1, 0, 1]\nqueue = deque(virus)\nwhile True:\n    v, s, x, y = queue.popleft()\n    if s == target_s:\n        break\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-4",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-4",
        "peekOfCode": "dy = [0, -1, 0, 1]\nqueue = deque(virus)\nwhile True:\n    v, s, x, y = queue.popleft()\n    if s == target_s:\n        break\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < n and lab[nx][ny] == 0:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-4",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.17-4",
        "description": "Coding_test.Chapter 13. DFS-BFS.17-4",
        "peekOfCode": "queue = deque(virus)\nwhile True:\n    v, s, x, y = queue.popleft()\n    if s == target_s:\n        break\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < n and 0 <= ny < n and lab[nx][ny] == 0:\n            lab[nx][ny] = s",
        "detail": "Coding_test.Chapter 13. DFS-BFS.17-4",
        "documentation": {}
    },
    {
        "label": "balance_index",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.18-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.18-1",
        "peekOfCode": "def balance_index(p):\n    count = 0\n    for i in range(len(p)):\n        if p[i] == \"(\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            return i\ndef check_proper(p):",
        "detail": "Coding_test.Chapter 13. DFS-BFS.18-1",
        "documentation": {}
    },
    {
        "label": "check_proper",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.18-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.18-1",
        "peekOfCode": "def check_proper(p):\n    count = 0\n    for i in p:\n        if i == \"(\":\n            count += 1\n        else:\n            if count == 0:\n                return False\n            count -= 1\n    return True",
        "detail": "Coding_test.Chapter 13. DFS-BFS.18-1",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.18-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.18-1",
        "peekOfCode": "def solution(p):\n    if p == \"\":\n        return \"\"\n    index = balance_index(p)\n    u = p[:index + 1]\n    v = p[index + 1:]\n    if check_proper(u):\n        answer = u + solution(v)\n    else:\n        answer = \"(\"",
        "detail": "Coding_test.Chapter 13. DFS-BFS.18-1",
        "documentation": {}
    },
    {
        "label": "balance_index",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.18-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.18-2",
        "peekOfCode": "def balance_index(p):\n    count = 0 \n    for i in range(len(p)):\n        if p[i] == \"(\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            return i\ndef check_proper(p):",
        "detail": "Coding_test.Chapter 13. DFS-BFS.18-2",
        "documentation": {}
    },
    {
        "label": "check_proper",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.18-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.18-2",
        "peekOfCode": "def check_proper(p):\n    count = 0\n    for i in p:\n        if i == \"(\":\n            count += 1\n        else:\n            if count == 0:\n                return False\n            count -= 1\n    return True",
        "detail": "Coding_test.Chapter 13. DFS-BFS.18-2",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.18-2",
        "description": "Coding_test.Chapter 13. DFS-BFS.18-2",
        "peekOfCode": "def solution(p):\n    if p == \"\":\n        return \"\"\n    index = balance_index(p)\n    u = p[:index + 1]\n    v = p[index + 1:]\n    if check_proper(u):\n        answer = u + solution(v)\n    else:\n        answer = \"(\"",
        "detail": "Coding_test.Chapter 13. DFS-BFS.18-2",
        "documentation": {}
    },
    {
        "label": "balance_index",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.18-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.18-3-best",
        "peekOfCode": "def balance_index(p):\n    count = 0\n    for i in range(len(p)):\n        if p[i] == \"(\":\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            return i\ndef check_proper(p):",
        "detail": "Coding_test.Chapter 13. DFS-BFS.18-3-best",
        "documentation": {}
    },
    {
        "label": "check_proper",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.18-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.18-3-best",
        "peekOfCode": "def check_proper(p):\n    count = 0\n    for i in range(len(p)):\n        if p[i] == \"(\":\n            count += 1\n        else:\n            if count == 0:\n                return False\n            count -= 1\n    return True",
        "detail": "Coding_test.Chapter 13. DFS-BFS.18-3-best",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.18-3-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.18-3-best",
        "peekOfCode": "def solution(p):\n    if p == \"\":\n        return \"\"\n    index = balance_index(p)\n    u = p[:index+1]\n    v = p[index+1:]\n    if check_proper(u):\n        answer = u + solution(v)\n    else:\n        answer = \"(\"",
        "detail": "Coding_test.Chapter 13. DFS-BFS.18-3-best",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.19-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.19-1",
        "peekOfCode": "def dfs(i, now):\n    global min_value, max_value, add, sub, mul, div\n    if i == n:\n        min_value = min(min_value, now)\n        max_value = max(max_value, now)\n    else:\n        if add > 0:\n            add -= 1\n            dfs(i+1, now + data[i])\n            add += 1",
        "detail": "Coding_test.Chapter 13. DFS-BFS.19-1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.19-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.19-1",
        "peekOfCode": "n = int(input())\ndata = list(map(int, sys.stdin.readline().split()))\nadd, sub, mul, div = map(int, sys.stdin.readline().split())\nmin_value = 1e9\nmax_value = -1e9\ndef dfs(i, now):\n    global min_value, max_value, add, sub, mul, div\n    if i == n:\n        min_value = min(min_value, now)\n        max_value = max(max_value, now)",
        "detail": "Coding_test.Chapter 13. DFS-BFS.19-1",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.19-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.19-1",
        "peekOfCode": "data = list(map(int, sys.stdin.readline().split()))\nadd, sub, mul, div = map(int, sys.stdin.readline().split())\nmin_value = 1e9\nmax_value = -1e9\ndef dfs(i, now):\n    global min_value, max_value, add, sub, mul, div\n    if i == n:\n        min_value = min(min_value, now)\n        max_value = max(max_value, now)\n    else:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.19-1",
        "documentation": {}
    },
    {
        "label": "min_value",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.19-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.19-1",
        "peekOfCode": "min_value = 1e9\nmax_value = -1e9\ndef dfs(i, now):\n    global min_value, max_value, add, sub, mul, div\n    if i == n:\n        min_value = min(min_value, now)\n        max_value = max(max_value, now)\n    else:\n        if add > 0:\n            add -= 1",
        "detail": "Coding_test.Chapter 13. DFS-BFS.19-1",
        "documentation": {}
    },
    {
        "label": "max_value",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.19-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.19-1",
        "peekOfCode": "max_value = -1e9\ndef dfs(i, now):\n    global min_value, max_value, add, sub, mul, div\n    if i == n:\n        min_value = min(min_value, now)\n        max_value = max(max_value, now)\n    else:\n        if add > 0:\n            add -= 1\n            dfs(i+1, now + data[i])",
        "detail": "Coding_test.Chapter 13. DFS-BFS.19-1",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "peekOfCode": "def dfs(i, now):\n    global min_value, max_value, add, sub, mul, div\n    if i == n:\n        min_value = min(min_value, now)\n        max_value = max(max_value, now)\n    else:\n        if add > 0:\n            add -= 1\n            dfs(i+1, now+a[i])\n            add += 1",
        "detail": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "peekOfCode": "input = sys.stdin.readline\nn = int(input())\na = list(map(int, input().split()))\nadd, sub, mul, div = map(int,input().split())\nmin_value = 1e9\nmax_value = -1e9\ndef dfs(i, now):\n    global min_value, max_value, add, sub, mul, div\n    if i == n:\n        min_value = min(min_value, now)",
        "detail": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "peekOfCode": "n = int(input())\na = list(map(int, input().split()))\nadd, sub, mul, div = map(int,input().split())\nmin_value = 1e9\nmax_value = -1e9\ndef dfs(i, now):\n    global min_value, max_value, add, sub, mul, div\n    if i == n:\n        min_value = min(min_value, now)\n        max_value = max(max_value, now)",
        "detail": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "peekOfCode": "a = list(map(int, input().split()))\nadd, sub, mul, div = map(int,input().split())\nmin_value = 1e9\nmax_value = -1e9\ndef dfs(i, now):\n    global min_value, max_value, add, sub, mul, div\n    if i == n:\n        min_value = min(min_value, now)\n        max_value = max(max_value, now)\n    else:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "documentation": {}
    },
    {
        "label": "min_value",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "peekOfCode": "min_value = 1e9\nmax_value = -1e9\ndef dfs(i, now):\n    global min_value, max_value, add, sub, mul, div\n    if i == n:\n        min_value = min(min_value, now)\n        max_value = max(max_value, now)\n    else:\n        if add > 0:\n            add -= 1",
        "detail": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "documentation": {}
    },
    {
        "label": "max_value",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "peekOfCode": "max_value = -1e9\ndef dfs(i, now):\n    global min_value, max_value, add, sub, mul, div\n    if i == n:\n        min_value = min(min_value, now)\n        max_value = max(max_value, now)\n    else:\n        if add > 0:\n            add -= 1\n            dfs(i+1, now+a[i])",
        "detail": "Coding_test.Chapter 13. DFS-BFS.19-2-best",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.19-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.19-3",
        "peekOfCode": "def dfs(i, now):\n    global add, sub, mul, div, min_value, max_value\n    if i == n:\n        min_value = min(min_value,now)\n        max_value = max(max_value, now)\n    if add > 0:\n        add -= 1\n        dfs(i+1, now+a[i])\n        add += 1\n    if sub > 0:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.19-3",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.19-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.19-3",
        "peekOfCode": "n = int(input())\na = list(map(int, input().split()))\nadd, sub, mul, div = map(int, input().split())\nmin_value = 1e9\nmax_value = -1e9\ndef dfs(i, now):\n    global add, sub, mul, div, min_value, max_value\n    if i == n:\n        min_value = min(min_value,now)\n        max_value = max(max_value, now)",
        "detail": "Coding_test.Chapter 13. DFS-BFS.19-3",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.19-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.19-3",
        "peekOfCode": "a = list(map(int, input().split()))\nadd, sub, mul, div = map(int, input().split())\nmin_value = 1e9\nmax_value = -1e9\ndef dfs(i, now):\n    global add, sub, mul, div, min_value, max_value\n    if i == n:\n        min_value = min(min_value,now)\n        max_value = max(max_value, now)\n    if add > 0:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.19-3",
        "documentation": {}
    },
    {
        "label": "min_value",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.19-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.19-3",
        "peekOfCode": "min_value = 1e9\nmax_value = -1e9\ndef dfs(i, now):\n    global add, sub, mul, div, min_value, max_value\n    if i == n:\n        min_value = min(min_value,now)\n        max_value = max(max_value, now)\n    if add > 0:\n        add -= 1\n        dfs(i+1, now+a[i])",
        "detail": "Coding_test.Chapter 13. DFS-BFS.19-3",
        "documentation": {}
    },
    {
        "label": "max_value",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.19-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.19-3",
        "peekOfCode": "max_value = -1e9\ndef dfs(i, now):\n    global add, sub, mul, div, min_value, max_value\n    if i == n:\n        min_value = min(min_value,now)\n        max_value = max(max_value, now)\n    if add > 0:\n        add -= 1\n        dfs(i+1, now+a[i])\n        add += 1",
        "detail": "Coding_test.Chapter 13. DFS-BFS.19-3",
        "documentation": {}
    },
    {
        "label": "watch",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "peekOfCode": "def watch(x, y, direction):\n    if direction == 0:\n        while x >= 0:\n            if board[y][x] == 'S':\n                return True\n            if board[y][x] == 'O':\n                return False\n            x -= 1\n    if direction == 1:\n        while x < n:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "documentation": {}
    },
    {
        "label": "process",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "peekOfCode": "def process(x,y):\n    for y,x in teachers:\n        for i in range(4):\n            if watch(x,y,i):\n                return True\n    return False\nfind = False\nfor data in combinations(spaces, 3):\n    for y,x in data:\n        board[y][x] = 'O'",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "peekOfCode": "n = int(input())\nteachers = []\nspaces = []\nboard = []\nfor i in range(n):\n    board.append(list(input().split()))\n    for j in range(n):\n        if board[i][j] == 'T':\n            teachers.append((i,j))\n        if board[i][j] == 'X':",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "documentation": {}
    },
    {
        "label": "teachers",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "peekOfCode": "teachers = []\nspaces = []\nboard = []\nfor i in range(n):\n    board.append(list(input().split()))\n    for j in range(n):\n        if board[i][j] == 'T':\n            teachers.append((i,j))\n        if board[i][j] == 'X':\n            spaces.append((i,j))",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "documentation": {}
    },
    {
        "label": "spaces",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "peekOfCode": "spaces = []\nboard = []\nfor i in range(n):\n    board.append(list(input().split()))\n    for j in range(n):\n        if board[i][j] == 'T':\n            teachers.append((i,j))\n        if board[i][j] == 'X':\n            spaces.append((i,j))\ndef watch(x, y, direction):",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "documentation": {}
    },
    {
        "label": "board",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "peekOfCode": "board = []\nfor i in range(n):\n    board.append(list(input().split()))\n    for j in range(n):\n        if board[i][j] == 'T':\n            teachers.append((i,j))\n        if board[i][j] == 'X':\n            spaces.append((i,j))\ndef watch(x, y, direction):\n    if direction == 0:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "documentation": {}
    },
    {
        "label": "find",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "peekOfCode": "find = False\nfor data in combinations(spaces, 3):\n    for y,x in data:\n        board[y][x] = 'O'\n    if not process(x,y):\n        find = True\n        break\n    for y,x in data:\n        board[y][x] = 'X'\nif find:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-1",
        "documentation": {}
    },
    {
        "label": "watch",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "peekOfCode": "def watch(direction,x,y,temp): # up down left right\n    if direction == 0:\n        while x >= 0:\n            if temp[x][y] == 'S':\n                return True\n            elif temp[x][y] == \"O\":\n                return False\n            x -= 1\n    if direction == 1:\n        while x < n:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "documentation": {}
    },
    {
        "label": "process",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "peekOfCode": "def process(temp):\n    for x,y in teachers:\n        for i in range(4):\n            if watch(i,x,y,temp):\n                return True\n    return False\nresult = False\nfor candidate in combinations(candidates,3):\n    temp = copy.deepcopy(hall)\n    for c in list(candidate):",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "peekOfCode": "n = int(input())\nhall = []\nteachers = []\ncandidates = []\nfor i in range(n):\n    hall.append(list(input().split()))\n    for j in range(n):\n        if hall[i][j] == 'X':\n            candidates.append((i,j))\n        if hall[i][j] == \"T\":",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "documentation": {}
    },
    {
        "label": "hall",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "peekOfCode": "hall = []\nteachers = []\ncandidates = []\nfor i in range(n):\n    hall.append(list(input().split()))\n    for j in range(n):\n        if hall[i][j] == 'X':\n            candidates.append((i,j))\n        if hall[i][j] == \"T\":\n            teachers.append((i,j))",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "documentation": {}
    },
    {
        "label": "teachers",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "peekOfCode": "teachers = []\ncandidates = []\nfor i in range(n):\n    hall.append(list(input().split()))\n    for j in range(n):\n        if hall[i][j] == 'X':\n            candidates.append((i,j))\n        if hall[i][j] == \"T\":\n            teachers.append((i,j))\ndef watch(direction,x,y,temp): # up down left right",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "documentation": {}
    },
    {
        "label": "candidates",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "peekOfCode": "candidates = []\nfor i in range(n):\n    hall.append(list(input().split()))\n    for j in range(n):\n        if hall[i][j] == 'X':\n            candidates.append((i,j))\n        if hall[i][j] == \"T\":\n            teachers.append((i,j))\ndef watch(direction,x,y,temp): # up down left right\n    if direction == 0:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "peekOfCode": "result = False\nfor candidate in combinations(candidates,3):\n    temp = copy.deepcopy(hall)\n    for c in list(candidate):\n        temp[c[0]][c[1]] = 'O'\n        if not process(temp):\n            result = True\n            break\nif result:\n    print(\"YES\")",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-2-best",
        "documentation": {}
    },
    {
        "label": "watch",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "peekOfCode": "def watch(x,y,i,temp): # i as direction\n    if i == 0: #상\n        while x >= 0:\n            if temp[x][y] == 'S':\n                return True\n            elif temp[x][y] == 'O':\n                return False\n            x -= 1\n    if i == 1: #하\n        while x < n:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "documentation": {}
    },
    {
        "label": "process",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "peekOfCode": "def process(hall):\n    for x,y in teachers:\n        for i in range(4):\n            if watch(x,y,i,hall):\n                return True\n    return False\nresult = False\nfor candidate in list(combinations(candidates, 3)):\n    temp = deepcopy(hall)\n    for c in list(candidate):",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "peekOfCode": "n = int(input())\nhall = []\nteachers = []\ncandidates = []\nfor i in range(n):\n    hall.append(list(map(int, input().split())))\n    for j in range(n):\n        if hall[i][j] == 'X':\n            candidates.append((i,j))\n        if hall[i][j] == 'T':",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "documentation": {}
    },
    {
        "label": "hall",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "peekOfCode": "hall = []\nteachers = []\ncandidates = []\nfor i in range(n):\n    hall.append(list(map(int, input().split())))\n    for j in range(n):\n        if hall[i][j] == 'X':\n            candidates.append((i,j))\n        if hall[i][j] == 'T':\n            teachers.append((i,j))",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "documentation": {}
    },
    {
        "label": "teachers",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "peekOfCode": "teachers = []\ncandidates = []\nfor i in range(n):\n    hall.append(list(map(int, input().split())))\n    for j in range(n):\n        if hall[i][j] == 'X':\n            candidates.append((i,j))\n        if hall[i][j] == 'T':\n            teachers.append((i,j))\ndef watch(x,y,i,temp): # i as direction",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "documentation": {}
    },
    {
        "label": "candidates",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "peekOfCode": "candidates = []\nfor i in range(n):\n    hall.append(list(map(int, input().split())))\n    for j in range(n):\n        if hall[i][j] == 'X':\n            candidates.append((i,j))\n        if hall[i][j] == 'T':\n            teachers.append((i,j))\ndef watch(x,y,i,temp): # i as direction\n    if i == 0: #상",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "peekOfCode": "result = False\nfor candidate in list(combinations(candidates, 3)):\n    temp = deepcopy(hall)\n    for c in list(candidate):\n        temp[c[0]][c[1]] = 'O'\n    if not process(temp):\n        result = True\n        break\nif result:\n    print(\"YES\")",
        "detail": "Coding_test.Chapter 13. DFS-BFS.20-3",
        "documentation": {}
    },
    {
        "label": "process",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "peekOfCode": "def process(x,y,index): # 인구이동\n    united = []\n    united.append((x,y))\n    q = deque()\n    q.append((x,y))\n    union[x][y] = index\n    summary = graph[x][y]\n    count = 1\n    while q:\n        x,y = q.popleft()",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "documentation": {}
    },
    {
        "label": "n,l,r",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "peekOfCode": "n,l,r = map(int,input().split())\ngraph = []\nfor _ in range(n):\n    graph.append(list(map(int, input().split())))\ndx = [-1,0,1,0]\ndy = [0,1,0,-1]\nresult = 0\ndef process(x,y,index): # 인구이동\n    united = []\n    united.append((x,y))",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "peekOfCode": "graph = []\nfor _ in range(n):\n    graph.append(list(map(int, input().split())))\ndx = [-1,0,1,0]\ndy = [0,1,0,-1]\nresult = 0\ndef process(x,y,index): # 인구이동\n    united = []\n    united.append((x,y))\n    q = deque()",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "peekOfCode": "dx = [-1,0,1,0]\ndy = [0,1,0,-1]\nresult = 0\ndef process(x,y,index): # 인구이동\n    united = []\n    united.append((x,y))\n    q = deque()\n    q.append((x,y))\n    union[x][y] = index\n    summary = graph[x][y]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "peekOfCode": "dy = [0,1,0,-1]\nresult = 0\ndef process(x,y,index): # 인구이동\n    united = []\n    united.append((x,y))\n    q = deque()\n    q.append((x,y))\n    union[x][y] = index\n    summary = graph[x][y]\n    count = 1",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "peekOfCode": "result = 0\ndef process(x,y,index): # 인구이동\n    united = []\n    united.append((x,y))\n    q = deque()\n    q.append((x,y))\n    union[x][y] = index\n    summary = graph[x][y]\n    count = 1\n    while q:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "documentation": {}
    },
    {
        "label": "total_count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "peekOfCode": "total_count = 0\nwhile True:\n    union = [[-1] * n for _ in range(n)]\n    index = 0\n    for i in range(n):\n        for j in range(n):\n            if union[i][j] == -1: # if not union\n                process(i, j, index)\n                index += 1\n    if index == n * n:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-1",
        "documentation": {}
    },
    {
        "label": "check_union",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "peekOfCode": "def check_union(x,y,index):\n    united = []\n    united.append((x,y))\n    q = deque(united)\n    q.append((x,y))\n    union[x][y]=index\n    summary = graph[x][y]\n    count = 1\n    while q:\n        x,y = q.popleft()",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "documentation": {}
    },
    {
        "label": "n,l,r",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "peekOfCode": "n,l,r = map(int ,input().split())\ngraph = []\nfor _ in range(n):\n    graph.append(list(map(int, input().split())))\ndx = [-1,0,1,0]\ndy = [1,0,-1,0]\ndef check_union(x,y,index):\n    united = []\n    united.append((x,y))\n    q = deque(united)",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "peekOfCode": "graph = []\nfor _ in range(n):\n    graph.append(list(map(int, input().split())))\ndx = [-1,0,1,0]\ndy = [1,0,-1,0]\ndef check_union(x,y,index):\n    united = []\n    united.append((x,y))\n    q = deque(united)\n    q.append((x,y))",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "peekOfCode": "dx = [-1,0,1,0]\ndy = [1,0,-1,0]\ndef check_union(x,y,index):\n    united = []\n    united.append((x,y))\n    q = deque(united)\n    q.append((x,y))\n    union[x][y]=index\n    summary = graph[x][y]\n    count = 1",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "peekOfCode": "dy = [1,0,-1,0]\ndef check_union(x,y,index):\n    united = []\n    united.append((x,y))\n    q = deque(united)\n    q.append((x,y))\n    union[x][y]=index\n    summary = graph[x][y]\n    count = 1\n    while q:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "documentation": {}
    },
    {
        "label": "total_count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "peekOfCode": "total_count = 0\nwhile True:\n    union = [[-1]*n for _ in range(n)]\n    index = 0\n    for i in range(n):\n        for j in range(n):\n            if union[i][j] == -1:\n                check_union(i,j,index)\n                index += 1\n        if index == n * n:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-2-best",
        "documentation": {}
    },
    {
        "label": "check_union",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "peekOfCode": "def check_union(x,y,index,union):\n    united = []\n    united.append((x,y))\n    q = deque(united)\n    q.append((x,y))\n    union[x][y] = index\n    summary=a[x][y]\n    count = 1\n    while q:\n        x,y = q.popleft()",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "documentation": {}
    },
    {
        "label": "n,l,r",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "peekOfCode": "n,l,r = map(int, input().split())\na = []\nfor _ in range(n):\n    a.append(list(map(int, input().split())))\ndx = [-1,0,1,0]\ndy = [0,-1,0,1]\ndef check_union(x,y,index,union):\n    united = []\n    united.append((x,y))\n    q = deque(united)",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "peekOfCode": "a = []\nfor _ in range(n):\n    a.append(list(map(int, input().split())))\ndx = [-1,0,1,0]\ndy = [0,-1,0,1]\ndef check_union(x,y,index,union):\n    united = []\n    united.append((x,y))\n    q = deque(united)\n    q.append((x,y))",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "peekOfCode": "dx = [-1,0,1,0]\ndy = [0,-1,0,1]\ndef check_union(x,y,index,union):\n    united = []\n    united.append((x,y))\n    q = deque(united)\n    q.append((x,y))\n    union[x][y] = index\n    summary=a[x][y]\n    count = 1",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "peekOfCode": "dy = [0,-1,0,1]\ndef check_union(x,y,index,union):\n    united = []\n    united.append((x,y))\n    q = deque(united)\n    q.append((x,y))\n    union[x][y] = index\n    summary=a[x][y]\n    count = 1\n    while q:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "documentation": {}
    },
    {
        "label": "total_count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "peekOfCode": "total_count = 0\nwhile True:\n    union = [[-1]*n for _ in range(n)]\n    index = 0\n    for i in range(n):\n        for j in range(n):\n            if union[i][j] == -1:\n                check_union(i,j,index,union)\n                index += 1\n    if index == n*n:",
        "detail": "Coding_test.Chapter 13. DFS-BFS.21-3",
        "documentation": {}
    },
    {
        "label": "get_next_pos",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.22-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.22-2-best",
        "peekOfCode": "def get_next_pos(pos, board):\n    next_pos = []\n    pos = list(pos)\n    pos1_x, pos1_y, pos2_x, pos2_y = pos[0][0], pos[0][1], pos[1][0], pos[1][1]\n    dx = [-1,1,0,0]\n    dy = [0,0,-1,1]\n    for i in range(4): #translate\n        pos1_next_x = pos1_x + dx[i]\n        pos1_next_y = pos1_y + dy[i]\n        pos2_next_x = pos2_x + dx[i]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.22-2-best",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.22-2-best",
        "description": "Coding_test.Chapter 13. DFS-BFS.22-2-best",
        "peekOfCode": "def solution(board):\n    #initialize\n    n = len(board)\n    new_board = [[1] * (n+2) for _ in range(n+2)]\n    for i in range(n):\n        for j in range(n):\n            new_board[i+1][j+1] = board[i][j]\n    q = deque()\n    visited = []\n    pos = {(1,1),(1,2)}",
        "detail": "Coding_test.Chapter 13. DFS-BFS.22-2-best",
        "documentation": {}
    },
    {
        "label": "get_next_pos",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.22-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.22-3",
        "peekOfCode": "def get_next_pos(pos, board):\n    next_pos=[]\n    pos = list(pos)\n    pos1_x, pos1_y, pos2_x, pos2_y = pos[0][0], pos[0][1], pos[1][0], pos[1][1]\n    dx = [-1,0,1,0]\n    dy = [0,-1,0,1]\n    for i in range(4):\n        pos1_next_x = pos1_x + dx[i]\n        pos1_next_y = pos1_y + dy[i]\n        pos2_next_x = pos2_x + dx[i]",
        "detail": "Coding_test.Chapter 13. DFS-BFS.22-3",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 13. DFS-BFS.22-3",
        "description": "Coding_test.Chapter 13. DFS-BFS.22-3",
        "peekOfCode": "def solution(board):\n    #initialize\n    n = len(board)\n    new_board = [[1]*(n+2) for _ in range(n+2)]\n    for i in range(n):\n        for j in range(n):\n            new_board[i+1][j+1] = board[i][j]\n    q = deque()\n    visited = []\n    pos = {(1,1),(1,2)}",
        "detail": "Coding_test.Chapter 13. DFS-BFS.22-3",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-1",
        "description": "Coding_test.Chapter 14. 정렬(完).23-1",
        "peekOfCode": "n = int(input())\nscores = {}\nfor _ in range(n):\n    name, k, e, m = sys.stdin.readline().split()\n    scores[name] = [int(k), int(e), int(m)]\nscores_list = sorted(scores.items(), key=lambda item: item[0])\nscores_list = sorted(scores_list, key=lambda x: x[1][2], reverse=True)\nscores_list = sorted(scores_list, key=lambda x: x[1][1])\nscores_list = sorted(scores_list, key=lambda x: x[1][0], reverse=True)\nfor info in scores_list:",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-1",
        "documentation": {}
    },
    {
        "label": "scores",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-1",
        "description": "Coding_test.Chapter 14. 정렬(完).23-1",
        "peekOfCode": "scores = {}\nfor _ in range(n):\n    name, k, e, m = sys.stdin.readline().split()\n    scores[name] = [int(k), int(e), int(m)]\nscores_list = sorted(scores.items(), key=lambda item: item[0])\nscores_list = sorted(scores_list, key=lambda x: x[1][2], reverse=True)\nscores_list = sorted(scores_list, key=lambda x: x[1][1])\nscores_list = sorted(scores_list, key=lambda x: x[1][0], reverse=True)\nfor info in scores_list:\n    print(info[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-1",
        "documentation": {}
    },
    {
        "label": "scores_list",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-1",
        "description": "Coding_test.Chapter 14. 정렬(完).23-1",
        "peekOfCode": "scores_list = sorted(scores.items(), key=lambda item: item[0])\nscores_list = sorted(scores_list, key=lambda x: x[1][2], reverse=True)\nscores_list = sorted(scores_list, key=lambda x: x[1][1])\nscores_list = sorted(scores_list, key=lambda x: x[1][0], reverse=True)\nfor info in scores_list:\n    print(info[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-1",
        "documentation": {}
    },
    {
        "label": "scores_list",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-1",
        "description": "Coding_test.Chapter 14. 정렬(完).23-1",
        "peekOfCode": "scores_list = sorted(scores_list, key=lambda x: x[1][2], reverse=True)\nscores_list = sorted(scores_list, key=lambda x: x[1][1])\nscores_list = sorted(scores_list, key=lambda x: x[1][0], reverse=True)\nfor info in scores_list:\n    print(info[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-1",
        "documentation": {}
    },
    {
        "label": "scores_list",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-1",
        "description": "Coding_test.Chapter 14. 정렬(完).23-1",
        "peekOfCode": "scores_list = sorted(scores_list, key=lambda x: x[1][1])\nscores_list = sorted(scores_list, key=lambda x: x[1][0], reverse=True)\nfor info in scores_list:\n    print(info[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-1",
        "documentation": {}
    },
    {
        "label": "scores_list",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-1",
        "description": "Coding_test.Chapter 14. 정렬(完).23-1",
        "peekOfCode": "scores_list = sorted(scores_list, key=lambda x: x[1][0], reverse=True)\nfor info in scores_list:\n    print(info[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-1",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-2",
        "description": "Coding_test.Chapter 14. 정렬(完).23-2",
        "peekOfCode": "input = sys.stdin.readline\nn = int(input())\nstudent = []\nfor _ in range(n):\n    info = list(input().split())\n    student.append([info[0], int(info[1]), int(info[2]), int(info[3])])\nstudent_list = sorted(list(student), key=lambda x: x[0])\nstudent_list = sorted(student_list, key=lambda x: x[3], reverse=True)\nstudent_list = sorted(student_list, key=lambda x: x[2])\nstudent_list = sorted(student_list, key=lambda x: x[1], reverse=True)",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-2",
        "description": "Coding_test.Chapter 14. 정렬(完).23-2",
        "peekOfCode": "n = int(input())\nstudent = []\nfor _ in range(n):\n    info = list(input().split())\n    student.append([info[0], int(info[1]), int(info[2]), int(info[3])])\nstudent_list = sorted(list(student), key=lambda x: x[0])\nstudent_list = sorted(student_list, key=lambda x: x[3], reverse=True)\nstudent_list = sorted(student_list, key=lambda x: x[2])\nstudent_list = sorted(student_list, key=lambda x: x[1], reverse=True)\nfor student in student_list:",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-2",
        "documentation": {}
    },
    {
        "label": "student",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-2",
        "description": "Coding_test.Chapter 14. 정렬(完).23-2",
        "peekOfCode": "student = []\nfor _ in range(n):\n    info = list(input().split())\n    student.append([info[0], int(info[1]), int(info[2]), int(info[3])])\nstudent_list = sorted(list(student), key=lambda x: x[0])\nstudent_list = sorted(student_list, key=lambda x: x[3], reverse=True)\nstudent_list = sorted(student_list, key=lambda x: x[2])\nstudent_list = sorted(student_list, key=lambda x: x[1], reverse=True)\nfor student in student_list:\n    print(student[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-2",
        "documentation": {}
    },
    {
        "label": "student_list",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-2",
        "description": "Coding_test.Chapter 14. 정렬(完).23-2",
        "peekOfCode": "student_list = sorted(list(student), key=lambda x: x[0])\nstudent_list = sorted(student_list, key=lambda x: x[3], reverse=True)\nstudent_list = sorted(student_list, key=lambda x: x[2])\nstudent_list = sorted(student_list, key=lambda x: x[1], reverse=True)\nfor student in student_list:\n    print(student[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-2",
        "documentation": {}
    },
    {
        "label": "student_list",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-2",
        "description": "Coding_test.Chapter 14. 정렬(完).23-2",
        "peekOfCode": "student_list = sorted(student_list, key=lambda x: x[3], reverse=True)\nstudent_list = sorted(student_list, key=lambda x: x[2])\nstudent_list = sorted(student_list, key=lambda x: x[1], reverse=True)\nfor student in student_list:\n    print(student[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-2",
        "documentation": {}
    },
    {
        "label": "student_list",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-2",
        "description": "Coding_test.Chapter 14. 정렬(完).23-2",
        "peekOfCode": "student_list = sorted(student_list, key=lambda x: x[2])\nstudent_list = sorted(student_list, key=lambda x: x[1], reverse=True)\nfor student in student_list:\n    print(student[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-2",
        "documentation": {}
    },
    {
        "label": "student_list",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-2",
        "description": "Coding_test.Chapter 14. 정렬(完).23-2",
        "peekOfCode": "student_list = sorted(student_list, key=lambda x: x[1], reverse=True)\nfor student in student_list:\n    print(student[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "description": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "peekOfCode": "n = int(input())\ndata = []\nfor _ in range(n):\n    name, x, y, z = input().split()\n    data.append([name, int(x), int(y), int(z)])\ndata = sorted(data, key=lambda x: x[0])\ndata = sorted(data, key=lambda x: x[3], reverse=True)\ndata = sorted(data, key=lambda x: x[2])\ndata = sorted(data, key=lambda x: x[1], reverse=True)\nfor i in range(n):",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "description": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "peekOfCode": "data = []\nfor _ in range(n):\n    name, x, y, z = input().split()\n    data.append([name, int(x), int(y), int(z)])\ndata = sorted(data, key=lambda x: x[0])\ndata = sorted(data, key=lambda x: x[3], reverse=True)\ndata = sorted(data, key=lambda x: x[2])\ndata = sorted(data, key=lambda x: x[1], reverse=True)\nfor i in range(n):\n    print(data[i][0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "description": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "peekOfCode": "data = sorted(data, key=lambda x: x[0])\ndata = sorted(data, key=lambda x: x[3], reverse=True)\ndata = sorted(data, key=lambda x: x[2])\ndata = sorted(data, key=lambda x: x[1], reverse=True)\nfor i in range(n):\n    print(data[i][0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "description": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "peekOfCode": "data = sorted(data, key=lambda x: x[3], reverse=True)\ndata = sorted(data, key=lambda x: x[2])\ndata = sorted(data, key=lambda x: x[1], reverse=True)\nfor i in range(n):\n    print(data[i][0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "description": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "peekOfCode": "data = sorted(data, key=lambda x: x[2])\ndata = sorted(data, key=lambda x: x[1], reverse=True)\nfor i in range(n):\n    print(data[i][0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "description": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "peekOfCode": "data = sorted(data, key=lambda x: x[1], reverse=True)\nfor i in range(n):\n    print(data[i][0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-3-best",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-4",
        "description": "Coding_test.Chapter 14. 정렬(完).23-4",
        "peekOfCode": "n = int(input())\nstudents = []\nfor _ in range(n):\n    name, kor, eng, math = input().split()\n    students.append((name, int(kor), int(eng), int(math)))\nstudents = sorted(students, key=lambda x: x[0])\nstudents = sorted(students, key=lambda x: x[3], reverse=True)\nstudents = sorted(students, key=lambda x: x[2])\nstudents = sorted(students, key=lambda x: x[1], reverse=True)\nfor student in students:",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-4",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-4",
        "description": "Coding_test.Chapter 14. 정렬(完).23-4",
        "peekOfCode": "students = []\nfor _ in range(n):\n    name, kor, eng, math = input().split()\n    students.append((name, int(kor), int(eng), int(math)))\nstudents = sorted(students, key=lambda x: x[0])\nstudents = sorted(students, key=lambda x: x[3], reverse=True)\nstudents = sorted(students, key=lambda x: x[2])\nstudents = sorted(students, key=lambda x: x[1], reverse=True)\nfor student in students:\n    print(student[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-4",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-4",
        "description": "Coding_test.Chapter 14. 정렬(完).23-4",
        "peekOfCode": "students = sorted(students, key=lambda x: x[0])\nstudents = sorted(students, key=lambda x: x[3], reverse=True)\nstudents = sorted(students, key=lambda x: x[2])\nstudents = sorted(students, key=lambda x: x[1], reverse=True)\nfor student in students:\n    print(student[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-4",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-4",
        "description": "Coding_test.Chapter 14. 정렬(完).23-4",
        "peekOfCode": "students = sorted(students, key=lambda x: x[3], reverse=True)\nstudents = sorted(students, key=lambda x: x[2])\nstudents = sorted(students, key=lambda x: x[1], reverse=True)\nfor student in students:\n    print(student[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-4",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-4",
        "description": "Coding_test.Chapter 14. 정렬(完).23-4",
        "peekOfCode": "students = sorted(students, key=lambda x: x[2])\nstudents = sorted(students, key=lambda x: x[1], reverse=True)\nfor student in students:\n    print(student[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-4",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-4",
        "description": "Coding_test.Chapter 14. 정렬(完).23-4",
        "peekOfCode": "students = sorted(students, key=lambda x: x[1], reverse=True)\nfor student in students:\n    print(student[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-4",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-5",
        "description": "Coding_test.Chapter 14. 정렬(完).23-5",
        "peekOfCode": "n = int(input())\nstudents = []\nfor _ in range(n):\n    name, kor, eng, math = input().split()\n    students.append([name, int(kor), int(eng), int(math)])\nstudents = sorted(students, key=lambda x: x[0])\nstudents = sorted(students, key=lambda x: x[3], reverse=True)\nstudents = sorted(students, key=lambda x: x[2])\nstudents = sorted(students, key=lambda x: x[1], reverse=True)\nfor student in students:",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-5",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-5",
        "description": "Coding_test.Chapter 14. 정렬(完).23-5",
        "peekOfCode": "students = []\nfor _ in range(n):\n    name, kor, eng, math = input().split()\n    students.append([name, int(kor), int(eng), int(math)])\nstudents = sorted(students, key=lambda x: x[0])\nstudents = sorted(students, key=lambda x: x[3], reverse=True)\nstudents = sorted(students, key=lambda x: x[2])\nstudents = sorted(students, key=lambda x: x[1], reverse=True)\nfor student in students:\n    print(student[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-5",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-5",
        "description": "Coding_test.Chapter 14. 정렬(完).23-5",
        "peekOfCode": "students = sorted(students, key=lambda x: x[0])\nstudents = sorted(students, key=lambda x: x[3], reverse=True)\nstudents = sorted(students, key=lambda x: x[2])\nstudents = sorted(students, key=lambda x: x[1], reverse=True)\nfor student in students:\n    print(student[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-5",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-5",
        "description": "Coding_test.Chapter 14. 정렬(完).23-5",
        "peekOfCode": "students = sorted(students, key=lambda x: x[3], reverse=True)\nstudents = sorted(students, key=lambda x: x[2])\nstudents = sorted(students, key=lambda x: x[1], reverse=True)\nfor student in students:\n    print(student[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-5",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-5",
        "description": "Coding_test.Chapter 14. 정렬(完).23-5",
        "peekOfCode": "students = sorted(students, key=lambda x: x[2])\nstudents = sorted(students, key=lambda x: x[1], reverse=True)\nfor student in students:\n    print(student[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-5",
        "documentation": {}
    },
    {
        "label": "students",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).23-5",
        "description": "Coding_test.Chapter 14. 정렬(完).23-5",
        "peekOfCode": "students = sorted(students, key=lambda x: x[1], reverse=True)\nfor student in students:\n    print(student[0])",
        "detail": "Coding_test.Chapter 14. 정렬(完).23-5",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).24-1",
        "description": "Coding_test.Chapter 14. 정렬(完).24-1",
        "peekOfCode": "n = int(input())\nhome = map(int, input().split())\nhome = sorted(home)\nprint(home[(n - 1) // 2])",
        "detail": "Coding_test.Chapter 14. 정렬(完).24-1",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).24-1",
        "description": "Coding_test.Chapter 14. 정렬(完).24-1",
        "peekOfCode": "home = map(int, input().split())\nhome = sorted(home)\nprint(home[(n - 1) // 2])",
        "detail": "Coding_test.Chapter 14. 정렬(完).24-1",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).24-1",
        "description": "Coding_test.Chapter 14. 정렬(完).24-1",
        "peekOfCode": "home = sorted(home)\nprint(home[(n - 1) // 2])",
        "detail": "Coding_test.Chapter 14. 정렬(完).24-1",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).24-2",
        "description": "Coding_test.Chapter 14. 정렬(完).24-2",
        "peekOfCode": "input = sys.stdin.readline\nn = int(input())\ndata = list(map(int, input().split()))\ndata.sort()\nprint(data[(len(data) - 1) // 2])",
        "detail": "Coding_test.Chapter 14. 정렬(完).24-2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).24-2",
        "description": "Coding_test.Chapter 14. 정렬(完).24-2",
        "peekOfCode": "n = int(input())\ndata = list(map(int, input().split()))\ndata.sort()\nprint(data[(len(data) - 1) // 2])",
        "detail": "Coding_test.Chapter 14. 정렬(完).24-2",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).24-2",
        "description": "Coding_test.Chapter 14. 정렬(完).24-2",
        "peekOfCode": "data = list(map(int, input().split()))\ndata.sort()\nprint(data[(len(data) - 1) // 2])",
        "detail": "Coding_test.Chapter 14. 정렬(完).24-2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).24-3-best",
        "description": "Coding_test.Chapter 14. 정렬(完).24-3-best",
        "peekOfCode": "n = int(input())\narray = list(map(int, input().split()))\narray.sort()\nprint(array[(n - 1) // 2])",
        "detail": "Coding_test.Chapter 14. 정렬(完).24-3-best",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).24-3-best",
        "description": "Coding_test.Chapter 14. 정렬(完).24-3-best",
        "peekOfCode": "array = list(map(int, input().split()))\narray.sort()\nprint(array[(n - 1) // 2])",
        "detail": "Coding_test.Chapter 14. 정렬(完).24-3-best",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).24-4",
        "description": "Coding_test.Chapter 14. 정렬(完).24-4",
        "peekOfCode": "n = int(input())\nhouses = list(map(int, input().split()))\nhouses.sort()\nprint(houses[(n - 1) // 2])",
        "detail": "Coding_test.Chapter 14. 정렬(完).24-4",
        "documentation": {}
    },
    {
        "label": "houses",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).24-4",
        "description": "Coding_test.Chapter 14. 정렬(完).24-4",
        "peekOfCode": "houses = list(map(int, input().split()))\nhouses.sort()\nprint(houses[(n - 1) // 2])",
        "detail": "Coding_test.Chapter 14. 정렬(完).24-4",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).24-5",
        "description": "Coding_test.Chapter 14. 정렬(完).24-5",
        "peekOfCode": "n = int(input())\ndistances = list(map(int, input().split()))\ndistances.sort()\nanswer = distances[(n - 1) // 2]\nprint(answer)",
        "detail": "Coding_test.Chapter 14. 정렬(完).24-5",
        "documentation": {}
    },
    {
        "label": "distances",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).24-5",
        "description": "Coding_test.Chapter 14. 정렬(完).24-5",
        "peekOfCode": "distances = list(map(int, input().split()))\ndistances.sort()\nanswer = distances[(n - 1) // 2]\nprint(answer)",
        "detail": "Coding_test.Chapter 14. 정렬(完).24-5",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).24-5",
        "description": "Coding_test.Chapter 14. 정렬(完).24-5",
        "peekOfCode": "answer = distances[(n - 1) // 2]\nprint(answer)",
        "detail": "Coding_test.Chapter 14. 정렬(完).24-5",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 14. 정렬(完).25-1",
        "description": "Coding_test.Chapter 14. 정렬(完).25-1",
        "peekOfCode": "def solution(N, stages):\n    players = [[i + 1, stages.count(i + 1), 0] for i in range(N)]\n    total_num = len(stages)\n    prev_players = 0\n    for i in range(N):\n        if players[i][1] != 0:\n            players[i][2] = players[i][1] / (total_num - prev_players)\n        else:\n            players[i][1] = 0\n        prev_players += players[i][1]",
        "detail": "Coding_test.Chapter 14. 정렬(完).25-1",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 14. 정렬(完).25-2",
        "description": "Coding_test.Chapter 14. 정렬(完).25-2",
        "peekOfCode": "def solution(N, stages):\n    players = [[i + 1, stages.count(i + 1)] for i in range(N)]\n    fails = []\n    total = len(stages)\n    prev = 0\n    for i in range(N):  # Change range from 0 to 1\n        if players[i][1] == 0:\n            fails.append([i + 1, 0])\n        else:\n            fails.append([i + 1, players[i][1] / (total - prev)])",
        "detail": "Coding_test.Chapter 14. 정렬(完).25-2",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 14. 정렬(完).25-3-best",
        "description": "Coding_test.Chapter 14. 정렬(完).25-3-best",
        "peekOfCode": "def solution(N, stages):\n    players = [[i + 1, stages.count(i + 1)] for i in range(N)]\n    total = len(stages)\n    prev = 0\n    for i in range(len(players)):\n        players[i].append(players[i] / (total - prev))\n        prev += players[i][1]\n    players = sorted(players, key=lambda x: x[-1])\n    print([i[0] for i in players])",
        "detail": "Coding_test.Chapter 14. 정렬(完).25-3-best",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 14. 정렬(完).25-4",
        "description": "Coding_test.Chapter 14. 정렬(完).25-4",
        "peekOfCode": "def solution(N, stages):\n    stages.sort()\n    players = [[i + 1, stages.count(i + 1), 0] for i in range(N)]\n    total = len(stages)\n    for idx in range(len(players)):\n        players[idx][2] = players[idx][1] / total\n        total -= players[idx][1]\n    players = sorted(players, key=lambda x: x[2], reverse=True)\n    print([player[0] for player in players])\nsolution(5, [2, 1, 2, 6, 2, 4, 3, 3])",
        "detail": "Coding_test.Chapter 14. 정렬(完).25-4",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).25-5",
        "description": "Coding_test.Chapter 14. 정렬(完).25-5",
        "peekOfCode": "n = int(input())\nstages = list(map(int, input().split()))\ndata = {}\nfor stage in range(1, n + 2):\n    data[stage] = 0\nfor stage in stages:\n    data[stage] = stages.count(stage)\ndata = sorted(data.items(), key=lambda x: x[0])\ndata = [count for _, count in data]\nrate = []",
        "detail": "Coding_test.Chapter 14. 정렬(完).25-5",
        "documentation": {}
    },
    {
        "label": "stages",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).25-5",
        "description": "Coding_test.Chapter 14. 정렬(完).25-5",
        "peekOfCode": "stages = list(map(int, input().split()))\ndata = {}\nfor stage in range(1, n + 2):\n    data[stage] = 0\nfor stage in stages:\n    data[stage] = stages.count(stage)\ndata = sorted(data.items(), key=lambda x: x[0])\ndata = [count for _, count in data]\nrate = []\nfor stage in range(n):",
        "detail": "Coding_test.Chapter 14. 정렬(完).25-5",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).25-5",
        "description": "Coding_test.Chapter 14. 정렬(完).25-5",
        "peekOfCode": "data = {}\nfor stage in range(1, n + 2):\n    data[stage] = 0\nfor stage in stages:\n    data[stage] = stages.count(stage)\ndata = sorted(data.items(), key=lambda x: x[0])\ndata = [count for _, count in data]\nrate = []\nfor stage in range(n):\n    rate.append((data[stage] / sum(data[stage:]), stage + 1))",
        "detail": "Coding_test.Chapter 14. 정렬(完).25-5",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).25-5",
        "description": "Coding_test.Chapter 14. 정렬(完).25-5",
        "peekOfCode": "data = sorted(data.items(), key=lambda x: x[0])\ndata = [count for _, count in data]\nrate = []\nfor stage in range(n):\n    rate.append((data[stage] / sum(data[stage:]), stage + 1))\nanswer = sorted(rate, key=lambda x: x[0], reverse=True)\nanswer = [stage for _, stage in answer]\nprint(answer)",
        "detail": "Coding_test.Chapter 14. 정렬(完).25-5",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).25-5",
        "description": "Coding_test.Chapter 14. 정렬(完).25-5",
        "peekOfCode": "data = [count for _, count in data]\nrate = []\nfor stage in range(n):\n    rate.append((data[stage] / sum(data[stage:]), stage + 1))\nanswer = sorted(rate, key=lambda x: x[0], reverse=True)\nanswer = [stage for _, stage in answer]\nprint(answer)",
        "detail": "Coding_test.Chapter 14. 정렬(完).25-5",
        "documentation": {}
    },
    {
        "label": "rate",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).25-5",
        "description": "Coding_test.Chapter 14. 정렬(完).25-5",
        "peekOfCode": "rate = []\nfor stage in range(n):\n    rate.append((data[stage] / sum(data[stage:]), stage + 1))\nanswer = sorted(rate, key=lambda x: x[0], reverse=True)\nanswer = [stage for _, stage in answer]\nprint(answer)",
        "detail": "Coding_test.Chapter 14. 정렬(完).25-5",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).25-5",
        "description": "Coding_test.Chapter 14. 정렬(完).25-5",
        "peekOfCode": "answer = sorted(rate, key=lambda x: x[0], reverse=True)\nanswer = [stage for _, stage in answer]\nprint(answer)",
        "detail": "Coding_test.Chapter 14. 정렬(完).25-5",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).25-5",
        "description": "Coding_test.Chapter 14. 정렬(完).25-5",
        "peekOfCode": "answer = [stage for _, stage in answer]\nprint(answer)",
        "detail": "Coding_test.Chapter 14. 정렬(完).25-5",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).26-1",
        "description": "Coding_test.Chapter 14. 정렬(完).26-1",
        "peekOfCode": "n = int(input())\nheap = []\nfor _ in range(n):\n    data = int(input())\n    heapq.heappush(heap, data)\nresult = 0\nwhile len(heap) != 1:\n    one = heapq.heappop(heap)\n    two = heapq.heappop(heap)\n    sum_value = one + two",
        "detail": "Coding_test.Chapter 14. 정렬(完).26-1",
        "documentation": {}
    },
    {
        "label": "heap",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).26-1",
        "description": "Coding_test.Chapter 14. 정렬(完).26-1",
        "peekOfCode": "heap = []\nfor _ in range(n):\n    data = int(input())\n    heapq.heappush(heap, data)\nresult = 0\nwhile len(heap) != 1:\n    one = heapq.heappop(heap)\n    two = heapq.heappop(heap)\n    sum_value = one + two\n    result += sum_value",
        "detail": "Coding_test.Chapter 14. 정렬(完).26-1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).26-1",
        "description": "Coding_test.Chapter 14. 정렬(完).26-1",
        "peekOfCode": "result = 0\nwhile len(heap) != 1:\n    one = heapq.heappop(heap)\n    two = heapq.heappop(heap)\n    sum_value = one + two\n    result += sum_value\n    heapq.heappush(heap, sum_value)\nprint(result)",
        "detail": "Coding_test.Chapter 14. 정렬(完).26-1",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).26-2",
        "description": "Coding_test.Chapter 14. 정렬(完).26-2",
        "peekOfCode": "input = sys.stdin.readline\nn = int(input())\ncards = []\nfor _ in range(n):\n    heapq.heappush(cards, (int(input())))\ntotal = []\nwhile len(cards) != 1:\n    a = heapq.heappop(cards)\n    b = heapq.heappop(cards)\n    heapq.heappush(cards, a + b)",
        "detail": "Coding_test.Chapter 14. 정렬(完).26-2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).26-2",
        "description": "Coding_test.Chapter 14. 정렬(完).26-2",
        "peekOfCode": "n = int(input())\ncards = []\nfor _ in range(n):\n    heapq.heappush(cards, (int(input())))\ntotal = []\nwhile len(cards) != 1:\n    a = heapq.heappop(cards)\n    b = heapq.heappop(cards)\n    heapq.heappush(cards, a + b)\n    total.append(a)",
        "detail": "Coding_test.Chapter 14. 정렬(完).26-2",
        "documentation": {}
    },
    {
        "label": "cards",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).26-2",
        "description": "Coding_test.Chapter 14. 정렬(完).26-2",
        "peekOfCode": "cards = []\nfor _ in range(n):\n    heapq.heappush(cards, (int(input())))\ntotal = []\nwhile len(cards) != 1:\n    a = heapq.heappop(cards)\n    b = heapq.heappop(cards)\n    heapq.heappush(cards, a + b)\n    total.append(a)\n    total.append(b)",
        "detail": "Coding_test.Chapter 14. 정렬(完).26-2",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).26-2",
        "description": "Coding_test.Chapter 14. 정렬(完).26-2",
        "peekOfCode": "total = []\nwhile len(cards) != 1:\n    a = heapq.heappop(cards)\n    b = heapq.heappop(cards)\n    heapq.heappush(cards, a + b)\n    total.append(a)\n    total.append(b)\nprint(sum(total))",
        "detail": "Coding_test.Chapter 14. 정렬(完).26-2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).26-3-best",
        "description": "Coding_test.Chapter 14. 정렬(完).26-3-best",
        "peekOfCode": "n = int(input())\nq = []\ntotal = []\nfor i in range(n):\n    heapq.heappush(q, (int(input())))\nwhile q:\n    a = heapq.heappop(q)\n    try:\n        b = heapq.heappop(q)\n        heapq.heappush(q, (a + b))",
        "detail": "Coding_test.Chapter 14. 정렬(完).26-3-best",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).26-3-best",
        "description": "Coding_test.Chapter 14. 정렬(完).26-3-best",
        "peekOfCode": "q = []\ntotal = []\nfor i in range(n):\n    heapq.heappush(q, (int(input())))\nwhile q:\n    a = heapq.heappop(q)\n    try:\n        b = heapq.heappop(q)\n        heapq.heappush(q, (a + b))\n        total.append(a + b)",
        "detail": "Coding_test.Chapter 14. 정렬(完).26-3-best",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).26-3-best",
        "description": "Coding_test.Chapter 14. 정렬(完).26-3-best",
        "peekOfCode": "total = []\nfor i in range(n):\n    heapq.heappush(q, (int(input())))\nwhile q:\n    a = heapq.heappop(q)\n    try:\n        b = heapq.heappop(q)\n        heapq.heappush(q, (a + b))\n        total.append(a + b)\n    except:",
        "detail": "Coding_test.Chapter 14. 정렬(完).26-3-best",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).26-4",
        "description": "Coding_test.Chapter 14. 정렬(完).26-4",
        "peekOfCode": "n = int(input())\nq = []\ncards = []\nfor _ in range(n):\n    heapq.heappush(q, int(input()))\nanswer = 0\nwhile q:\n    a = heapq.heappop()\n    try:\n        b = heapq.heappop()",
        "detail": "Coding_test.Chapter 14. 정렬(完).26-4",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).26-4",
        "description": "Coding_test.Chapter 14. 정렬(完).26-4",
        "peekOfCode": "q = []\ncards = []\nfor _ in range(n):\n    heapq.heappush(q, int(input()))\nanswer = 0\nwhile q:\n    a = heapq.heappop()\n    try:\n        b = heapq.heappop()\n        heapq.heappush(q, (a + b))",
        "detail": "Coding_test.Chapter 14. 정렬(完).26-4",
        "documentation": {}
    },
    {
        "label": "cards",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).26-4",
        "description": "Coding_test.Chapter 14. 정렬(完).26-4",
        "peekOfCode": "cards = []\nfor _ in range(n):\n    heapq.heappush(q, int(input()))\nanswer = 0\nwhile q:\n    a = heapq.heappop()\n    try:\n        b = heapq.heappop()\n        heapq.heappush(q, (a + b))\n        cards.append(a + b)",
        "detail": "Coding_test.Chapter 14. 정렬(完).26-4",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).26-4",
        "description": "Coding_test.Chapter 14. 정렬(完).26-4",
        "peekOfCode": "answer = 0\nwhile q:\n    a = heapq.heappop()\n    try:\n        b = heapq.heappop()\n        heapq.heappush(q, (a + b))\n        cards.append(a + b)\n    except:\n        pass\nprint(sum(cards))",
        "detail": "Coding_test.Chapter 14. 정렬(完).26-4",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).26-5",
        "description": "Coding_test.Chapter 14. 정렬(完).26-5",
        "peekOfCode": "n = int(input())\nq = []\ntotal = []\nfor _ in range(n):\n    heapq.heappush(q, int(input()))\nwhile q:\n    a = heapq.heappop(q)\n    try:\n        b = heapq.heappop(q)\n        heapq.heappush(q, (a + b))",
        "detail": "Coding_test.Chapter 14. 정렬(完).26-5",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).26-5",
        "description": "Coding_test.Chapter 14. 정렬(完).26-5",
        "peekOfCode": "q = []\ntotal = []\nfor _ in range(n):\n    heapq.heappush(q, int(input()))\nwhile q:\n    a = heapq.heappop(q)\n    try:\n        b = heapq.heappop(q)\n        heapq.heappush(q, (a + b))\n        total.append(a + b)",
        "detail": "Coding_test.Chapter 14. 정렬(完).26-5",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "Coding_test.Chapter 14. 정렬(完).26-5",
        "description": "Coding_test.Chapter 14. 정렬(完).26-5",
        "peekOfCode": "total = []\nfor _ in range(n):\n    heapq.heappush(q, int(input()))\nwhile q:\n    a = heapq.heappop(q)\n    try:\n        b = heapq.heappop(q)\n        heapq.heappush(q, (a + b))\n        total.append(a + b)\n    except:",
        "detail": "Coding_test.Chapter 14. 정렬(完).26-5",
        "documentation": {}
    },
    {
        "label": "count_by_range",
        "kind": 2,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).27-1",
        "description": "Coding_test.Chapter 15. 이진탐색(完).27-1",
        "peekOfCode": "def count_by_range(array, left_value, right_value):\n    right_index = bisect_right(array, right_value)\n    left_index = bisect_left(array, left_value)\n    return right_index - left_index\ncount = count_by_range(array, x, x)\nif count:\n    print(count)\nelse:\n    print(-1)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).27-1",
        "documentation": {}
    },
    {
        "label": "n,x",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).27-1",
        "description": "Coding_test.Chapter 15. 이진탐색(完).27-1",
        "peekOfCode": "n,x = map(int, input().split())\narray = list(map(int, sys.stdin.readline().split()))\ndef count_by_range(array, left_value, right_value):\n    right_index = bisect_right(array, right_value)\n    left_index = bisect_left(array, left_value)\n    return right_index - left_index\ncount = count_by_range(array, x, x)\nif count:\n    print(count)\nelse:",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).27-1",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).27-1",
        "description": "Coding_test.Chapter 15. 이진탐색(完).27-1",
        "peekOfCode": "array = list(map(int, sys.stdin.readline().split()))\ndef count_by_range(array, left_value, right_value):\n    right_index = bisect_right(array, right_value)\n    left_index = bisect_left(array, left_value)\n    return right_index - left_index\ncount = count_by_range(array, x, x)\nif count:\n    print(count)\nelse:\n    print(-1)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).27-1",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).27-1",
        "description": "Coding_test.Chapter 15. 이진탐색(完).27-1",
        "peekOfCode": "count = count_by_range(array, x, x)\nif count:\n    print(count)\nelse:\n    print(-1)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).27-1",
        "documentation": {}
    },
    {
        "label": "n,x",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).27-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).27-2",
        "peekOfCode": "n,x = map(int, input().split())\ndata = list(map(int, input().split()))\nleft = bisect_left(data, x)\nright = bisect_right(data, x)\ncount = right - left\nif count:\n    print(right-left)\nelse:\n    print(-1)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).27-2",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).27-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).27-2",
        "peekOfCode": "data = list(map(int, input().split()))\nleft = bisect_left(data, x)\nright = bisect_right(data, x)\ncount = right - left\nif count:\n    print(right-left)\nelse:\n    print(-1)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).27-2",
        "documentation": {}
    },
    {
        "label": "left",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).27-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).27-2",
        "peekOfCode": "left = bisect_left(data, x)\nright = bisect_right(data, x)\ncount = right - left\nif count:\n    print(right-left)\nelse:\n    print(-1)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).27-2",
        "documentation": {}
    },
    {
        "label": "right",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).27-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).27-2",
        "peekOfCode": "right = bisect_right(data, x)\ncount = right - left\nif count:\n    print(right-left)\nelse:\n    print(-1)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).27-2",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).27-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).27-2",
        "peekOfCode": "count = right - left\nif count:\n    print(right-left)\nelse:\n    print(-1)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).27-2",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).27-3-best",
        "description": "Coding_test.Chapter 15. 이진탐색(完).27-3-best",
        "peekOfCode": "array = list(map(int, input().split()))\nleft = bisect_left(array, m)\nright = bisect_right(array, m)\nif (right-left):\n    print(right-left)\nelse:\n    print(-1)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).27-3-best",
        "documentation": {}
    },
    {
        "label": "left",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).27-3-best",
        "description": "Coding_test.Chapter 15. 이진탐색(完).27-3-best",
        "peekOfCode": "left = bisect_left(array, m)\nright = bisect_right(array, m)\nif (right-left):\n    print(right-left)\nelse:\n    print(-1)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).27-3-best",
        "documentation": {}
    },
    {
        "label": "right",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).27-3-best",
        "description": "Coding_test.Chapter 15. 이진탐색(完).27-3-best",
        "peekOfCode": "right = bisect_right(array, m)\nif (right-left):\n    print(right-left)\nelse:\n    print(-1)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).27-3-best",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).28-1",
        "description": "Coding_test.Chapter 15. 이진탐색(完).28-1",
        "peekOfCode": "def binary_search(array,start, end):\n    if start > end:\n        return None\n    mid = (start + end) // 2\n    if array[mid] == mid:\n        return mid\n    elif array[mid] > mid:\n        return binary_search(array, start, mid-1)\n    else:\n        return binary_search(array, mid+1, end)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).28-1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).28-1",
        "description": "Coding_test.Chapter 15. 이진탐색(完).28-1",
        "peekOfCode": "n = int(input())\na = list(map(int, sys.stdin.readline().split()))\ndef binary_search(array,start, end):\n    if start > end:\n        return None\n    mid = (start + end) // 2\n    if array[mid] == mid:\n        return mid\n    elif array[mid] > mid:\n        return binary_search(array, start, mid-1)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).28-1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).28-1",
        "description": "Coding_test.Chapter 15. 이진탐색(完).28-1",
        "peekOfCode": "a = list(map(int, sys.stdin.readline().split()))\ndef binary_search(array,start, end):\n    if start > end:\n        return None\n    mid = (start + end) // 2\n    if array[mid] == mid:\n        return mid\n    elif array[mid] > mid:\n        return binary_search(array, start, mid-1)\n    else:",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).28-1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).28-1",
        "description": "Coding_test.Chapter 15. 이진탐색(完).28-1",
        "peekOfCode": "result = binary_search(a, 0, n-1)\nif result:\n    print(result)\nelse:\n    print(-1)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).28-1",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).28-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).28-2",
        "peekOfCode": "def binary_search(data, start, end):\n    if start > end:\n        return None\n    mid = (start+end) // 2\n    if data[mid] == mid:\n        return mid\n    elif data[mid] > mid:\n        return binary_search(data, start, mid-1)\n    else:\n        return binary_search(data, mid+1, end)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).28-2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).28-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).28-2",
        "peekOfCode": "n = int(input())\ndata = list(map(int,input().split()))\ndef binary_search(data, start, end):\n    if start > end:\n        return None\n    mid = (start+end) // 2\n    if data[mid] == mid:\n        return mid\n    elif data[mid] > mid:\n        return binary_search(data, start, mid-1)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).28-2",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).28-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).28-2",
        "peekOfCode": "data = list(map(int,input().split()))\ndef binary_search(data, start, end):\n    if start > end:\n        return None\n    mid = (start+end) // 2\n    if data[mid] == mid:\n        return mid\n    elif data[mid] > mid:\n        return binary_search(data, start, mid-1)\n    else:",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).28-2",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).28-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).28-2",
        "peekOfCode": "result = binary_search(data, 0, n)\nif result:\n    print(result)\nelse:\n    print(-1)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).28-2",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).28-3-best",
        "description": "Coding_test.Chapter 15. 이진탐색(完).28-3-best",
        "peekOfCode": "def binary_search(array, start ,end):\n    if start > end:\n        return None\n    mid = (start+end) // 2\n    if mid == array[mid]:\n        return mid\n    elif array[mid] > mid:\n        return binary_search(array, start, mid-1)\n    else:\n        return binary_search(array, mid+1, end)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).28-3-best",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).28-3-best",
        "description": "Coding_test.Chapter 15. 이진탐색(完).28-3-best",
        "peekOfCode": "n = int(input())\narray = list(map(int, input().split()))\ndef binary_search(array, start ,end):\n    if start > end:\n        return None\n    mid = (start+end) // 2\n    if mid == array[mid]:\n        return mid\n    elif array[mid] > mid:\n        return binary_search(array, start, mid-1)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).28-3-best",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).28-3-best",
        "description": "Coding_test.Chapter 15. 이진탐색(完).28-3-best",
        "peekOfCode": "array = list(map(int, input().split()))\ndef binary_search(array, start ,end):\n    if start > end:\n        return None\n    mid = (start+end) // 2\n    if mid == array[mid]:\n        return mid\n    elif array[mid] > mid:\n        return binary_search(array, start, mid-1)\n    else:",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).28-3-best",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).28-3-best",
        "description": "Coding_test.Chapter 15. 이진탐색(完).28-3-best",
        "peekOfCode": "result = binary_search(array, 0, len(array))\nif result:\n    print(result)\nelse:\n    print(-1)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).28-3-best",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).29-1",
        "description": "Coding_test.Chapter 15. 이진탐색(完).29-1",
        "peekOfCode": "array = []\nfor _ in range(n):\n    array.append(int(input()))\narray.sort()\nstart = array[1] - array[0]\nend = array[-1] - array[0]\nresult = 0\nwhile(start <= end):\n    mid = (start+end) // 2 # gap\n    value = array[0]",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).29-1",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).29-1",
        "description": "Coding_test.Chapter 15. 이진탐색(完).29-1",
        "peekOfCode": "start = array[1] - array[0]\nend = array[-1] - array[0]\nresult = 0\nwhile(start <= end):\n    mid = (start+end) // 2 # gap\n    value = array[0]\n    count = 1\n    for i in range(1,n):\n        if array[i] >= value+mid:\n            value = array[i]",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).29-1",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).29-1",
        "description": "Coding_test.Chapter 15. 이진탐색(完).29-1",
        "peekOfCode": "end = array[-1] - array[0]\nresult = 0\nwhile(start <= end):\n    mid = (start+end) // 2 # gap\n    value = array[0]\n    count = 1\n    for i in range(1,n):\n        if array[i] >= value+mid:\n            value = array[i]\n            count += 1",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).29-1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).29-1",
        "description": "Coding_test.Chapter 15. 이진탐색(完).29-1",
        "peekOfCode": "result = 0\nwhile(start <= end):\n    mid = (start+end) // 2 # gap\n    value = array[0]\n    count = 1\n    for i in range(1,n):\n        if array[i] >= value+mid:\n            value = array[i]\n            count += 1\n    if count >= c:",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).29-1",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).29-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).29-2",
        "peekOfCode": "input = sys.stdin.readline\nn,c = map(int, input().split())\narray = []\nfor _ in range(n):\n    array.append(int(input()))\narray.sort()\nstart = array[1] - array[0]\nend = array[-1] - array[0]\nwhile start <= end:\n    mid = (start+end) // 2",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).29-2",
        "documentation": {}
    },
    {
        "label": "n,c",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).29-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).29-2",
        "peekOfCode": "n,c = map(int, input().split())\narray = []\nfor _ in range(n):\n    array.append(int(input()))\narray.sort()\nstart = array[1] - array[0]\nend = array[-1] - array[0]\nwhile start <= end:\n    mid = (start+end) // 2\n    value = array[0]",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).29-2",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).29-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).29-2",
        "peekOfCode": "array = []\nfor _ in range(n):\n    array.append(int(input()))\narray.sort()\nstart = array[1] - array[0]\nend = array[-1] - array[0]\nwhile start <= end:\n    mid = (start+end) // 2\n    value = array[0]\n    count = 1",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).29-2",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).29-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).29-2",
        "peekOfCode": "start = array[1] - array[0]\nend = array[-1] - array[0]\nwhile start <= end:\n    mid = (start+end) // 2\n    value = array[0]\n    count = 1\n    for i in range(1,n):\n        if array[i] >= value + mid:\n            value = array[i]\n            count += 1",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).29-2",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).29-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).29-2",
        "peekOfCode": "end = array[-1] - array[0]\nwhile start <= end:\n    mid = (start+end) // 2\n    value = array[0]\n    count = 1\n    for i in range(1,n):\n        if array[i] >= value + mid:\n            value = array[i]\n            count += 1\n    if count >= c:",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).29-2",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).29-3-best",
        "description": "Coding_test.Chapter 15. 이진탐색(完).29-3-best",
        "peekOfCode": "array = []\nfor _ in range(n):\n    array.append(int(input()))\narray.sort()\nstart = array[1] - array[0]\nend = array[-1] - array[0]\nwhile start <= end:\n    mid = (start+end) // 2\n    value = array[0]\n    count = 1",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).29-3-best",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).29-3-best",
        "description": "Coding_test.Chapter 15. 이진탐색(完).29-3-best",
        "peekOfCode": "start = array[1] - array[0]\nend = array[-1] - array[0]\nwhile start <= end:\n    mid = (start+end) // 2\n    value = array[0]\n    count = 1\n    for i in range(len(array)):\n        if value+mid <= array[i]:\n            count += 1\n            value = array[i]",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).29-3-best",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).29-3-best",
        "description": "Coding_test.Chapter 15. 이진탐색(完).29-3-best",
        "peekOfCode": "end = array[-1] - array[0]\nwhile start <= end:\n    mid = (start+end) // 2\n    value = array[0]\n    count = 1\n    for i in range(len(array)):\n        if value+mid <= array[i]:\n            count += 1\n            value = array[i]\n    if count >= c:",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).29-3-best",
        "documentation": {}
    },
    {
        "label": "count_by_range",
        "kind": 2,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).30-1",
        "description": "Coding_test.Chapter 15. 이진탐색(完).30-1",
        "peekOfCode": "def count_by_range(a, left_value, right_value):\n    right_index = bisect_right(a, right_value)\n    left_index = bisect_left(a, left_value)\n    return right_index - left_index\narray = [[] for _ in range(10001)]\nreversed_array = [[] for _ in range(10001)]\ndef solution(words, queries):\n    answer = []\n    for word in words:\n        array[len(word)].append(word)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).30-1",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).30-1",
        "description": "Coding_test.Chapter 15. 이진탐색(完).30-1",
        "peekOfCode": "def solution(words, queries):\n    answer = []\n    for word in words:\n        array[len(word)].append(word)\n        reversed_array[len(word)].append(word[::-1])\n    for i in range(10001):\n        array[i].sort()\n        reversed_array[i].sort()\n    for q in queries:\n        if q[0] != '?':",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).30-1",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).30-1",
        "description": "Coding_test.Chapter 15. 이진탐색(完).30-1",
        "peekOfCode": "array = [[] for _ in range(10001)]\nreversed_array = [[] for _ in range(10001)]\ndef solution(words, queries):\n    answer = []\n    for word in words:\n        array[len(word)].append(word)\n        reversed_array[len(word)].append(word[::-1])\n    for i in range(10001):\n        array[i].sort()\n        reversed_array[i].sort()",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).30-1",
        "documentation": {}
    },
    {
        "label": "reversed_array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).30-1",
        "description": "Coding_test.Chapter 15. 이진탐색(完).30-1",
        "peekOfCode": "reversed_array = [[] for _ in range(10001)]\ndef solution(words, queries):\n    answer = []\n    for word in words:\n        array[len(word)].append(word)\n        reversed_array[len(word)].append(word[::-1])\n    for i in range(10001):\n        array[i].sort()\n        reversed_array[i].sort()\n    for q in queries:",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).30-1",
        "documentation": {}
    },
    {
        "label": "count_by_range",
        "kind": 2,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).30-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).30-2",
        "peekOfCode": "def count_by_range(a, left_value, right_value):\n    right_index = bisect_right(a, right_value)\n    left_index = bisect_left(a,left_value)\n    return right_index - left_index\ndef solution(words, queries):\n    answer = [0] * len(queries)\n    for word in words:\n        if not len(word) in array.keys():\n            array[len(word)] = [word]\n        else:",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).30-2",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).30-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).30-2",
        "peekOfCode": "def solution(words, queries):\n    answer = [0] * len(queries)\n    for word in words:\n        if not len(word) in array.keys():\n            array[len(word)] = [word]\n        else:\n            array[len(word)].append(word)\n        if not len(word) in array.keys():\n            reversed_array[len(word)] = [word[::-1]]\n        else:",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).30-2",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).30-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).30-2",
        "peekOfCode": "array = {}\nreversed_array = {}\ndef count_by_range(a, left_value, right_value):\n    right_index = bisect_right(a, right_value)\n    left_index = bisect_left(a,left_value)\n    return right_index - left_index\ndef solution(words, queries):\n    answer = [0] * len(queries)\n    for word in words:\n        if not len(word) in array.keys():",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).30-2",
        "documentation": {}
    },
    {
        "label": "reversed_array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).30-2",
        "description": "Coding_test.Chapter 15. 이진탐색(完).30-2",
        "peekOfCode": "reversed_array = {}\ndef count_by_range(a, left_value, right_value):\n    right_index = bisect_right(a, right_value)\n    left_index = bisect_left(a,left_value)\n    return right_index - left_index\ndef solution(words, queries):\n    answer = [0] * len(queries)\n    for word in words:\n        if not len(word) in array.keys():\n            array[len(word)] = [word]",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).30-2",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).30-3-best",
        "description": "Coding_test.Chapter 15. 이진탐색(完).30-3-best",
        "peekOfCode": "def solution(words, queries):\n    answer = [0] * len(queries)\n    #initialize\n    for word in words:\n        if not len(word) in array.keys():\n            array[len(word)] = [word]\n        else:\n            array[len(word)].append(word)\n        if not len(word) in reversed_array.keys():\n            reversed_array[len(word)] = [word[::-1]]",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).30-3-best",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).30-3-best",
        "description": "Coding_test.Chapter 15. 이진탐색(完).30-3-best",
        "peekOfCode": "array = {}\nreversed_array = {}\ndef solution(words, queries):\n    answer = [0] * len(queries)\n    #initialize\n    for word in words:\n        if not len(word) in array.keys():\n            array[len(word)] = [word]\n        else:\n            array[len(word)].append(word)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).30-3-best",
        "documentation": {}
    },
    {
        "label": "reversed_array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).30-3-best",
        "description": "Coding_test.Chapter 15. 이진탐색(完).30-3-best",
        "peekOfCode": "reversed_array = {}\ndef solution(words, queries):\n    answer = [0] * len(queries)\n    #initialize\n    for word in words:\n        if not len(word) in array.keys():\n            array[len(word)] = [word]\n        else:\n            array[len(word)].append(word)\n        if not len(word) in reversed_array.keys():",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).30-3-best",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 15. 이진탐색(完).30-3-best",
        "description": "Coding_test.Chapter 15. 이진탐색(完).30-3-best",
        "peekOfCode": "result = solution([\"frodo\", \"front\", \"frost\", \"frozen\", \"frame\", \"kakao\"], [\"fro??\", \"????o\", \"fr???\", \"fro???\", \"pro?\"])\nprint(result)",
        "detail": "Coding_test.Chapter 15. 이진탐색(完).30-3-best",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).31-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).31-1",
        "peekOfCode": "t = int(input())\nfor _ in range(t):\n    n,m = map(int, input().split())\n    array = list(map(int, input().split()))\n    dp = [array[i:i+m] for i in range(0,n,m)]\n    for j in range(1,m):\n        for i in range(n):\n            if i == 0: # from left up\n                left_up = 0\n            else:",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).31-1",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).31-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).31-2",
        "peekOfCode": "t = int(input())\nfor _ in range(t):\n    n,m = map(int, input().split())\n    gold = list(map(int, input().split()))\n    mine = [gold[i:i+m] for i in range(0,n*m,m)]\n    result = 0\n    for j in range(1,m): \n        for i in range(n): \n            if i == 0: # from left up\n                left_up = 0",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).31-2",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).31-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).31-3-best",
        "peekOfCode": "t = int(input())\nfor _ in range(t):\n    n, m = map(int, input().split())\n    array = list(map(int, input().split()))\n    gold = [array[i:i+m] for i in range(0,len(array), m)]\n    for x in range(1,m):\n        for y in range(n):\n            if y == 0:\n                left_up = 0\n            else:",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).31-3-best",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-1",
        "peekOfCode": "n = int(input())\ndp = []\nfor i in range(n):\n    array = list(map(int, input().split()))\n    dp.append(array)\nfor i in range(1,n):\n    for j in range(i+1):\n        if j == 0:\n            up_left = 0\n            up_right = dp[i-1][j]",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-1",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-1",
        "peekOfCode": "dp = []\nfor i in range(n):\n    array = list(map(int, input().split()))\n    dp.append(array)\nfor i in range(1,n):\n    for j in range(i+1):\n        if j == 0:\n            up_left = 0\n            up_right = dp[i-1][j]\n        elif j == i:",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-1",
        "peekOfCode": "result = max(dp[n-1])\nprint(result)",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-2",
        "peekOfCode": "n = int(input())\ntriangle = []\nfor _ in range(n):\n    triangle.append(list(map(int,input().split())))\nfor i in range(1,n):\n    for j in range(i):\n        if j == 0:\n            up_left = 0\n        else:\n            up_left = triangle[i-1][j-1]",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-2",
        "documentation": {}
    },
    {
        "label": "triangle",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-2",
        "peekOfCode": "triangle = []\nfor _ in range(n):\n    triangle.append(list(map(int,input().split())))\nfor i in range(1,n):\n    for j in range(i):\n        if j == 0:\n            up_left = 0\n        else:\n            up_left = triangle[i-1][j-1]\n        if j == i:",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-3-best",
        "peekOfCode": "n = int(input())\ntriangle = []\nfor _ in range(n):\n    triangle.append(list(map(int, input().split())))\nfor i in range(1,n):\n    for j in range(i):\n        if j == 0:\n            up_left = 0\n        else:\n            up_left = triangle[i-1][j-1]",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-3-best",
        "documentation": {}
    },
    {
        "label": "triangle",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-3-best",
        "peekOfCode": "triangle = []\nfor _ in range(n):\n    triangle.append(list(map(int, input().split())))\nfor i in range(1,n):\n    for j in range(i):\n        if j == 0:\n            up_left = 0\n        else:\n            up_left = triangle[i-1][j-1]\n        if j == i:",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).32-3-best",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-1",
        "peekOfCode": "n = int(input())\nt = []\np = []\ndp = [0] * (n+1)\nmax_value = 0\nfor i in range(n):\n    x,y = map(int, input().split())\n    t.append(x)\n    p.append(y)\nfor i in range(n-1, -1, -1):",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-1",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-1",
        "peekOfCode": "t = []\np = []\ndp = [0] * (n+1)\nmax_value = 0\nfor i in range(n):\n    x,y = map(int, input().split())\n    t.append(x)\n    p.append(y)\nfor i in range(n-1, -1, -1):\n    time = t[i] + i",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-1",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-1",
        "peekOfCode": "p = []\ndp = [0] * (n+1)\nmax_value = 0\nfor i in range(n):\n    x,y = map(int, input().split())\n    t.append(x)\n    p.append(y)\nfor i in range(n-1, -1, -1):\n    time = t[i] + i\n    if time <= n:",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-1",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-1",
        "peekOfCode": "dp = [0] * (n+1)\nmax_value = 0\nfor i in range(n):\n    x,y = map(int, input().split())\n    t.append(x)\n    p.append(y)\nfor i in range(n-1, -1, -1):\n    time = t[i] + i\n    if time <= n:\n        dp[i] = max(p[i]+dp[time], max_value)",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-1",
        "documentation": {}
    },
    {
        "label": "max_value",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-1",
        "peekOfCode": "max_value = 0\nfor i in range(n):\n    x,y = map(int, input().split())\n    t.append(x)\n    p.append(y)\nfor i in range(n-1, -1, -1):\n    time = t[i] + i\n    if time <= n:\n        dp[i] = max(p[i]+dp[time], max_value)\n        max_value = dp[i]",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-2",
        "peekOfCode": "n = int(input())\nt = []\np = []\ndp = [0] * (n+1)\nfor _ in range(n):\n    x, y = map(int, input().split())\n    t.append(x)\n    p.append(y)\nresult = 0 # max value\nfor i in range(n-1,-1,-1):",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-2",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-2",
        "peekOfCode": "t = []\np = []\ndp = [0] * (n+1)\nfor _ in range(n):\n    x, y = map(int, input().split())\n    t.append(x)\n    p.append(y)\nresult = 0 # max value\nfor i in range(n-1,-1,-1):\n    time = t[i] + i ",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-2",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-2",
        "peekOfCode": "p = []\ndp = [0] * (n+1)\nfor _ in range(n):\n    x, y = map(int, input().split())\n    t.append(x)\n    p.append(y)\nresult = 0 # max value\nfor i in range(n-1,-1,-1):\n    time = t[i] + i \n    if time <= n:",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-2",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-2",
        "peekOfCode": "dp = [0] * (n+1)\nfor _ in range(n):\n    x, y = map(int, input().split())\n    t.append(x)\n    p.append(y)\nresult = 0 # max value\nfor i in range(n-1,-1,-1):\n    time = t[i] + i \n    if time <= n:\n        dp[i] = max(p[i]+dp[time], result)",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-2",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-2",
        "peekOfCode": "result = 0 # max value\nfor i in range(n-1,-1,-1):\n    time = t[i] + i \n    if time <= n:\n        dp[i] = max(p[i]+dp[time], result)\n        result = dp[i]\n    else:\n        dp[i] = result\nprint(result)",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-3-best",
        "peekOfCode": "n = int(input())\nt = []\np = []\nfor _ in range(n):\n    x,y = map(int, input().split())\n    t.append(x)\n    p.append(y)\ndp = [0]*(n+1)\nresult = 0\nfor i in range(n-1,-1,-1):",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-3-best",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-3-best",
        "peekOfCode": "t = []\np = []\nfor _ in range(n):\n    x,y = map(int, input().split())\n    t.append(x)\n    p.append(y)\ndp = [0]*(n+1)\nresult = 0\nfor i in range(n-1,-1,-1):\n    time = t[i]+i",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-3-best",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-3-best",
        "peekOfCode": "p = []\nfor _ in range(n):\n    x,y = map(int, input().split())\n    t.append(x)\n    p.append(y)\ndp = [0]*(n+1)\nresult = 0\nfor i in range(n-1,-1,-1):\n    time = t[i]+i\n    if time <= n:",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-3-best",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-3-best",
        "peekOfCode": "dp = [0]*(n+1)\nresult = 0\nfor i in range(n-1,-1,-1):\n    time = t[i]+i\n    if time <= n:\n        dp[i] = max(dp[time]+p[i], result)\n        result = dp[i]\n    else:\n        dp[i] = result\nprint(result)",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-3-best",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-3-best",
        "peekOfCode": "result = 0\nfor i in range(n-1,-1,-1):\n    time = t[i]+i\n    if time <= n:\n        dp[i] = max(dp[time]+p[i], result)\n        result = dp[i]\n    else:\n        dp[i] = result\nprint(result)",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).33-3-best",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-1",
        "peekOfCode": "n = int(input())\narray = list(map(int, input().split()))\narray.reverse()\ndp = [1] * (n+1)\nfor i in range(1,n):\n    for j in range(i):\n        if array[i] > array[j]:\n            dp[i] = max(dp[i], dp[j]+1)\nprint(n - max(dp))",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-1",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-1",
        "peekOfCode": "array = list(map(int, input().split()))\narray.reverse()\ndp = [1] * (n+1)\nfor i in range(1,n):\n    for j in range(i):\n        if array[i] > array[j]:\n            dp[i] = max(dp[i], dp[j]+1)\nprint(n - max(dp))",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-1",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-1",
        "peekOfCode": "dp = [1] * (n+1)\nfor i in range(1,n):\n    for j in range(i):\n        if array[i] > array[j]:\n            dp[i] = max(dp[i], dp[j]+1)\nprint(n - max(dp))",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-2",
        "peekOfCode": "n = int(input())\ndata = list(map(int, input().split()))\ndata.reverse()\ndp = [1] * (n+1)\nfor i in range(1,n):\n    for j in range(i):\n        if data[i] > data[j]:\n            dp[i] = max(dp[i], dp[j]+1)\nprint(n-max(dp))",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-2",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-2",
        "peekOfCode": "data = list(map(int, input().split()))\ndata.reverse()\ndp = [1] * (n+1)\nfor i in range(1,n):\n    for j in range(i):\n        if data[i] > data[j]:\n            dp[i] = max(dp[i], dp[j]+1)\nprint(n-max(dp))",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-2",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-2",
        "peekOfCode": "dp = [1] * (n+1)\nfor i in range(1,n):\n    for j in range(i):\n        if data[i] > data[j]:\n            dp[i] = max(dp[i], dp[j]+1)\nprint(n-max(dp))",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-3-best",
        "peekOfCode": "n = int(input())\narray = list(map(int, input().split()))\narray.reverse()\ndp = [1] * n\nfor i in range(1,n):\n    for j in range(i):\n        if array[i] > array[j]: #열외\n            dp[i] = max(dp[i], dp[j]+1)\nprint(n-max(dp))",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-3-best",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-3-best",
        "peekOfCode": "array = list(map(int, input().split()))\narray.reverse()\ndp = [1] * n\nfor i in range(1,n):\n    for j in range(i):\n        if array[i] > array[j]: #열외\n            dp[i] = max(dp[i], dp[j]+1)\nprint(n-max(dp))",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-3-best",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-3-best",
        "peekOfCode": "dp = [1] * n\nfor i in range(1,n):\n    for j in range(i):\n        if array[i] > array[j]: #열외\n            dp[i] = max(dp[i], dp[j]+1)\nprint(n-max(dp))",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).34-3-best",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-1",
        "peekOfCode": "n = int(input())\nugly = [0] * n\nugly[0] = 1\ni2 = i3 = i5 = 0\nnext2, next3, next5 = 2, 3, 5\nfor l in range(1,n):\n    ugly[l] = min(next2, next3, next5)\n    if ugly[l] == next2:\n        i2 += 1\n        next2= ugly[i2] * 2",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-1",
        "documentation": {}
    },
    {
        "label": "ugly",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-1",
        "peekOfCode": "ugly = [0] * n\nugly[0] = 1\ni2 = i3 = i5 = 0\nnext2, next3, next5 = 2, 3, 5\nfor l in range(1,n):\n    ugly[l] = min(next2, next3, next5)\n    if ugly[l] == next2:\n        i2 += 1\n        next2= ugly[i2] * 2\n    if ugly[l] == next3:",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-1",
        "documentation": {}
    },
    {
        "label": "ugly[0]",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-1",
        "peekOfCode": "ugly[0] = 1\ni2 = i3 = i5 = 0\nnext2, next3, next5 = 2, 3, 5\nfor l in range(1,n):\n    ugly[l] = min(next2, next3, next5)\n    if ugly[l] == next2:\n        i2 += 1\n        next2= ugly[i2] * 2\n    if ugly[l] == next3:\n        i3 += 1",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-1",
        "documentation": {}
    },
    {
        "label": "i2",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-1",
        "peekOfCode": "i2 = i3 = i5 = 0\nnext2, next3, next5 = 2, 3, 5\nfor l in range(1,n):\n    ugly[l] = min(next2, next3, next5)\n    if ugly[l] == next2:\n        i2 += 1\n        next2= ugly[i2] * 2\n    if ugly[l] == next3:\n        i3 += 1\n        next3 = ugly[i3] * 3",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-2",
        "peekOfCode": "n = int(input())\nugly = [0] * n\nugly[0] = 1\nidx2 = idx3 = idx5 = 0\nnext2, next3, next5 = 2,3,5\nfor idx in range(1,n):\n    ugly[idx] = min(next2, next3, next5)\n    if ugly[idx] == next2:\n        idx2 += 1\n        next2 = ugly[idx2] * 2",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-2",
        "documentation": {}
    },
    {
        "label": "ugly",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-2",
        "peekOfCode": "ugly = [0] * n\nugly[0] = 1\nidx2 = idx3 = idx5 = 0\nnext2, next3, next5 = 2,3,5\nfor idx in range(1,n):\n    ugly[idx] = min(next2, next3, next5)\n    if ugly[idx] == next2:\n        idx2 += 1\n        next2 = ugly[idx2] * 2\n    elif ugly[idx] == next3:",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-2",
        "documentation": {}
    },
    {
        "label": "ugly[0]",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-2",
        "peekOfCode": "ugly[0] = 1\nidx2 = idx3 = idx5 = 0\nnext2, next3, next5 = 2,3,5\nfor idx in range(1,n):\n    ugly[idx] = min(next2, next3, next5)\n    if ugly[idx] == next2:\n        idx2 += 1\n        next2 = ugly[idx2] * 2\n    elif ugly[idx] == next3:\n        idx3 += 1",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-2",
        "documentation": {}
    },
    {
        "label": "idx2",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-2",
        "peekOfCode": "idx2 = idx3 = idx5 = 0\nnext2, next3, next5 = 2,3,5\nfor idx in range(1,n):\n    ugly[idx] = min(next2, next3, next5)\n    if ugly[idx] == next2:\n        idx2 += 1\n        next2 = ugly[idx2] * 2\n    elif ugly[idx] == next3:\n        idx3 += 1\n        next3 = ugly[idx3] * 3",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-3-best",
        "peekOfCode": "n = int(input())\nidx2, idx3, idx5 = 0,0,0\nnext2, next3, next5 = 2,3,5\nugly = [0] * n\nugly[0] = 1\nfor idx in range(1,n):\n    ugly[idx] = min(next2, next3, next5)\n    if ugly[idx] == next2:\n        idx2 += 1\n        next2 = ugly[idx2] * 2",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-3-best",
        "documentation": {}
    },
    {
        "label": "ugly",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-3-best",
        "peekOfCode": "ugly = [0] * n\nugly[0] = 1\nfor idx in range(1,n):\n    ugly[idx] = min(next2, next3, next5)\n    if ugly[idx] == next2:\n        idx2 += 1\n        next2 = ugly[idx2] * 2\n    if ugly[idx] == next3:\n        idx3 += 1\n        next3 = ugly[idx3] * 3",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-3-best",
        "documentation": {}
    },
    {
        "label": "ugly[0]",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-3-best",
        "peekOfCode": "ugly[0] = 1\nfor idx in range(1,n):\n    ugly[idx] = min(next2, next3, next5)\n    if ugly[idx] == next2:\n        idx2 += 1\n        next2 = ugly[idx2] * 2\n    if ugly[idx] == next3:\n        idx3 += 1\n        next3 = ugly[idx3] * 3\n    if ugly[idx] == next5:",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).35-3-best",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-1",
        "peekOfCode": "a = input()\nb = input()",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-1",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-1",
        "peekOfCode": "b = input()",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-1",
        "documentation": {}
    },
    {
        "label": "edit_dist",
        "kind": 2,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-2",
        "peekOfCode": "def edit_dist(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][0] = i\n    for j in range(1, m+1):\n        dp[0][j] = j\n    for i in range(1,n+1):\n        for j in range(1,m+1):",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-2",
        "peekOfCode": "a = input()\nb = input()\ndef edit_dist(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][0] = i\n    for j in range(1, m+1):\n        dp[0][j] = j",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-2",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-2",
        "peekOfCode": "b = input()\ndef edit_dist(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][0] = i\n    for j in range(1, m+1):\n        dp[0][j] = j\n    for i in range(1,n+1):",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-3-best",
        "peekOfCode": "a = input()\nb = input()\nn = len(a)\nm = len(b)\ndp = [[0]*(1+m) for _ in range(1+n)]\nfor i in range(m+1):\n    dp[0][i] = i\nfor i in range(n+1):\n    dp[i][0] = i\nfor i in range(1,n+1):",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-3-best",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-3-best",
        "peekOfCode": "b = input()\nn = len(a)\nm = len(b)\ndp = [[0]*(1+m) for _ in range(1+n)]\nfor i in range(m+1):\n    dp[0][i] = i\nfor i in range(n+1):\n    dp[i][0] = i\nfor i in range(1,n+1):\n    for j in range(1,m+1):",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-3-best",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-3-best",
        "peekOfCode": "n = len(a)\nm = len(b)\ndp = [[0]*(1+m) for _ in range(1+n)]\nfor i in range(m+1):\n    dp[0][i] = i\nfor i in range(n+1):\n    dp[i][0] = i\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        if a[i-1] == b[j-1]:",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-3-best",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-3-best",
        "peekOfCode": "m = len(b)\ndp = [[0]*(1+m) for _ in range(1+n)]\nfor i in range(m+1):\n    dp[0][i] = i\nfor i in range(n+1):\n    dp[i][0] = i\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        if a[i-1] == b[j-1]:\n            dp[i][j] = dp[i-1][j-1]",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-3-best",
        "documentation": {}
    },
    {
        "label": "dp",
        "kind": 5,
        "importPath": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-3-best",
        "description": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-3-best",
        "peekOfCode": "dp = [[0]*(1+m) for _ in range(1+n)]\nfor i in range(m+1):\n    dp[0][i] = i\nfor i in range(n+1):\n    dp[i][0] = i\nfor i in range(1,n+1):\n    for j in range(1,m+1):\n        if a[i-1] == b[j-1]:\n            dp[i][j] = dp[i-1][j-1]\n        else:",
        "detail": "Coding_test.Chapter 16. 다이나믹 프로그래밍(完).36-3-best",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).37-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).37-1",
        "peekOfCode": "input = sys.stdin.readline\nINF = int(1e9)\nn = int(input())\nm = int(input())\ngraph = [[INF]*(n+1) for _ in range(n+1)]\n#initial\nfor a in range(1,n+1):\n    for b in range(1,n+1):\n        if a == b:\n            graph[a][b] = 0",
        "detail": "Coding_test.Chapter 17. 최단경로(完).37-1",
        "documentation": {}
    },
    {
        "label": "INF",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).37-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).37-1",
        "peekOfCode": "INF = int(1e9)\nn = int(input())\nm = int(input())\ngraph = [[INF]*(n+1) for _ in range(n+1)]\n#initial\nfor a in range(1,n+1):\n    for b in range(1,n+1):\n        if a == b:\n            graph[a][b] = 0\nfor i in range(m):",
        "detail": "Coding_test.Chapter 17. 최단경로(完).37-1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).37-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).37-1",
        "peekOfCode": "n = int(input())\nm = int(input())\ngraph = [[INF]*(n+1) for _ in range(n+1)]\n#initial\nfor a in range(1,n+1):\n    for b in range(1,n+1):\n        if a == b:\n            graph[a][b] = 0\nfor i in range(m):\n    a,b,c = map(int, input().split())",
        "detail": "Coding_test.Chapter 17. 최단경로(完).37-1",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).37-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).37-1",
        "peekOfCode": "m = int(input())\ngraph = [[INF]*(n+1) for _ in range(n+1)]\n#initial\nfor a in range(1,n+1):\n    for b in range(1,n+1):\n        if a == b:\n            graph[a][b] = 0\nfor i in range(m):\n    a,b,c = map(int, input().split())\n    if graph[a][b] > c:",
        "detail": "Coding_test.Chapter 17. 최단경로(完).37-1",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).37-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).37-1",
        "peekOfCode": "graph = [[INF]*(n+1) for _ in range(n+1)]\n#initial\nfor a in range(1,n+1):\n    for b in range(1,n+1):\n        if a == b:\n            graph[a][b] = 0\nfor i in range(m):\n    a,b,c = map(int, input().split())\n    if graph[a][b] > c:\n        graph[a][b] = c",
        "detail": "Coding_test.Chapter 17. 최단경로(完).37-1",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).37-2",
        "description": "Coding_test.Chapter 17. 최단경로(完).37-2",
        "peekOfCode": "input = sys.stdin.readline\nn = int(input())\nm = int(input())\nadj = [[1e9] * (n+1) for _ in range(n+1)]\nfor _ in range(m):\n    a,b,c = map(int, input().split())\n    adj[a][b] = min(adj[a][b], c)\nfor k in range(1,n+1):\n    for i in range(1,n+1):\n        for j in range(1,n+1):",
        "detail": "Coding_test.Chapter 17. 최단경로(完).37-2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).37-2",
        "description": "Coding_test.Chapter 17. 최단경로(完).37-2",
        "peekOfCode": "n = int(input())\nm = int(input())\nadj = [[1e9] * (n+1) for _ in range(n+1)]\nfor _ in range(m):\n    a,b,c = map(int, input().split())\n    adj[a][b] = min(adj[a][b], c)\nfor k in range(1,n+1):\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i != j:",
        "detail": "Coding_test.Chapter 17. 최단경로(完).37-2",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).37-2",
        "description": "Coding_test.Chapter 17. 최단경로(完).37-2",
        "peekOfCode": "m = int(input())\nadj = [[1e9] * (n+1) for _ in range(n+1)]\nfor _ in range(m):\n    a,b,c = map(int, input().split())\n    adj[a][b] = min(adj[a][b], c)\nfor k in range(1,n+1):\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i != j:\n                adj[i][j] = min(adj[i][j], adj[i][k]+adj[k][j]) ",
        "detail": "Coding_test.Chapter 17. 최단경로(完).37-2",
        "documentation": {}
    },
    {
        "label": "adj",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).37-2",
        "description": "Coding_test.Chapter 17. 최단경로(完).37-2",
        "peekOfCode": "adj = [[1e9] * (n+1) for _ in range(n+1)]\nfor _ in range(m):\n    a,b,c = map(int, input().split())\n    adj[a][b] = min(adj[a][b], c)\nfor k in range(1,n+1):\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i != j:\n                adj[i][j] = min(adj[i][j], adj[i][k]+adj[k][j]) \nfor i in range(1,n+1):",
        "detail": "Coding_test.Chapter 17. 최단경로(完).37-2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).37-3-best",
        "description": "Coding_test.Chapter 17. 최단경로(完).37-3-best",
        "peekOfCode": "n = int(input())\nm = int(input())\nadj = [[1e9] *(n+1) for _ in range(n+1)]\nfor i in range(1,n+1):\n    adj[i][i] = 0\nfor _ in range(m):\n    a,b,c = map(int,input().split())\n    adj[a][b] = min(adj[a][b], c)\nfor k in range(1,n+1):\n    for a in range(1, n+1):",
        "detail": "Coding_test.Chapter 17. 최단경로(完).37-3-best",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).37-3-best",
        "description": "Coding_test.Chapter 17. 최단경로(完).37-3-best",
        "peekOfCode": "m = int(input())\nadj = [[1e9] *(n+1) for _ in range(n+1)]\nfor i in range(1,n+1):\n    adj[i][i] = 0\nfor _ in range(m):\n    a,b,c = map(int,input().split())\n    adj[a][b] = min(adj[a][b], c)\nfor k in range(1,n+1):\n    for a in range(1, n+1):\n        for b in range(1, n+1):",
        "detail": "Coding_test.Chapter 17. 최단경로(完).37-3-best",
        "documentation": {}
    },
    {
        "label": "adj",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).37-3-best",
        "description": "Coding_test.Chapter 17. 최단경로(完).37-3-best",
        "peekOfCode": "adj = [[1e9] *(n+1) for _ in range(n+1)]\nfor i in range(1,n+1):\n    adj[i][i] = 0\nfor _ in range(m):\n    a,b,c = map(int,input().split())\n    adj[a][b] = min(adj[a][b], c)\nfor k in range(1,n+1):\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            adj[a][b] = min(adj[a][b], adj[a][k]+adj[k][b])",
        "detail": "Coding_test.Chapter 17. 최단경로(完).37-3-best",
        "documentation": {}
    },
    {
        "label": "INF",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).38-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).38-1",
        "peekOfCode": "INF = int(1e9)\nn, m = map(int, input().split())\ngraph = [[INF]*(n+1) for _ in range(n+1)]\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a][b] = 1\nfor k in range(1,n+1):\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            if a == b:",
        "detail": "Coding_test.Chapter 17. 최단경로(完).38-1",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).38-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).38-1",
        "peekOfCode": "graph = [[INF]*(n+1) for _ in range(n+1)]\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a][b] = 1\nfor k in range(1,n+1):\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            if a == b:\n                graph[a][b] = 0\n            else:",
        "detail": "Coding_test.Chapter 17. 최단경로(完).38-1",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).38-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).38-1",
        "peekOfCode": "data = [[INF]*(n+1) for _ in range(n+1)]\nfor i in range(1,n+1):\n    for j in range(1,n+1):\n            data[i][j] = min(graph[i][j], graph[j][i])\ncount = 0\nfor a in range(1, n+1):\n    check = True\n    for b in range(1, n+1):\n        if data[a][b] == INF:\n            check=False",
        "detail": "Coding_test.Chapter 17. 최단경로(完).38-1",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).38-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).38-1",
        "peekOfCode": "count = 0\nfor a in range(1, n+1):\n    check = True\n    for b in range(1, n+1):\n        if data[a][b] == INF:\n            check=False\n            break\n    if check:\n        count += 1\nprint(count)",
        "detail": "Coding_test.Chapter 17. 최단경로(完).38-1",
        "documentation": {}
    },
    {
        "label": "n,m",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).38-2-best",
        "description": "Coding_test.Chapter 17. 최단경로(完).38-2-best",
        "peekOfCode": "n,m = map(int, input().split())\nscore = [[1e9]*(n+1) for _ in range(n+1)]\nfor _ in range(m):\n    a,b = map(int, input().split())\n    score[a][b] = 1\nfor k in range(1,n+1):\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            score[i][j] = min(score[i][j], score[i][k]+score[k][j])\nanswer = 0",
        "detail": "Coding_test.Chapter 17. 최단경로(完).38-2-best",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).38-2-best",
        "description": "Coding_test.Chapter 17. 최단경로(完).38-2-best",
        "peekOfCode": "score = [[1e9]*(n+1) for _ in range(n+1)]\nfor _ in range(m):\n    a,b = map(int, input().split())\n    score[a][b] = 1\nfor k in range(1,n+1):\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            score[i][j] = min(score[i][j], score[i][k]+score[k][j])\nanswer = 0\nfor i in range(1,n+1):",
        "detail": "Coding_test.Chapter 17. 최단경로(完).38-2-best",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).38-2-best",
        "description": "Coding_test.Chapter 17. 최단경로(完).38-2-best",
        "peekOfCode": "answer = 0\nfor i in range(1,n+1):\n    count = 0\n    for j in range(1,n+1):\n        if score[i][j] != 1e9 or score[j][i] != 1e9:\n            count += 1\n    if count == n - 1:\n        answer += 1\nprint(answer)",
        "detail": "Coding_test.Chapter 17. 최단경로(完).38-2-best",
        "documentation": {}
    },
    {
        "label": "n,m",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).38-3",
        "description": "Coding_test.Chapter 17. 최단경로(完).38-3",
        "peekOfCode": "n,m = map(int,input().split())\nadj = [[1e9] * (n+1) for _ in range(n+1)]\nfor _ in range(m):\n    a, b = map(int,input().split())\n    adj[a][b] = 1\nfor k in range(1,n+1):\n    for a in range(1,n+1):\n        for b in range(1,n+1):\n            adj[a][b] = min(adj[a][b], adj[a][k]+adj[k][b])\nanswer = 0",
        "detail": "Coding_test.Chapter 17. 최단경로(完).38-3",
        "documentation": {}
    },
    {
        "label": "adj",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).38-3",
        "description": "Coding_test.Chapter 17. 최단경로(完).38-3",
        "peekOfCode": "adj = [[1e9] * (n+1) for _ in range(n+1)]\nfor _ in range(m):\n    a, b = map(int,input().split())\n    adj[a][b] = 1\nfor k in range(1,n+1):\n    for a in range(1,n+1):\n        for b in range(1,n+1):\n            adj[a][b] = min(adj[a][b], adj[a][k]+adj[k][b])\nanswer = 0\nfor i in range(1,n+1):",
        "detail": "Coding_test.Chapter 17. 최단경로(完).38-3",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).38-3",
        "description": "Coding_test.Chapter 17. 최단경로(完).38-3",
        "peekOfCode": "answer = 0\nfor i in range(1,n+1):\n    count = 0\n    for j in range(1,n+1):\n        if adj[i][j] != 1e9 or adj[j][i] != 1e9:\n            count += 1\n    if count == n - 1:\n        answer += 1\nprint(answer)",
        "detail": "Coding_test.Chapter 17. 최단경로(完).38-3",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).39-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).39-1",
        "peekOfCode": "input = sys.stdin.readline\nt = int(input())\nINF = int(1e9)\ndx = [-1,0,1,0]\ndy = [0,1,0,-1]\nfor _ in range(t):\n    n = int(input())\n    graph = []\n    for i in range(n):\n        graph.append(list(map(int, input().split())))",
        "detail": "Coding_test.Chapter 17. 최단경로(完).39-1",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).39-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).39-1",
        "peekOfCode": "t = int(input())\nINF = int(1e9)\ndx = [-1,0,1,0]\ndy = [0,1,0,-1]\nfor _ in range(t):\n    n = int(input())\n    graph = []\n    for i in range(n):\n        graph.append(list(map(int, input().split())))\n    distance= [[INF] * n for _ in range(n)]",
        "detail": "Coding_test.Chapter 17. 최단경로(完).39-1",
        "documentation": {}
    },
    {
        "label": "INF",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).39-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).39-1",
        "peekOfCode": "INF = int(1e9)\ndx = [-1,0,1,0]\ndy = [0,1,0,-1]\nfor _ in range(t):\n    n = int(input())\n    graph = []\n    for i in range(n):\n        graph.append(list(map(int, input().split())))\n    distance= [[INF] * n for _ in range(n)]\n    x, y = 0, 0",
        "detail": "Coding_test.Chapter 17. 최단경로(完).39-1",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).39-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).39-1",
        "peekOfCode": "dx = [-1,0,1,0]\ndy = [0,1,0,-1]\nfor _ in range(t):\n    n = int(input())\n    graph = []\n    for i in range(n):\n        graph.append(list(map(int, input().split())))\n    distance= [[INF] * n for _ in range(n)]\n    x, y = 0, 0\n    q = [(graph[x][y], x, y)]",
        "detail": "Coding_test.Chapter 17. 최단경로(完).39-1",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).39-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).39-1",
        "peekOfCode": "dy = [0,1,0,-1]\nfor _ in range(t):\n    n = int(input())\n    graph = []\n    for i in range(n):\n        graph.append(list(map(int, input().split())))\n    distance= [[INF] * n for _ in range(n)]\n    x, y = 0, 0\n    q = [(graph[x][y], x, y)]\n    distance[x][y] = graph[x][y] ",
        "detail": "Coding_test.Chapter 17. 최단경로(完).39-1",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).39-2",
        "description": "Coding_test.Chapter 17. 최단경로(完).39-2",
        "peekOfCode": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    graph = []\n    for _ in range(n):\n        graph.append(list(map(int, input().split())))\n    distance = [[1e9] * n for _ in range(n)]\n    q = []\n    heapq.heappush(q,(graph[0][0],0,0))\n    dx = [-1,0,1,0]",
        "detail": "Coding_test.Chapter 17. 최단경로(完).39-2",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).39-3-best",
        "description": "Coding_test.Chapter 17. 최단경로(完).39-3-best",
        "peekOfCode": "t = int(input())\ndx = [-1,0,1,0]\ndy = [0,-1,0,1]\nfor _ in range(t):\n    n = int(input())\n    mars = []\n    for _ in range(n):\n        mars.append(list(map(int,input().split())))\n    distance = [[1e9] * n for _ in range(n)]\n    q = []",
        "detail": "Coding_test.Chapter 17. 최단경로(完).39-3-best",
        "documentation": {}
    },
    {
        "label": "dx",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).39-3-best",
        "description": "Coding_test.Chapter 17. 최단경로(完).39-3-best",
        "peekOfCode": "dx = [-1,0,1,0]\ndy = [0,-1,0,1]\nfor _ in range(t):\n    n = int(input())\n    mars = []\n    for _ in range(n):\n        mars.append(list(map(int,input().split())))\n    distance = [[1e9] * n for _ in range(n)]\n    q = []\n    heapq.heappush(q,(mars[0][0], 0, 0))",
        "detail": "Coding_test.Chapter 17. 최단경로(完).39-3-best",
        "documentation": {}
    },
    {
        "label": "dy",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).39-3-best",
        "description": "Coding_test.Chapter 17. 최단경로(完).39-3-best",
        "peekOfCode": "dy = [0,-1,0,1]\nfor _ in range(t):\n    n = int(input())\n    mars = []\n    for _ in range(n):\n        mars.append(list(map(int,input().split())))\n    distance = [[1e9] * n for _ in range(n)]\n    q = []\n    heapq.heappush(q,(mars[0][0], 0, 0))\n    distance[0][0] = mars[0][0]",
        "detail": "Coding_test.Chapter 17. 최단경로(完).39-3-best",
        "documentation": {}
    },
    {
        "label": "INF",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "peekOfCode": "INF = int(1e9)\nn, m = map(int, input().split())\ngraph = [[] for _ in range(n+1)]\ndistance = [INF] * (n+1)\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a].append([b, 1])\n    graph[b].append([a, 1])\nstart = 1\nq = []",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "peekOfCode": "graph = [[] for _ in range(n+1)]\ndistance = [INF] * (n+1)\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a].append([b, 1])\n    graph[b].append([a, 1])\nstart = 1\nq = []\nheapq.heappush(q,(0,start))\ndistance[start] = 0",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "documentation": {}
    },
    {
        "label": "distance",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "peekOfCode": "distance = [INF] * (n+1)\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a].append([b, 1])\n    graph[b].append([a, 1])\nstart = 1\nq = []\nheapq.heappush(q,(0,start))\ndistance[start] = 0\nwhile q:",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "peekOfCode": "start = 1\nq = []\nheapq.heappush(q,(0,start))\ndistance[start] = 0\nwhile q:\n    dist, now = heapq.heappop(q)\n    if distance[now] < dist:\n        continue\n    for i in graph[now]:\n        cost = dist + i[1]",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "peekOfCode": "q = []\nheapq.heappush(q,(0,start))\ndistance[start] = 0\nwhile q:\n    dist, now = heapq.heappop(q)\n    if distance[now] < dist:\n        continue\n    for i in graph[now]:\n        cost = dist + i[1]\n        if cost < distance[i[0]]:",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "documentation": {}
    },
    {
        "label": "distance[start]",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "peekOfCode": "distance[start] = 0\nwhile q:\n    dist, now = heapq.heappop(q)\n    if distance[now] < dist:\n        continue\n    for i in graph[now]:\n        cost = dist + i[1]\n        if cost < distance[i[0]]:\n            distance[i[0]] = cost\n            heapq.heappush(q, (cost, i[0]))",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "documentation": {}
    },
    {
        "label": "max_distance",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "peekOfCode": "max_distance = max(distance[1:])\nmax_index = distance.index(max_distance)\nmax_count = distance.count(max_distance)\nprint(max_index, max_distance, max_count )",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "documentation": {}
    },
    {
        "label": "max_index",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "peekOfCode": "max_index = distance.index(max_distance)\nmax_count = distance.count(max_distance)\nprint(max_index, max_distance, max_count )",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "documentation": {}
    },
    {
        "label": "max_count",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "peekOfCode": "max_count = distance.count(max_distance)\nprint(max_index, max_distance, max_count )",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-1",
        "documentation": {}
    },
    {
        "label": "n,m",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "peekOfCode": "n,m = map(int, input().split())\ngraph = [[] for _ in range(n+1)]\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a].append((b,1))\n    graph[b].append((a,1))\ndistance = [1e9] * (n+1)\nq = []\nheapq.heappush(q,(0,1))\ndistance[1] = 0",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "peekOfCode": "graph = [[] for _ in range(n+1)]\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a].append((b,1))\n    graph[b].append((a,1))\ndistance = [1e9] * (n+1)\nq = []\nheapq.heappush(q,(0,1))\ndistance[1] = 0\nwhile q:",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "documentation": {}
    },
    {
        "label": "distance",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "peekOfCode": "distance = [1e9] * (n+1)\nq = []\nheapq.heappush(q,(0,1))\ndistance[1] = 0\nwhile q:\n    dist, now = heapq.heappop(q)\n    if distance[now] < dist:\n        continue\n    for i in graph[now]:\n        cost = dist + i[1]",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "peekOfCode": "q = []\nheapq.heappush(q,(0,1))\ndistance[1] = 0\nwhile q:\n    dist, now = heapq.heappop(q)\n    if distance[now] < dist:\n        continue\n    for i in graph[now]:\n        cost = dist + i[1]\n        if cost < distance[i[0]]:",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "documentation": {}
    },
    {
        "label": "distance[1]",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "peekOfCode": "distance[1] = 0\nwhile q:\n    dist, now = heapq.heappop(q)\n    if distance[now] < dist:\n        continue\n    for i in graph[now]:\n        cost = dist + i[1]\n        if cost < distance[i[0]]:\n            distance[i[0]] = cost\n            heapq.heappush(q,(cost, i[0]))",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "documentation": {}
    },
    {
        "label": "distance",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "peekOfCode": "distance = [dist if dist!=1e9 else -1 for dist in distance[1:]]\nprint(distance.index(max(distance))+1, max(distance), distance.count(max(distance)))",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-2-best",
        "documentation": {}
    },
    {
        "label": "n,m",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "peekOfCode": "n,m = map(int,input().split())\ngraph = [[] for _ in range(n+1)]\ndistance = [1e9] * (n+1)\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a].append((b,1))\n    graph[b].append((a,1))\nq = []\nheapq.heappush(q,(0, 1))\ndistance[1] = 0",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "peekOfCode": "graph = [[] for _ in range(n+1)]\ndistance = [1e9] * (n+1)\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a].append((b,1))\n    graph[b].append((a,1))\nq = []\nheapq.heappush(q,(0, 1))\ndistance[1] = 0\nwhile q:",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "documentation": {}
    },
    {
        "label": "distance",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "peekOfCode": "distance = [1e9] * (n+1)\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a].append((b,1))\n    graph[b].append((a,1))\nq = []\nheapq.heappush(q,(0, 1))\ndistance[1] = 0\nwhile q:\n    dist,now = heapq.heappop(q)",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "peekOfCode": "q = []\nheapq.heappush(q,(0, 1))\ndistance[1] = 0\nwhile q:\n    dist,now = heapq.heappop(q)\n    if distance[now] < dist:\n        continue\n    for i in graph[now]:\n        cost = dist + i[1]\n        if cost < distance[i[0]]:",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "documentation": {}
    },
    {
        "label": "distance[1]",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "peekOfCode": "distance[1] = 0\nwhile q:\n    dist,now = heapq.heappop(q)\n    if distance[now] < dist:\n        continue\n    for i in graph[now]:\n        cost = dist + i[1]\n        if cost < distance[i[0]]:\n            distance[i[0]] = cost\n            heapq.heappush(q,(cost, i[0]))",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "documentation": {}
    },
    {
        "label": "distance",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "peekOfCode": "distance = [dist if dist != 1e9 else -1 for dist in distance[1:]]\nresult = max(distance)\nprint(distance.index(result)+1, result, distance.count(result))",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "description": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "peekOfCode": "result = max(distance)\nprint(distance.index(result)+1, result, distance.count(result))",
        "detail": "Coding_test.Chapter 17. 최단경로(完).40-3",
        "documentation": {}
    },
    {
        "label": "find_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).41-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).41-1",
        "peekOfCode": "def find_parent(parent, x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).41-1",
        "documentation": {}
    },
    {
        "label": "union_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).41-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).41-1",
        "peekOfCode": "def union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:\n        parent[a] = b\nparent = [0] * (n+1)\nfor i in range(1, n+1):\n    parent[i] = i",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).41-1",
        "documentation": {}
    },
    {
        "label": "parent",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).41-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).41-1",
        "peekOfCode": "parent = [0] * (n+1)\nfor i in range(1, n+1):\n    parent[i] = i\nfor i in range(n):\n    data = list(map(int, input().split()))\n    for idx in range(n):\n        if data[idx] == 1:\n            union_parent(parent, i+1, idx+1)\nplan = list(map(int, input().split()))\nresult = True",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).41-1",
        "documentation": {}
    },
    {
        "label": "plan",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).41-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).41-1",
        "peekOfCode": "plan = list(map(int, input().split()))\nresult = True\nfor i in range(m-1):\n    if find_parent(parent, plan[i]) != find_parent(parent, plan[i+1]):\n        result = False\nif result:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).41-1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).41-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).41-1",
        "peekOfCode": "result = True\nfor i in range(m-1):\n    if find_parent(parent, plan[i]) != find_parent(parent, plan[i+1]):\n        result = False\nif result:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).41-1",
        "documentation": {}
    },
    {
        "label": "find_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).41-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).41-2",
        "peekOfCode": "def find_parent(parent, x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).41-2",
        "documentation": {}
    },
    {
        "label": "union_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).41-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).41-2",
        "peekOfCode": "def union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:\n        parent[a] = b    \nparent = [0] * (n+1)\nfor i in range(n):\n    data = list(map(int, input().split()))",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).41-2",
        "documentation": {}
    },
    {
        "label": "parent",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).41-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).41-2",
        "peekOfCode": "parent = [0] * (n+1)\nfor i in range(n):\n    data = list(map(int, input().split()))\n    for j in range(n):\n        if data[j] == 1:\n            union_parent(parent, i+1, j+1)\nplan = list(map(int, input().split()))\nresult = True\nfor i in range(m-1):\n    if find_parent(parent, plan[i]) != find_parent(parent, plan[i+1]):",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).41-2",
        "documentation": {}
    },
    {
        "label": "plan",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).41-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).41-2",
        "peekOfCode": "plan = list(map(int, input().split()))\nresult = True\nfor i in range(m-1):\n    if find_parent(parent, plan[i]) != find_parent(parent, plan[i+1]):\n        result = False\nif result:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).41-2",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).41-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).41-2",
        "peekOfCode": "result = True\nfor i in range(m-1):\n    if find_parent(parent, plan[i]) != find_parent(parent, plan[i+1]):\n        result = False\nif result:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).41-2",
        "documentation": {}
    },
    {
        "label": "find_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).41-3-parent",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).41-3-parent",
        "peekOfCode": "def find_parent(parent,x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).41-3-parent",
        "documentation": {}
    },
    {
        "label": "union_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).41-3-parent",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).41-3-parent",
        "peekOfCode": "def union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:\n        parent[a] = b\nn, m = map(int, input().split())\nparent = [i for i in range(n+1)]\nfor i in range(n):",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).41-3-parent",
        "documentation": {}
    },
    {
        "label": "parent",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).41-3-parent",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).41-3-parent",
        "peekOfCode": "parent = [i for i in range(n+1)]\nfor i in range(n):\n    array = list(map(int, input().split()))\n    for j in range(n):\n        if array[j] == 1:\n            union_parent(parent, i+1,j+1)\nplan = list(map(int, input().split()))\nresult = True\nfor i in range(len(plan)-1):\n    if find_parent(parent, plan[i]) != find_parent(parent, plan[i+1]):",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).41-3-parent",
        "documentation": {}
    },
    {
        "label": "plan",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).41-3-parent",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).41-3-parent",
        "peekOfCode": "plan = list(map(int, input().split()))\nresult = True\nfor i in range(len(plan)-1):\n    if find_parent(parent, plan[i]) != find_parent(parent, plan[i+1]):\n        result = False\n        break\nif result:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).41-3-parent",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).41-3-parent",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).41-3-parent",
        "peekOfCode": "result = True\nfor i in range(len(plan)-1):\n    if find_parent(parent, plan[i]) != find_parent(parent, plan[i+1]):\n        result = False\n        break\nif result:\n    print(\"YES\")\nelse:\n    print(\"NO\")",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).41-3-parent",
        "documentation": {}
    },
    {
        "label": "find_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "peekOfCode": "def find_parent(parent,x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "documentation": {}
    },
    {
        "label": "union_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "peekOfCode": "def union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:\n        parent[a] = b\nparent = [0] * (g+1)\nfor i in range(1, g+1):\n    parent[i] = i",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "peekOfCode": "g = int(input())\np = int(input())\ndef find_parent(parent,x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "peekOfCode": "p = int(input())\ndef find_parent(parent,x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "documentation": {}
    },
    {
        "label": "parent",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "peekOfCode": "parent = [0] * (g+1)\nfor i in range(1, g+1):\n    parent[i] = i\nresult = 0\nfor _ in range(p):\n    g_i = int(input())\n    data = find_parent(parent, g_i)\n    if data == 0:\n        break\n    union_parent(parent, data, data-1)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "peekOfCode": "result = 0\nfor _ in range(p):\n    g_i = int(input())\n    data = find_parent(parent, g_i)\n    if data == 0:\n        break\n    union_parent(parent, data, data-1)\n    result += 1\nprint(result)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-1",
        "documentation": {}
    },
    {
        "label": "find_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "peekOfCode": "def find_parent(parent,x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent,a,b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "documentation": {}
    },
    {
        "label": "union_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "peekOfCode": "def union_parent(parent,a,b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:\n        parent[a] = b\nparent = [i for i in range(g+1)]\nresult = 0\nfor i in range(p):",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "peekOfCode": "g = int(input())\np = int(input())\ndef find_parent(parent,x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent,a,b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "peekOfCode": "p = int(input())\ndef find_parent(parent,x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent,a,b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "documentation": {}
    },
    {
        "label": "parent",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "peekOfCode": "parent = [i for i in range(g+1)]\nresult = 0\nfor i in range(p):\n    idx = int(input())\n    data = find_parent(parent ,idx)\n    if data == 0:\n        break\n    union_parent(parent, data, data-1)\n    result += 1\nprint(result)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "peekOfCode": "result = 0\nfor i in range(p):\n    idx = int(input())\n    data = find_parent(parent ,idx)\n    if data == 0:\n        break\n    union_parent(parent, data, data-1)\n    result += 1\nprint(result)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-2",
        "documentation": {}
    },
    {
        "label": "find_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "peekOfCode": "def find_parent(parent, x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent,a,b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "documentation": {}
    },
    {
        "label": "union_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "peekOfCode": "def union_parent(parent,a,b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:\n        parent[a] = b\nplanes = []\nfor _ in range(p):\n    planes.append(int(input()))",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "peekOfCode": "g = int(input())\np = int(input())\nparent = [i for i in range(g+1)]\nresult = 0\ndef find_parent(parent, x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent,a,b):\n    a = find_parent(parent, a)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "peekOfCode": "p = int(input())\nparent = [i for i in range(g+1)]\nresult = 0\ndef find_parent(parent, x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent,a,b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "documentation": {}
    },
    {
        "label": "parent",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "peekOfCode": "parent = [i for i in range(g+1)]\nresult = 0\ndef find_parent(parent, x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent,a,b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "peekOfCode": "result = 0\ndef find_parent(parent, x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent,a,b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "documentation": {}
    },
    {
        "label": "planes",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "peekOfCode": "planes = []\nfor _ in range(p):\n    planes.append(int(input()))\nfor i in range(p):\n    data = find_parent(parent, planes[i])\n    if data != 0:\n        union_parent(parent, data-1, data)\n        result += 1\n    else:\n        break",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).42-3-best",
        "documentation": {}
    },
    {
        "label": "find_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "peekOfCode": "def find_parent(parent, x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "documentation": {}
    },
    {
        "label": "union_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "peekOfCode": "def union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:\n        parent[a] = b\nparent = [0] * (n)\nedges = []\nresult = 0",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "documentation": {}
    },
    {
        "label": "parent",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "peekOfCode": "parent = [0] * (n)\nedges = []\nresult = 0\ntotal = 0\nfor i in range(n):\n    parent[i] = i\nfor _ in range(m):\n    x, y, z = map(int, input().split())\n    edges.append((z,x,y))\nedges.sort()",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "peekOfCode": "edges = []\nresult = 0\ntotal = 0\nfor i in range(n):\n    parent[i] = i\nfor _ in range(m):\n    x, y, z = map(int, input().split())\n    edges.append((z,x,y))\nedges.sort()\nfor edge in edges:",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "peekOfCode": "result = 0\ntotal = 0\nfor i in range(n):\n    parent[i] = i\nfor _ in range(m):\n    x, y, z = map(int, input().split())\n    edges.append((z,x,y))\nedges.sort()\nfor edge in edges:\n    cost, x, y = edge",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "peekOfCode": "total = 0\nfor i in range(n):\n    parent[i] = i\nfor _ in range(m):\n    x, y, z = map(int, input().split())\n    edges.append((z,x,y))\nedges.sort()\nfor edge in edges:\n    cost, x, y = edge\n    total += cost",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-1",
        "documentation": {}
    },
    {
        "label": "find_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "peekOfCode": "def find_parent(parent,x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "documentation": {}
    },
    {
        "label": "union_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "peekOfCode": "def union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:\n        parent[a] = b\nparent = [i for i in range(n)]\ngraph.sort()\nresult = 0",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "documentation": {}
    },
    {
        "label": "n,m",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "peekOfCode": "n,m = map(int, input().split())\ngraph = []\nfor _ in range(m):\n    x,y,z = map(int, input().split())\n    graph.append((z,x,y))\ndef find_parent(parent,x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent, a, b):",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "peekOfCode": "graph = []\nfor _ in range(m):\n    x,y,z = map(int, input().split())\n    graph.append((z,x,y))\ndef find_parent(parent,x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent, a, b):\n    a = find_parent(parent, a)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "documentation": {}
    },
    {
        "label": "parent",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "peekOfCode": "parent = [i for i in range(n)]\ngraph.sort()\nresult = 0\ntotal = 0\nfor g in graph:\n    cost,x,y = g\n    total += cost\n    if find_parent(parent,x) != find_parent(parent,y):\n        union_parent(parent, x, y)\n        result += cost",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "peekOfCode": "result = 0\ntotal = 0\nfor g in graph:\n    cost,x,y = g\n    total += cost\n    if find_parent(parent,x) != find_parent(parent,y):\n        union_parent(parent, x, y)\n        result += cost\nprint(total - cost)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "peekOfCode": "total = 0\nfor g in graph:\n    cost,x,y = g\n    total += cost\n    if find_parent(parent,x) != find_parent(parent,y):\n        union_parent(parent, x, y)\n        result += cost\nprint(total - cost)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-2",
        "documentation": {}
    },
    {
        "label": "find_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "peekOfCode": "def find_parent(parent, x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "documentation": {}
    },
    {
        "label": "union_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "peekOfCode": "def union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:\n        parent[a] = b\nedges = []\nfor _ in range(m):\n    a, b, cost = map(int, input().split())",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "documentation": {}
    },
    {
        "label": "n,m",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "peekOfCode": "n,m = map(int,input().split())\nparent = [i for i in range(n+1)]\ndef find_parent(parent, x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "documentation": {}
    },
    {
        "label": "parent",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "peekOfCode": "parent = [i for i in range(n+1)]\ndef find_parent(parent, x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "peekOfCode": "edges = []\nfor _ in range(m):\n    a, b, cost = map(int, input().split())\n    edges.append((cost, a, b))\nedges.sort()\nresult = 0\ntotal = 0\nfor edge in edges:\n    cost, a, b = edge\n    total += cost",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "peekOfCode": "result = 0\ntotal = 0\nfor edge in edges:\n    cost, a, b = edge\n    total += cost\n    if find_parent(parent, a) != find_parent(parent, b):\n        union_parent(parent, a, b)\n        result += cost\nprint(total-result)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "peekOfCode": "total = 0\nfor edge in edges:\n    cost, a, b = edge\n    total += cost\n    if find_parent(parent, a) != find_parent(parent, b):\n        union_parent(parent, a, b)\n        result += cost\nprint(total-result)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).43-3",
        "documentation": {}
    },
    {
        "label": "find_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "peekOfCode": "def find_parent(parent, x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "documentation": {}
    },
    {
        "label": "union_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "peekOfCode": "def union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:\n        parent[a] = b\nn = int(input())\nparent = [i for i in range(n)]  # Initialize parent array\nx = []",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "peekOfCode": "input = sys.stdin.readline\ndef find_parent(parent, x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "peekOfCode": "n = int(input())\nparent = [i for i in range(n)]  # Initialize parent array\nx = []\ny = []\nz = []\nfor i in range(n):\n    data = list(map(int, input().split()))\n    x.append((data[0], i))\n    y.append((data[1], i))\n    z.append((data[2], i))",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "documentation": {}
    },
    {
        "label": "parent",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "peekOfCode": "parent = [i for i in range(n)]  # Initialize parent array\nx = []\ny = []\nz = []\nfor i in range(n):\n    data = list(map(int, input().split()))\n    x.append((data[0], i))\n    y.append((data[1], i))\n    z.append((data[2], i))\nx.sort()",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "peekOfCode": "x = []\ny = []\nz = []\nfor i in range(n):\n    data = list(map(int, input().split()))\n    x.append((data[0], i))\n    y.append((data[1], i))\n    z.append((data[2], i))\nx.sort()\ny.sort()",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "peekOfCode": "y = []\nz = []\nfor i in range(n):\n    data = list(map(int, input().split()))\n    x.append((data[0], i))\n    y.append((data[1], i))\n    z.append((data[2], i))\nx.sort()\ny.sort()\nz.sort()",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "peekOfCode": "z = []\nfor i in range(n):\n    data = list(map(int, input().split()))\n    x.append((data[0], i))\n    y.append((data[1], i))\n    z.append((data[2], i))\nx.sort()\ny.sort()\nz.sort()\nedges = []",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "peekOfCode": "edges = []\nfor i in range(n-1):\n    heapq.heappush(edges, (abs(x[i+1][0] - x[i][0]), x[i][1], x[i+1][1]))\n    heapq.heappush(edges, (abs(y[i+1][0] - y[i][0]), y[i][1], y[i+1][1]))\n    heapq.heappush(edges, (abs(z[i+1][0] - z[i][0]), z[i][1], z[i+1][1]))\nresult = 0\ntotal_cost = 0\nwhile edges and result < n - 1:\n    cost, x, y = heapq.heappop(edges)\n    if find_parent(parent, x) != find_parent(parent, y):",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "peekOfCode": "result = 0\ntotal_cost = 0\nwhile edges and result < n - 1:\n    cost, x, y = heapq.heappop(edges)\n    if find_parent(parent, x) != find_parent(parent, y):\n        union_parent(parent, x, y)\n        total_cost += cost\n        result += 1\nprint(total_cost)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "documentation": {}
    },
    {
        "label": "total_cost",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "peekOfCode": "total_cost = 0\nwhile edges and result < n - 1:\n    cost, x, y = heapq.heappop(edges)\n    if find_parent(parent, x) != find_parent(parent, y):\n        union_parent(parent, x, y)\n        total_cost += cost\n        result += 1\nprint(total_cost)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-1",
        "documentation": {}
    },
    {
        "label": "find_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "peekOfCode": "def find_parent(parent,x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "documentation": {}
    },
    {
        "label": "union_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "peekOfCode": "def union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:\n        parent[a] = b\nn = int(input())\nx = []\ny = []",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "peekOfCode": "n = int(input())\nx = []\ny = []\nz = []\nfor i in range(n):\n    a,b,c = map(int,input().split())\n    x.append((a,i))\n    y.append((b,i))\n    z.append((c,i))\nx.sort()",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "peekOfCode": "x = []\ny = []\nz = []\nfor i in range(n):\n    a,b,c = map(int,input().split())\n    x.append((a,i))\n    y.append((b,i))\n    z.append((c,i))\nx.sort()\ny.sort()",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "peekOfCode": "y = []\nz = []\nfor i in range(n):\n    a,b,c = map(int,input().split())\n    x.append((a,i))\n    y.append((b,i))\n    z.append((c,i))\nx.sort()\ny.sort()\nz.sort()",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "peekOfCode": "z = []\nfor i in range(n):\n    a,b,c = map(int,input().split())\n    x.append((a,i))\n    y.append((b,i))\n    z.append((c,i))\nx.sort()\ny.sort()\nz.sort()\nplanets = []",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "documentation": {}
    },
    {
        "label": "planets",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "peekOfCode": "planets = []\nfor i in range(n-1):\n    heapq.heappush(planets, (abs(x[i+1][0] - x[i][0]), x[i][1], x[i+1][1]))\n    heapq.heappush(planets, (abs(y[i+1][0] - y[i][0]), y[i][1], y[i+1][1]))\n    heapq.heappush(planets, (abs(z[i+1][0] - z[i][0]), z[i][1], z[i+1][1]))\nresult = 0\ntotal_cost = 0\nparent = [i for i in range(n)]\nwhile planets and result < n - 1:\n    cost,x,y = heapq.heappop(planets)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "peekOfCode": "result = 0\ntotal_cost = 0\nparent = [i for i in range(n)]\nwhile planets and result < n - 1:\n    cost,x,y = heapq.heappop(planets)\n    if find_parent(parent, x) != find_parent(parent, y):\n        union_parent(parent,x,y)\n        total_cost += cost\n        result += 1\nprint(total_cost)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "documentation": {}
    },
    {
        "label": "total_cost",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "peekOfCode": "total_cost = 0\nparent = [i for i in range(n)]\nwhile planets and result < n - 1:\n    cost,x,y = heapq.heappop(planets)\n    if find_parent(parent, x) != find_parent(parent, y):\n        union_parent(parent,x,y)\n        total_cost += cost\n        result += 1\nprint(total_cost)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "documentation": {}
    },
    {
        "label": "parent",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "peekOfCode": "parent = [i for i in range(n)]\nwhile planets and result < n - 1:\n    cost,x,y = heapq.heappop(planets)\n    if find_parent(parent, x) != find_parent(parent, y):\n        union_parent(parent,x,y)\n        total_cost += cost\n        result += 1\nprint(total_cost)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-2",
        "documentation": {}
    },
    {
        "label": "find_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "peekOfCode": "def find_parent(parent, x):\n    if parent[x] != x:\n        parent[x] = find_parent(parent, parent[x])\n    return parent[x]\ndef union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "documentation": {}
    },
    {
        "label": "union_parent",
        "kind": 2,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "peekOfCode": "def union_parent(parent, a, b):\n    a = find_parent(parent, a)\n    b = find_parent(parent, b)\n    if a < b:\n        parent[b] = a\n    else:\n        parent[a] = b\nn = int(input())\nx = []\ny = []",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "peekOfCode": "n = int(input())\nx = []\ny = []\nz = []\nfor i in range(n):\n    a,b,c = map(int, input().split())\n    x.append([a, i])\n    y.append([b, i])\n    z.append([c, i])\nx.sort()",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "peekOfCode": "x = []\ny = []\nz = []\nfor i in range(n):\n    a,b,c = map(int, input().split())\n    x.append([a, i])\n    y.append([b, i])\n    z.append([c, i])\nx.sort()\ny.sort()",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "peekOfCode": "y = []\nz = []\nfor i in range(n):\n    a,b,c = map(int, input().split())\n    x.append([a, i])\n    y.append([b, i])\n    z.append([c, i])\nx.sort()\ny.sort()\nz.sort()",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "peekOfCode": "z = []\nfor i in range(n):\n    a,b,c = map(int, input().split())\n    x.append([a, i])\n    y.append([b, i])\n    z.append([c, i])\nx.sort()\ny.sort()\nz.sort()\ndistances = []",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "documentation": {}
    },
    {
        "label": "distances",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "peekOfCode": "distances = []\nparent = [i for i in range(n+1)]\nfor i in range(n-1):\n    heapq.heappush(distances,(abs(x[i][0] - x[i+1][0]), x[i][1], x[i+1][1]))\n    heapq.heappush(distances,(abs(y[i][0] - y[i+1][0]), y[i][1], y[i+1][1]))\n    heapq.heappush(distances,(abs(z[i][0] - z[i+1][0]), z[i][1], z[i+1][1]))\ntotal_cost = 0\nresult = 0\nwhile distances and result < n - 1:\n    cost, a, b = heapq.heappop(distances)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "documentation": {}
    },
    {
        "label": "parent",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "peekOfCode": "parent = [i for i in range(n+1)]\nfor i in range(n-1):\n    heapq.heappush(distances,(abs(x[i][0] - x[i+1][0]), x[i][1], x[i+1][1]))\n    heapq.heappush(distances,(abs(y[i][0] - y[i+1][0]), y[i][1], y[i+1][1]))\n    heapq.heappush(distances,(abs(z[i][0] - z[i+1][0]), z[i][1], z[i+1][1]))\ntotal_cost = 0\nresult = 0\nwhile distances and result < n - 1:\n    cost, a, b = heapq.heappop(distances)\n    if find_parent(parent, a) != find_parent(parent, b):",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "documentation": {}
    },
    {
        "label": "total_cost",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "peekOfCode": "total_cost = 0\nresult = 0\nwhile distances and result < n - 1:\n    cost, a, b = heapq.heappop(distances)\n    if find_parent(parent, a) != find_parent(parent, b):\n        union_parent(parent, a, b)\n        total_cost += cost\n        result += 1\nprint(total_cost)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "peekOfCode": "result = 0\nwhile distances and result < n - 1:\n    cost, a, b = heapq.heappop(distances)\n    if find_parent(parent, a) != find_parent(parent, b):\n        union_parent(parent, a, b)\n        total_cost += cost\n        result += 1\nprint(total_cost)",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).44-3-best",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).45-2-best",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).45-2-best",
        "peekOfCode": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    t = list(map(int, input().split()))\n    m = int(input())\n    indegree = [0] * (n+1)\n    graph=[[False] * (n+1) for _ in range(n+1)]\n    for i in range(n):\n        for j in range(i+1,n):\n            graph[t[i]][t[j]] = True",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).45-2-best",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "Coding_test.Chapter 18. 그래프 이론(完).45-3",
        "description": "Coding_test.Chapter 18. 그래프 이론(完).45-3",
        "peekOfCode": "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    team = list(map(int, input().split()))\n    m = int(input())\n    graph = [[False]*(n+1) for i in range(n+1)]\n    indegree = [0] * (n+1)\n    answer = []\n    for i in range(n+1):\n        for j in range(n+1):",
        "detail": "Coding_test.Chapter 18. 그래프 이론(完).45-3",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).가장 가까운 같은 글자",
        "description": "Programmers.Level 1(完).가장 가까운 같은 글자",
        "peekOfCode": "def solution(s):\n    answer = [-1]*len(s)\n    for length in range(1,len(s)):\n        current = s[length]\n        for i in range(len(s[:length])):\n            if s[i] == current:\n                answer[length] = length-i\n    return answer",
        "detail": "Programmers.Level 1(完).가장 가까운 같은 글자",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).개인정보 수집 유효기간",
        "description": "Programmers.Level 1(完).개인정보 수집 유효기간",
        "peekOfCode": "def solution(today, terms, privacies):\n    answer = []\n    terms_dict = {}\n    for t in terms:\n        a, b = t.split()\n        terms_dict[a] = int(b)\n    now_year, now_month, now_day = map(int, today.split(\".\"))\n    for idx in range(len(privacies)):\n        prev, t = privacies[idx].split()\n        prev_year, prev_month, prev_day = map(int,prev.split(\".\"))",
        "detail": "Programmers.Level 1(完).개인정보 수집 유효기간",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).공원 산책",
        "description": "Programmers.Level 1(完).공원 산책",
        "peekOfCode": "def solution(park, routes):\n    answer = []\n    n = len(park)\n    m = len(park[0])\n    dx = [-1,0,1,0]\n    dy = [0,-1,0,1]\n    directions = {\"E\":3,\"W\":1,\"S\":2,\"N\":0}\n    for i in range(n):\n        for j in range(m):\n            if park[i][j] == 'S':",
        "detail": "Programmers.Level 1(完).공원 산책",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).과일 장수",
        "description": "Programmers.Level 1(完).과일 장수",
        "peekOfCode": "def solution(k, m, score):\n    score.sort(reverse=True)\n    answer = sum([min(score[i:i+m])*m if len(score[i:i+m]) == m else 0 for i in range(0,len(score), m)])\n    return answer",
        "detail": "Programmers.Level 1(完).과일 장수",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).기사단원의 무기",
        "description": "Programmers.Level 1(完).기사단원의 무기",
        "peekOfCode": "def solution(number, limit, power):\n    array = [i for i in range(1, number+1)]\n    answer = []\n    for data in array:\n        d= []\n        for i in range(1, int(data**0.5)+1):\n            if data % i == 0:\n                d.append(i)\n                if i != data // i:\n                    d.append(data//i)",
        "detail": "Programmers.Level 1(完).기사단원의 무기",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).달리기 경주",
        "description": "Programmers.Level 1(完).달리기 경주",
        "peekOfCode": "def solution(players, callings):\n    answer = {}\n    for idx in range(len(players)):\n        answer[players[idx]] = idx \n    for call in callings:\n        current_rank = answer[call]\n        answer[call] -= 1\n        answer[players[current_rank - 1]] += 1\n        players[current_rank - 1], players[current_rank] = call, players[current_rank - 1]\n    return players",
        "detail": "Programmers.Level 1(完).달리기 경주",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).대충 만든 자판",
        "description": "Programmers.Level 1(完).대충 만든 자판",
        "peekOfCode": "def solution(keymap, targets):\n    answer = []\n    for t in targets:\n        total = 0\n        for i in t:\n            count = [k.index(i)+1 if i in k else 1e9 for k in keymap ]   \n            total += min(count)\n            print(min(count))\n        if total >= 1e9:\n            answer.append(-1)",
        "detail": "Programmers.Level 1(完).대충 만든 자판",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).덧칠하기",
        "description": "Programmers.Level 1(完).덧칠하기",
        "peekOfCode": "def solution(n, m, section):\n    dq=deque(section)\n    cnt=1\n    flag=section[0]+m-1\n    while dq:\n        if dq[0]<=flag:\n            dq.popleft()\n        else:\n            cnt+=1\n            flag=dq[0]+m-1",
        "detail": "Programmers.Level 1(完).덧칠하기",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).둘만의 암호",
        "description": "Programmers.Level 1(完).둘만의 암호",
        "peekOfCode": "def solution(s, skip, index):\n    diff = set([chr(i) for i in range(97,123)]) - set(list(skip))\n    diff = sorted(list(diff))\n    answer = \"\"\n    for i in range(len(s)):\n        idx = (diff.index(s[i]) + index) % len(diff)\n        answer += diff[idx]\n    return answer",
        "detail": "Programmers.Level 1(完).둘만의 암호",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).로또의 최고 순위와 최저 순위",
        "description": "Programmers.Level 1(完).로또의 최고 순위와 최저 순위",
        "peekOfCode": "def solution(lottos, win_nums):\n    same = 0\n    for w in win_nums:\n        if w in lottos:\n            same += 1\n    possible = lottos.count(0)\n    first = same+possible\n    second = same\n    if first >= 2:\n        first = 7-first",
        "detail": "Programmers.Level 1(完).로또의 최고 순위와 최저 순위",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).명예의 전당(1)",
        "description": "Programmers.Level 1(完).명예의 전당(1)",
        "peekOfCode": "def solution(k, score):\n    answer = []\n    temp = []\n    for idx in range(len(score)):\n        temp.append(score[idx])\n        if len(temp) > k:\n            temp.remove(min(temp))\n        answer.append(min(temp))\n    return answer",
        "detail": "Programmers.Level 1(完).명예의 전당(1)",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).문자열 나누기",
        "description": "Programmers.Level 1(完).문자열 나누기",
        "peekOfCode": "def solution(s):\n    x = s[0]\n    a,b = 0,0\n    answer = 1\n    start = 0\n    for idx in range(len(s)-1):\n        if s[idx] == x:\n            a += 1\n        else:\n            b += 1",
        "detail": "Programmers.Level 1(完).문자열 나누기",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).바탕화면 정리",
        "description": "Programmers.Level 1(完).바탕화면 정리",
        "peekOfCode": "def solution(wallpaper):\n    x = []\n    y = []\n    for i in range(len(wallpaper)):\n        for j in range(len(wallpaper[i])):\n            if wallpaper[i][j] == '#':\n                x.append(i)\n                y.append(j)\n    min_x = min(x)\n    min_y = min(y)",
        "detail": "Programmers.Level 1(完).바탕화면 정리",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).부족한 금액 계산하기",
        "description": "Programmers.Level 1(完).부족한 금액 계산하기",
        "peekOfCode": "def solution(price, money, count):\n    usage = sum([i*price for i in range(1,count+1)])\n    answer = usage - money\n    if answer < 0:\n        return 0\n    return answer",
        "detail": "Programmers.Level 1(完).부족한 금액 계산하기",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).삼총사",
        "description": "Programmers.Level 1(完).삼총사",
        "peekOfCode": "def solution(number):\n    answer = 0\n    for combs in list(combinations(number, 5)):\n        print(combs)\n        if sum(combs) == 0:\n            answer += 1\n    return answer\nprint(solution([-2, 3, 0, 2, -5]))",
        "detail": "Programmers.Level 1(完).삼총사",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).성격 유형 검사하기",
        "description": "Programmers.Level 1(完).성격 유형 검사하기",
        "peekOfCode": "def solution(survey, choices):\n    result = {\"R\":0, \"T\":0, \"C\":0, \"F\":0, \"J\":0, \"M\":0, \"A\":0, \"N\":0}\n    answer = ''\n    for idx in range(len(survey)):\n        type_a, type_b = survey[idx][0], survey[idx][1]\n        if choices[idx] < 4:\n            result[type_a] += abs(choices[idx] - 4)\n        elif choices[idx] > 4:\n            result[type_b] += abs(choices[idx] - 4)\n    if result[\"R\"] < result[\"T\"]:",
        "detail": "Programmers.Level 1(完).성격 유형 검사하기",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).숫자 문자열과 영단어",
        "description": "Programmers.Level 1(完).숫자 문자열과 영단어",
        "peekOfCode": "def solution(s):\n    answer = \"\"\n    prev = \"\"\n    for i in range(len(s)):\n        if not s[i].isdigit():\n            prev += s[i]\n        else:\n            answer += s[i]\n        if prev in numbers.keys():\n            answer += str(numbers[prev])",
        "detail": "Programmers.Level 1(完).숫자 문자열과 영단어",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Programmers.Level 1(完).숫자 문자열과 영단어",
        "description": "Programmers.Level 1(完).숫자 문자열과 영단어",
        "peekOfCode": "numbers = {\"zero\":0, \"one\":1, \"two\":2, \"three\":3, \"four\":4, \"five\":5, \"six\":6, \"seven\":7, \"eight\":8, \"nine\":9}\ndef solution(s):\n    answer = \"\"\n    prev = \"\"\n    for i in range(len(s)):\n        if not s[i].isdigit():\n            prev += s[i]\n        else:\n            answer += s[i]\n        if prev in numbers.keys():",
        "detail": "Programmers.Level 1(完).숫자 문자열과 영단어",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).숫자 짝꿍",
        "description": "Programmers.Level 1(完).숫자 짝꿍",
        "peekOfCode": "def solution(X, Y):\n    common = set(X).intersection(set(Y))\n    if common:\n        answer = [n * min(list(X).count(n), list(Y).count(n)) for n in common]\n        answer.sort(reverse=True)\n        answer= \"\".join(answer)\n        if answer.startswith(\"0\"):\n            return \"0\"\n        else:\n            return answer",
        "detail": "Programmers.Level 1(完).숫자 짝꿍",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).신고 결과 받기",
        "description": "Programmers.Level 1(完).신고 결과 받기",
        "peekOfCode": "def solution(id_list, reports, k):\n    id_dict = {}\n    reported_ids = {}\n    for id in id_list:\n        id_dict[id] = []\n        reported_ids[id] = 0\n    for report in reports:\n        user, reported = report.split()\n        id_dict[user].append(reported)\n    for id in id_list:",
        "detail": "Programmers.Level 1(完).신고 결과 받기",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).신규 아이디 추천",
        "description": "Programmers.Level 1(完).신규 아이디 추천",
        "peekOfCode": "def solution(new_id):\n    answer = deepcopy(new_id)\n    answer = answer.lower()\n    answer = re.sub(r'[^a-zA-Z0-9\\-_\\.]', '', answer)\n    answer = re.sub(r'\\.{2,}', '.', answer)\n    while answer.startswith('.') or answer.endswith('.'):\n        if answer.startswith('.'):\n            answer = answer[1:]\n        if answer.endswith('.'):\n            answer = answer[:-1]",
        "detail": "Programmers.Level 1(完).신규 아이디 추천",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).옹알이2",
        "description": "Programmers.Level 1(完).옹알이2",
        "peekOfCode": "def solution(babbling):\n    talk = [\"aya\", \"ye\", \"woo\", \"ma\"]\n    for i in range(len(talk)):\n        for j in range(len(babbling)):\n            if talk[i] in babbling[j]:\n                babbling[j] = babbling[j].replace(talk[i], str(i))\n    answer = 0\n    for babble in babbling:\n        if babble.isdigit():\n            if len(babble) >= 2:",
        "detail": "Programmers.Level 1(完).옹알이2",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).이웃한칸",
        "description": "Programmers.Level 1(完).이웃한칸",
        "peekOfCode": "def solution(board, h, w):\n    n = len(board)\n    count = 0\n    dh = [0, 1, -1, 0]\n    dw = [1, 0, 0, -1]\n    for i in range(4):\n        h_check = h + dh[i]\n        w_check = w + dw[i]\n        if 0 <= h_check < n and 0 <= w_check < n:\n            if board[h][w] == board[h_check][w_check]:",
        "detail": "Programmers.Level 1(完).이웃한칸",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).최소직사각형",
        "description": "Programmers.Level 1(完).최소직사각형",
        "peekOfCode": "def solution(sizes):\n    max_row, max_col = 0,0\n    for i in range(len(sizes)):\n        if sizes[i][0] < sizes[i][1]:\n            sizes[i][0], sizes[i][1] = sizes[i][1], sizes[i][0]\n        max_row = max(max_row, sizes[i][0])\n        max_col = max(max_col, sizes[i][1])\n    answer = max_row*max_col\n    return answer",
        "detail": "Programmers.Level 1(完).최소직사각형",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).추억점수",
        "description": "Programmers.Level 1(完).추억점수",
        "peekOfCode": "def solution(name, yearning, photo):\n    score = {}\n    for i in range(len(name)):\n        score[name[i]] = yearning[i]\n    answer = []\n    for p in photo:\n        total = 0\n        for i in p:\n            if i in score.keys():\n                total += score[i]",
        "detail": "Programmers.Level 1(完).추억점수",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).카드 뭉치",
        "description": "Programmers.Level 1(完).카드 뭉치",
        "peekOfCode": "def solution(cards1, cards2, goal):\n    for g in goal:\n        if cards1 and g == cards1[0]:\n            del cards1[0]\n        elif cards2 and g == cards2[0]:\n            del cards2[0]\n        else:\n            return \"No\"\n    return 'Yes'\nprint(solution([\"i\", \"drink\", \"water\"], ",
        "detail": "Programmers.Level 1(完).카드 뭉치",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).콜라 문제",
        "description": "Programmers.Level 1(完).콜라 문제",
        "peekOfCode": "def solution(a,b,n):\n    answer = []\n    while n >= a :\n        coke = (n // a)*b\n        answer.append(coke)\n        bottles = n % a + coke\n        n = bottles\n    return sum(answer)\nprint(solution(2, 1, 20))\nprint(solution(3, 1, 20))",
        "detail": "Programmers.Level 1(完).콜라 문제",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).크기가 작은 부분문자열",
        "description": "Programmers.Level 1(完).크기가 작은 부분문자열",
        "peekOfCode": "def solution(t, p):\n    answer = 0\n    for i in range(len(t)):\n        number = t[i:i+len(p)]\n        if int(number) <= int(p) and len(number) == len(p):\n            answer += 1\n    return answer\nprint(solution(\"10203\",\"15\"))\nprint(solution(\"3141592\", \"271\"))",
        "detail": "Programmers.Level 1(完).크기가 작은 부분문자열",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).푸드 파이트 대회",
        "description": "Programmers.Level 1(完).푸드 파이트 대회",
        "peekOfCode": "def solution(food):\n    answer = ''\n    for i in range(1,len(food)):\n        if food[i] % 2 == 0:\n            answer += str(i)*(food[i]//2)\n        else:\n            answer += str(i)*((food[i]-1)//2)\n    answer = answer + \"0\" + answer[::-1]\n    return answer",
        "detail": "Programmers.Level 1(完).푸드 파이트 대회",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 1(完).햄버거 만들기",
        "description": "Programmers.Level 1(完).햄버거 만들기",
        "peekOfCode": "def solution(ingredient):\n    answer = 0\n    stack = []\n    for i in ingredient:\n        stack.append(i)\n        if stack[-4:] == [1,2,3,1]:\n            del stack[-4:]\n            answer += 1\n    return answer",
        "detail": "Programmers.Level 1(完).햄버거 만들기",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 2,
        "importPath": "Programmers.Level 2.숫자변환하기",
        "description": "Programmers.Level 2.숫자변환하기",
        "peekOfCode": "def solution(x, y, n):\n    if x >= y:\n        return 0 if x == y else -1\n    queue = deque([(x, 0)])\n    visited = {x}\n    while queue:\n        current, steps = queue.popleft()\n        operations = [current * 2, current * 3, current + n]\n        for next_val in operations:\n            if next_val == y:",
        "detail": "Programmers.Level 2.숫자변환하기",
        "documentation": {}
    }
]